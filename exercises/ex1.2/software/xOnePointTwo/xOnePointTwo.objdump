
xOnePointTwo.elf:     file format elf32-littlenios2
xOnePointTwo.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x000101f4 memsz 0x000101f4 flags r-x
    LOAD off    0x00011214 vaddr 0x08010214 paddr 0x08011d00 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x000137ec vaddr 0x080137ec paddr 0x080137ec align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fd10  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000348  0800fecc  0800fecc  00010ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  08010214  08011d00  00011214  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  080137ec  080137ec  000137ec  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00012d00  2**0
                  CONTENTS
  7 .sdram        00000000  08013950  08013950  00012d00  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00012d00  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f38  00000000  00000000  00012d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002374a  00000000  00000000  00013c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000932f  00000000  00000000  000373aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b4f1  00000000  00000000  000406d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000021f4  00000000  00000000  0004bbcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000033e1  00000000  00000000  0004ddc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000175be  00000000  00000000  000511a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00068760  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018b0  00000000  00000000  00068790  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006d303  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006d306  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006d312  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006d313  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0006d314  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0006d31f  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0006d32a  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000b  00000000  00000000  0006d335  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000002d  00000000  00000000  0006d340  2**0
                  CONTENTS, READONLY
 27 .jdi          00004733  00000000  00000000  0006d36d  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0004a0e8  00000000  00000000  00071aa0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001bc l    d  .text	00000000 .text
0800fecc l    d  .rodata	00000000 .rodata
08010214 l    d  .rwdata	00000000 .rwdata
080137ec l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08013950 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../xOnePointTwo_bsp//obj/HAL/src/crt0.o
08000204 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 matrixMultiply.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0801005a l     O .rodata	00000010 zeroes.4255
08002dd8 l     F .text	000000bc __sbprintf
0801006a l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08002fe8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08004bcc l     F .text	00000008 __fp_lock
08004bd4 l     F .text	00000008 __fp_unlock
08004be8 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08010214 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
08010658 l     O .rwdata	00000020 lc_ctype_charset
08010638 l     O .rwdata	00000020 lc_message_charset
08010678 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0801009c l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08007638 l     F .text	000000fc __sprint_r.part.0
080101c0 l     O .rodata	00000010 zeroes.4200
080101d0 l     O .rodata	00000010 blanks.4199
08008a60 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0800ac14 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0800d4d8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800d600 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800d62c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800d734 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800d830 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800d914 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800daf8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08011cf0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0800dd7c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800decc l     F .text	00000038 alt_dev_reg
08010c60 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800e1dc l     F .text	00000204 altera_avalon_jtag_uart_irq
0800e3e0 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0800ea00 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800edc0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0800f26c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0800f3c4 l     F .text	00000050 alt_get_errno
0800f414 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08007180 g     F .text	00000074 _mprec_log10
0800726c g     F .text	0000008c __any_on
080094ac g     F .text	00000054 _isatty_r
080100a8 g     O .rodata	00000028 __mprec_tinytens
0800da40 g     F .text	00000078 alt_main
08013850 g     O .bss	00000100 alt_irq
08009500 g     F .text	0000005c _lseek_r
08011d00 g       *ABS*	00000000 __flash_rwdata_start
0800bf5c g     F .text	00000084 .hidden __eqdf2
08013950 g       *ABS*	00000000 __alt_heap_start
08000d20 g     F .text	0000003c printf
08009dd0 g     F .text	0000009c _wcrtomb_r
08007498 g     F .text	0000005c __sseek
08004f2c g     F .text	00000010 __sinit
08009c7c g     F .text	00000138 __swbuf_r
08005518 g     F .text	0000007c _setlocale_r
08004d84 g     F .text	00000078 __sfmoreglue
0800dad8 g     F .text	00000020 __malloc_unlock
08000620 g     F .text	00000450 .hidden __divsf3
08013818 g     O .bss	00000004 altera_avalon_timer_ts_freq
0800955c g     F .text	0000015c memmove
08004f14 g     F .text	00000018 _cleanup
0800629c g     F .text	000000a8 _Balloc
0800bfe0 g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
08000000 g     F .entry	0000001c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08008f88 g     F .text	00000058 _fstat_r
08013804 g     O .bss	00000004 errno
08007414 g     F .text	00000008 __seofread
0801380c g     O .bss	00000004 alt_argv
08019cc0 g       *ABS*	00000000 _gp
08010ae0 g     O .rwdata	00000180 alt_fd_list
0800f824 g     F .text	00000090 alt_find_dev
08006040 g     F .text	00000138 memcpy
08004bdc g     F .text	0000000c _cleanup_r
0800d364 g     F .text	000000d0 .hidden __floatsidf
0800f34c g     F .text	00000078 alt_io_redirect
0800c0c0 g     F .text	000000e0 .hidden __ltdf2
0800fecc g       *ABS*	00000000 __DTOR_END__
080072f8 g     F .text	00000074 __fpclassifyd
080070dc g     F .text	000000a4 __ratio
08000310 g     F .text	0000014c multiply
08008a3c g     F .text	00000024 __vfiprintf_internal
0800e5dc g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
08000cf4 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0800ad30 g     F .text	00000008 .hidden __udivsi3
0800d784 g     F .text	000000ac isatty
080100f8 g     O .rodata	000000c8 __mprec_tens
08005594 g     F .text	0000000c __locale_charset
0800fa9c g     F .text	0000008c alt_icache_flush
08013800 g     O .bss	00000004 __malloc_top_pad
08011cc8 g     O .rwdata	00000004 __mb_cur_max
080055c4 g     F .text	0000000c _localeconv_r
08008fe0 g     F .text	000004cc __sfvwrite_r
080066d0 g     F .text	0000003c __i2b
0800736c g     F .text	00000054 _sbrk_r
080096b8 g     F .text	0000005c _read_r
08011ce8 g     O .rwdata	00000004 alt_max_fd
08008ca4 g     F .text	000000f0 _fclose_r
08004b9c g     F .text	00000030 fflush
080137fc g     O .bss	00000004 __malloc_max_sbrked_mem
08000b80 g     F .text	00000110 .hidden __extendsfdf2
0800ad40 g     F .text	0000089c .hidden __adddf3
08006e84 g     F .text	0000011c __b2d
0800a5f8 g     F .text	0000061c .hidden __umoddi3
0800d964 g     F .text	000000dc lseek
08011cc0 g     O .rwdata	00000004 _global_impure_ptr
08009714 g     F .text	00000568 _realloc_r
08013950 g       *ABS*	00000000 __bss_end
0800f17c g     F .text	000000f0 alt_iic_isr_register
0800f700 g     F .text	00000104 alt_tick
08009fb8 g     F .text	00000640 .hidden __udivdi3
08008da8 g     F .text	00000184 _fputwc_r
080100d0 g     O .rodata	00000028 __mprec_bigtens
080064b4 g     F .text	00000104 __s2b
0800d434 g     F .text	000000a4 .hidden __floatunsidf
08006c2c g     F .text	00000060 __mcmp
08004f4c g     F .text	00000018 __fp_lock_all
0800f130 g     F .text	0000004c alt_ic_irq_enabled
0800f668 g     F .text	00000098 alt_alarm_stop
0801381c g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000d0 alt_irq_handler
08010ab8 g     O .rwdata	00000028 alt_dev_null
0800ed7c g     F .text	00000044 alt_dcache_flush_all
080065b8 g     F .text	00000068 __hi0bits
0800d2dc g     F .text	00000088 .hidden __fixdfsi
08011d00 g       *ABS*	00000000 __ram_rwdata_end
08011ce0 g     O .rwdata	00000008 alt_dev_list
0800ddcc g     F .text	00000100 write
0800ec14 g     F .text	00000028 alt_timestamp_freq
08010214 g       *ABS*	00000000 __ram_rodata_end
0800d67c g     F .text	000000b8 fstat
0800c0c0 g     F .text	000000e0 .hidden __ledf2
0800699c g     F .text	00000140 __pow5mult
0800774c g     F .text	000012f0 ___vfiprintf_internal_r
080137f4 g     O .bss	00000004 __nlocale_changed
0800ad38 g     F .text	00000008 .hidden __umodsi3
08013950 g       *ABS*	00000000 end
0800e118 g     F .text	000000c4 altera_avalon_jtag_uart_init
0800fecc g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800ea74 g     F .text	00000088 alt_avalon_timer_sc_init
08000c90 g     F .text	00000064 .hidden __clzsi2
0800e7e8 g     F .text	00000218 altera_avalon_jtag_uart_write
08004f3c g     F .text	00000004 __sfp_lock_acquire
08005f58 g     F .text	000000e8 memchr
08000d5c g     F .text	00002058 ___vfprintf_internal_r
080050a0 g     F .text	000002f0 _free_r
080055a0 g     F .text	00000010 __locale_mb_cur_max
0800fd04 g     F .text	00000194 __call_exitprocs
080137f0 g     O .bss	00000004 __mlocale_changed
08011ccc g     O .rwdata	00000004 __malloc_sbrk_base
080001bc g     F .text	0000004c _start
08013820 g     O .bss	00000004 _alt_tick_rate
08006adc g     F .text	00000150 __lshift
08013824 g     O .bss	00000004 _alt_nticks
0800db48 g     F .text	00000104 read
0800df38 g     F .text	0000007c alt_sys_init
0800fbf0 g     F .text	00000114 __register_exitproc
0800670c g     F .text	00000290 __multiply
0800e488 g     F .text	00000068 altera_avalon_jtag_uart_close
080005f8 g     F .text	00000028 .hidden __mulsi3
08010214 g       *ABS*	00000000 __ram_rwdata_start
0800fecc g       *ABS*	00000000 __ram_rodata_start
08013828 g     O .bss	00000028 __malloc_current_mallinfo
08006fa0 g     F .text	0000013c __d2b
0800dfb4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0800f9c8 g     F .text	000000d4 alt_get_fd
08008b78 g     F .text	00000054 _close_r
0800fb74 g     F .text	0000007c memcmp
0800e074 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08000208 g     F .text	00000108 init_matrices
08013950 g       *ABS*	00000000 __alt_stack_base
0800e0c4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08002e94 g     F .text	00000154 __swsetup_r
0800b5dc g     F .text	00000980 .hidden __divdf3
08004dfc g     F .text	00000118 __sfp
080071f4 g     F .text	00000078 __copybits
080106b0 g     O .rwdata	00000408 __malloc_av_
08004f48 g     F .text	00000004 __sinit_lock_release
0800c1a0 g     F .text	0000086c .hidden __muldf3
080073c0 g     F .text	00000054 __sread
0800f8b4 g     F .text	00000114 alt_find_file
0800ee10 g     F .text	000000a4 alt_dev_llist_insert
0800dab8 g     F .text	00000020 __malloc_lock
0800dccc g     F .text	000000b0 sbrk
08004b40 g     F .text	0000005c _fflush_r
08008bcc g     F .text	000000d8 _calloc_r
080137ec g       *ABS*	00000000 __bss_start
08006178 g     F .text	00000124 memset
0800045c g     F .text	0000019c main
08013810 g     O .bss	00000004 alt_envp
080137f8 g     O .bss	00000004 __malloc_max_total_mem
0800e014 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08009db4 g     F .text	0000001c __swbuf
080074f4 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
08008d94 g     F .text	00000014 fclose
0800eafc g     F .text	00000088 alt_timestamp_start
08003210 g     F .text	00001728 _dtoa_r
080057b0 g     F .text	000007a8 _malloc_r
08009f2c g     F .text	00000030 __ascii_wctomb
08011cec g     O .rwdata	00000004 alt_errno
08005390 g     F .text	000000c4 _fwalk
0800ac80 g     F .text	00000054 .hidden __divsi3
08004f7c g     F .text	00000124 _malloc_trim_r
0800fecc g       *ABS*	00000000 __CTOR_END__
080074fc g     F .text	000000a4 strcmp
0800fecc g       *ABS*	00000000 __flash_rodata_start
0800fecc g       *ABS*	00000000 __DTOR_LIST__
0800bf5c g     F .text	00000084 .hidden __nedf2
0800df04 g     F .text	00000034 alt_irq_init
0800dc4c g     F .text	00000080 alt_release_fd
0800ff18 g     O .rodata	00000100 .hidden __clz_tab
080137ec g     O .bss	00000004 _PathLocale
0800fb28 g     F .text	00000014 atexit
08008b1c g     F .text	0000005c _write_r
080055d0 g     F .text	0000001c setlocale
08011cc4 g     O .rwdata	00000004 _impure_ptr
08013808 g     O .bss	00000004 alt_argc
08004938 g     F .text	00000208 __sflush_r
08013814 g     O .bss	00000004 altera_avalon_timer_ts_base
0800ef10 g     F .text	0000005c _do_dtors
080055bc g     F .text	00000008 __locale_cjk_lang
08000020 g       .exceptions	00000000 alt_irq_entry
08006e24 g     F .text	00000060 __ulp
08004f64 g     F .text	00000018 __fp_unlock_all
08011cd8 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
080055ec g     F .text	0000000c localeconv
0800eb84 g     F .text	00000090 alt_timestamp
0800ef9c g     F .text	00000050 alt_ic_isr_register
08011d00 g       *ABS*	00000000 _edata
08013950 g       *ABS*	00000000 _end
080001bc g       *ABS*	00000000 __ram_exceptions_end
0800e4f0 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0800f08c g     F .text	000000a4 alt_ic_irq_disable
0800741c g     F .text	0000007c __swrite
08011cd0 g     O .rwdata	00000004 __malloc_trim_threshold
0800f804 g     F .text	00000020 altera_nios2_qsys_irq_init
080055b0 g     F .text	0000000c __locale_msgcharset
0800fb3c g     F .text	00000038 exit
08005454 g     F .text	000000c4 _fwalk_reent
08000a70 g     F .text	00000110 .hidden __floatunsisf
08006c8c g     F .text	00000198 __mdiff
0800acd4 g     F .text	0000005c .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08004f40 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
0800fe98 g     F .text	00000034 _exit
0800ec3c g     F .text	00000140 alt_alarm_start
080055f8 g     F .text	000001b8 __smakebuf_r
080075a0 g     F .text	00000098 strlen
0800f508 g     F .text	00000160 open
0800bfe0 g     F .text	000000e0 .hidden __gedf2
08011cd4 g     O .rwdata	00000004 __wctomb
08007734 g     F .text	00000018 __sprint_r
0800ef6c g     F .text	00000030 alt_icache_flush_all
08011cf4 g     O .rwdata	00000004 alt_priority_mask
0800efec g     F .text	000000a0 alt_ic_irq_enable
08002db4 g     F .text	00000024 __vfprintf_internal
08009f5c g     F .text	0000005c _wctomb_r
0800ca0c g     F .text	000008d0 .hidden __subdf3
08006620 g     F .text	000000b0 __lo0bits
08011cf8 g     O .rwdata	00000008 alt_alarm_list
0800eeb4 g     F .text	0000005c _do_ctors
08009e6c g     F .text	000000c0 wcrtomb
0800d528 g     F .text	000000d8 close
0800d894 g     F .text	00000080 alt_load
08008f2c g     F .text	0000005c fputwc
00000000  w      *UND*	00000000 free
08004f44 g     F .text	00000004 __sinit_lock_acquire
0800636c g     F .text	00000148 __multadd
08006344 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08406f14 	ori	at,at,444
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001426 	beq	r2,zero,800017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	00820074 	movhi	r2,2049
 8000130:	108e1404 	addi	r2,r2,14416
 8000134:	e0fffd17 	ldw	r3,-12(fp)
 8000138:	180690fa 	slli	r3,r3,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	00820074 	movhi	r2,2049
 8000148:	108e1404 	addi	r2,r2,14416
 800014c:	e13ffd17 	ldw	r4,-12(fp)
 8000150:	200890fa 	slli	r4,r4,3
 8000154:	21000104 	addi	r4,r4,4
 8000158:	1105883a 	add	r2,r2,r4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	00000706 	br	8000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800017c:	e0bffc17 	ldw	r2,-16(fp)
 8000180:	1085883a 	add	r2,r2,r2
 8000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000188:	e0bffd17 	ldw	r2,-12(fp)
 800018c:	10800044 	addi	r2,r2,1
 8000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000194:	003fe106 	br	800011c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 8000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800019c:	e0bffb17 	ldw	r2,-20(fp)
 80001a0:	103fdb1e 	bne	r2,zero,8000110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	e037883a 	mov	sp,fp
 80001ac:	dfc00117 	ldw	ra,4(sp)
 80001b0:	df000017 	ldw	fp,0(sp)
 80001b4:	dec00204 	addi	sp,sp,8
 80001b8:	f800283a 	ret

Disassembly of section .text:

080001bc <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 80001bc:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 80001c0:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 80001c4:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 80001c8:	00bffd16 	blt	zero,r2,80001c0 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001cc:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 80001d0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001d4:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 80001d8:	d6a73014 	ori	gp,gp,40128
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001dc:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 80001e0:	108dfb14 	ori	r2,r2,14316

    movhi r3, %hi(__bss_end)
 80001e4:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 80001e8:	18ce5414 	ori	r3,r3,14672

    beq r2, r3, 1f
 80001ec:	10c00326 	beq	r2,r3,80001fc <_start+0x40>

0:
    stw zero, (r2)
 80001f0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001f4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001f8:	10fffd36 	bltu	r2,r3,80001f0 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001fc:	800d8940 	call	800d894 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000200:	800da400 	call	800da40 <alt_main>

08000204 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000204:	003fff06 	br	8000204 <alt_after_alt_main>

08000208 <init_matrices>:
/**
 * Sets each entry of first matrix to be the index of its row,
 * the each entry of the second matrix to be the index of its column,
 * and the third matrix to consist of all 0s.
 */
void init_matrices(int a[][COLS], int b[][COLS], int c[][COLS]) {
 8000208:	defff904 	addi	sp,sp,-28
 800020c:	dfc00615 	stw	ra,24(sp)
 8000210:	df000515 	stw	fp,20(sp)
 8000214:	df000504 	addi	fp,sp,20
 8000218:	e13ffd15 	stw	r4,-12(fp)
 800021c:	e17ffe15 	stw	r5,-8(fp)
 8000220:	e1bfff15 	stw	r6,-4(fp)
	int i, j;

	// set element in each of the three matrices
	for(i = 0; i < COLS; i++) {
 8000224:	e03ffb15 	stw	zero,-20(fp)
 8000228:	00003106 	br	80002f0 <init_matrices+0xe8>
		for(j = 0; j < ROWS; j++) {
 800022c:	e03ffc15 	stw	zero,-16(fp)
 8000230:	00002906 	br	80002d8 <init_matrices+0xd0>
			a[i][j] = i;
 8000234:	e0bffb17 	ldw	r2,-20(fp)
 8000238:	1009883a 	mov	r4,r2
 800023c:	01406404 	movi	r5,400
 8000240:	80005f80 	call	80005f8 <__mulsi3>
 8000244:	1007883a 	mov	r3,r2
 8000248:	e0bffd17 	ldw	r2,-12(fp)
 800024c:	10c7883a 	add	r3,r2,r3
 8000250:	e0bffc17 	ldw	r2,-16(fp)
 8000254:	1085883a 	add	r2,r2,r2
 8000258:	1085883a 	add	r2,r2,r2
 800025c:	1885883a 	add	r2,r3,r2
 8000260:	e0fffb17 	ldw	r3,-20(fp)
 8000264:	10c00015 	stw	r3,0(r2)
			b[i][j] = j;
 8000268:	e0bffb17 	ldw	r2,-20(fp)
 800026c:	1009883a 	mov	r4,r2
 8000270:	01406404 	movi	r5,400
 8000274:	80005f80 	call	80005f8 <__mulsi3>
 8000278:	1007883a 	mov	r3,r2
 800027c:	e0bffe17 	ldw	r2,-8(fp)
 8000280:	10c7883a 	add	r3,r2,r3
 8000284:	e0bffc17 	ldw	r2,-16(fp)
 8000288:	1085883a 	add	r2,r2,r2
 800028c:	1085883a 	add	r2,r2,r2
 8000290:	1885883a 	add	r2,r3,r2
 8000294:	e0fffc17 	ldw	r3,-16(fp)
 8000298:	10c00015 	stw	r3,0(r2)
			c[i][j] = 0;
 800029c:	e0bffb17 	ldw	r2,-20(fp)
 80002a0:	1009883a 	mov	r4,r2
 80002a4:	01406404 	movi	r5,400
 80002a8:	80005f80 	call	80005f8 <__mulsi3>
 80002ac:	1007883a 	mov	r3,r2
 80002b0:	e0bfff17 	ldw	r2,-4(fp)
 80002b4:	10c7883a 	add	r3,r2,r3
 80002b8:	e0bffc17 	ldw	r2,-16(fp)
 80002bc:	1085883a 	add	r2,r2,r2
 80002c0:	1085883a 	add	r2,r2,r2
 80002c4:	1885883a 	add	r2,r3,r2
 80002c8:	10000015 	stw	zero,0(r2)
void init_matrices(int a[][COLS], int b[][COLS], int c[][COLS]) {
	int i, j;

	// set element in each of the three matrices
	for(i = 0; i < COLS; i++) {
		for(j = 0; j < ROWS; j++) {
 80002cc:	e0bffc17 	ldw	r2,-16(fp)
 80002d0:	10800044 	addi	r2,r2,1
 80002d4:	e0bffc15 	stw	r2,-16(fp)
 80002d8:	e0bffc17 	ldw	r2,-16(fp)
 80002dc:	10801910 	cmplti	r2,r2,100
 80002e0:	103fd41e 	bne	r2,zero,8000234 <init_matrices+0x2c>
 */
void init_matrices(int a[][COLS], int b[][COLS], int c[][COLS]) {
	int i, j;

	// set element in each of the three matrices
	for(i = 0; i < COLS; i++) {
 80002e4:	e0bffb17 	ldw	r2,-20(fp)
 80002e8:	10800044 	addi	r2,r2,1
 80002ec:	e0bffb15 	stw	r2,-20(fp)
 80002f0:	e0bffb17 	ldw	r2,-20(fp)
 80002f4:	10801910 	cmplti	r2,r2,100
 80002f8:	103fcc1e 	bne	r2,zero,800022c <init_matrices+0x24>
			a[i][j] = i;
			b[i][j] = j;
			c[i][j] = 0;
		}
	}
}
 80002fc:	e037883a 	mov	sp,fp
 8000300:	dfc00117 	ldw	ra,4(sp)
 8000304:	df000017 	ldw	fp,0(sp)
 8000308:	dec00204 	addi	sp,sp,8
 800030c:	f800283a 	ret

08000310 <multiply>:
 * Multiplies a two square matrices, and stores the output in a third
 * @param m1 first matrix, to multiply
 * @param m2 second matrix, to multiply
 * @param prod product of m1 * m2
 */
void multiply(int m1[][COLS], int m2[][COLS], int prod[][COLS]) {
 8000310:	defff604 	addi	sp,sp,-40
 8000314:	dfc00915 	stw	ra,36(sp)
 8000318:	df000815 	stw	fp,32(sp)
 800031c:	dc000715 	stw	r16,28(sp)
 8000320:	df000804 	addi	fp,sp,32
 8000324:	e13ffc15 	stw	r4,-16(fp)
 8000328:	e17ffd15 	stw	r5,-12(fp)
 800032c:	e1bffe15 	stw	r6,-8(fp)

	// make sure that we have a square matrix
	assert(ROWS == COLS);

	// compute product
	for(i = 0; i < COLS; i++) {
 8000330:	e03ff815 	stw	zero,-32(fp)
 8000334:	00004006 	br	8000438 <multiply+0x128>
		for(j = 0; j < ROWS; j++) {
 8000338:	e03ff915 	stw	zero,-28(fp)
 800033c:	00003806 	br	8000420 <multiply+0x110>
			sum = 0;
 8000340:	e03ffb15 	stw	zero,-20(fp)

			for(k = 0; k < ROWS; k++) {
 8000344:	e03ffa15 	stw	zero,-24(fp)
 8000348:	00002206 	br	80003d4 <multiply+0xc4>
				sum += m1[i][k] * m2[k][j];
 800034c:	e0bff817 	ldw	r2,-32(fp)
 8000350:	1009883a 	mov	r4,r2
 8000354:	01406404 	movi	r5,400
 8000358:	80005f80 	call	80005f8 <__mulsi3>
 800035c:	1007883a 	mov	r3,r2
 8000360:	e0bffc17 	ldw	r2,-16(fp)
 8000364:	10c7883a 	add	r3,r2,r3
 8000368:	e0bffa17 	ldw	r2,-24(fp)
 800036c:	1085883a 	add	r2,r2,r2
 8000370:	1085883a 	add	r2,r2,r2
 8000374:	1885883a 	add	r2,r3,r2
 8000378:	14000017 	ldw	r16,0(r2)
 800037c:	e0bffa17 	ldw	r2,-24(fp)
 8000380:	1009883a 	mov	r4,r2
 8000384:	01406404 	movi	r5,400
 8000388:	80005f80 	call	80005f8 <__mulsi3>
 800038c:	1007883a 	mov	r3,r2
 8000390:	e0bffd17 	ldw	r2,-12(fp)
 8000394:	10c7883a 	add	r3,r2,r3
 8000398:	e0bff917 	ldw	r2,-28(fp)
 800039c:	1085883a 	add	r2,r2,r2
 80003a0:	1085883a 	add	r2,r2,r2
 80003a4:	1885883a 	add	r2,r3,r2
 80003a8:	10800017 	ldw	r2,0(r2)
 80003ac:	8009883a 	mov	r4,r16
 80003b0:	100b883a 	mov	r5,r2
 80003b4:	80005f80 	call	80005f8 <__mulsi3>
 80003b8:	1007883a 	mov	r3,r2
 80003bc:	e0bffb17 	ldw	r2,-20(fp)
 80003c0:	10c5883a 	add	r2,r2,r3
 80003c4:	e0bffb15 	stw	r2,-20(fp)
	// compute product
	for(i = 0; i < COLS; i++) {
		for(j = 0; j < ROWS; j++) {
			sum = 0;

			for(k = 0; k < ROWS; k++) {
 80003c8:	e0bffa17 	ldw	r2,-24(fp)
 80003cc:	10800044 	addi	r2,r2,1
 80003d0:	e0bffa15 	stw	r2,-24(fp)
 80003d4:	e0bffa17 	ldw	r2,-24(fp)
 80003d8:	10801910 	cmplti	r2,r2,100
 80003dc:	103fdb1e 	bne	r2,zero,800034c <multiply+0x3c>
				sum += m1[i][k] * m2[k][j];
			}

			prod[i][j] = sum;
 80003e0:	e0bff817 	ldw	r2,-32(fp)
 80003e4:	1009883a 	mov	r4,r2
 80003e8:	01406404 	movi	r5,400
 80003ec:	80005f80 	call	80005f8 <__mulsi3>
 80003f0:	1007883a 	mov	r3,r2
 80003f4:	e0bffe17 	ldw	r2,-8(fp)
 80003f8:	10c7883a 	add	r3,r2,r3
 80003fc:	e0bff917 	ldw	r2,-28(fp)
 8000400:	1085883a 	add	r2,r2,r2
 8000404:	1085883a 	add	r2,r2,r2
 8000408:	1885883a 	add	r2,r3,r2
 800040c:	e0fffb17 	ldw	r3,-20(fp)
 8000410:	10c00015 	stw	r3,0(r2)
	// make sure that we have a square matrix
	assert(ROWS == COLS);

	// compute product
	for(i = 0; i < COLS; i++) {
		for(j = 0; j < ROWS; j++) {
 8000414:	e0bff917 	ldw	r2,-28(fp)
 8000418:	10800044 	addi	r2,r2,1
 800041c:	e0bff915 	stw	r2,-28(fp)
 8000420:	e0bff917 	ldw	r2,-28(fp)
 8000424:	10801910 	cmplti	r2,r2,100
 8000428:	103fc51e 	bne	r2,zero,8000340 <multiply+0x30>

	// make sure that we have a square matrix
	assert(ROWS == COLS);

	// compute product
	for(i = 0; i < COLS; i++) {
 800042c:	e0bff817 	ldw	r2,-32(fp)
 8000430:	10800044 	addi	r2,r2,1
 8000434:	e0bff815 	stw	r2,-32(fp)
 8000438:	e0bff817 	ldw	r2,-32(fp)
 800043c:	10801910 	cmplti	r2,r2,100
 8000440:	103fbd1e 	bne	r2,zero,8000338 <multiply+0x28>
			}

			prod[i][j] = sum;
		}
	}
}
 8000444:	e6ffff04 	addi	sp,fp,-4
 8000448:	dfc00217 	ldw	ra,8(sp)
 800044c:	df000117 	ldw	fp,4(sp)
 8000450:	dc000017 	ldw	r16,0(sp)
 8000454:	dec00304 	addi	sp,sp,12
 8000458:	f800283a 	ret

0800045c <main>:


int main(void) {
 800045c:	defffd04 	addi	sp,sp,-12
 8000460:	dfc00215 	stw	ra,8(sp)
 8000464:	df000115 	stw	fp,4(sp)
 8000468:	dc000015 	stw	r16,0(sp)
 800046c:	df000104 	addi	fp,sp,4
 8000470:	023fffb4 	movhi	r8,65534
 8000474:	420ace04 	addi	r8,r8,11064
 8000478:	da37883a 	add	sp,sp,r8
	 /** TIMESTAMP TEST **/
	//////////////////////

	unsigned long start_time, end_time;	// timer values

	init_matrices(a, b, c);		// initialize matrices
 800047c:	00bfffb4 	movhi	r2,65534
 8000480:	108acf04 	addi	r2,r2,11068
 8000484:	e089883a 	add	r4,fp,r2
 8000488:	00a71214 	movui	r2,40008
 800048c:	017fffb4 	movhi	r5,65534
 8000490:	294acd04 	addi	r5,r5,11060
 8000494:	2f0b883a 	add	r5,r5,fp
 8000498:	2887883a 	add	r3,r5,r2
 800049c:	00800074 	movhi	r2,1
 80004a0:	108e2204 	addi	r2,r2,14472
 80004a4:	017fffb4 	movhi	r5,65534
 80004a8:	294acd04 	addi	r5,r5,11060
 80004ac:	2f0b883a 	add	r5,r5,fp
 80004b0:	2885883a 	add	r2,r5,r2
 80004b4:	180b883a 	mov	r5,r3
 80004b8:	100d883a 	mov	r6,r2
 80004bc:	80002080 	call	8000208 <init_matrices>

	alt_timestamp_start();		// start timer
 80004c0:	800eafc0 	call	800eafc <alt_timestamp_start>

	// start timestamp timer
	start_time = (int) alt_timestamp();
 80004c4:	800eb840 	call	800eb84 <alt_timestamp>
 80004c8:	00ffffb4 	movhi	r3,65534
 80004cc:	18cacd04 	addi	r3,r3,11060
 80004d0:	1f07883a 	add	r3,r3,fp
 80004d4:	18800015 	stw	r2,0(r3)

	// calculate
	multiply(a, b, c);
 80004d8:	017fffb4 	movhi	r5,65534
 80004dc:	294acf04 	addi	r5,r5,11068
 80004e0:	e149883a 	add	r4,fp,r5
 80004e4:	00a71214 	movui	r2,40008
 80004e8:	017fffb4 	movhi	r5,65534
 80004ec:	294acd04 	addi	r5,r5,11060
 80004f0:	2f0b883a 	add	r5,r5,fp
 80004f4:	2887883a 	add	r3,r5,r2
 80004f8:	00800074 	movhi	r2,1
 80004fc:	108e2204 	addi	r2,r2,14472
 8000500:	017fffb4 	movhi	r5,65534
 8000504:	294acd04 	addi	r5,r5,11060
 8000508:	2f0b883a 	add	r5,r5,fp
 800050c:	2885883a 	add	r2,r5,r2
 8000510:	180b883a 	mov	r5,r3
 8000514:	100d883a 	mov	r6,r2
 8000518:	80003100 	call	8000310 <multiply>

	// stop timer
	end_time = (int) alt_timestamp();
 800051c:	800eb840 	call	800eb84 <alt_timestamp>
 8000520:	00ffffb4 	movhi	r3,65534
 8000524:	18cace04 	addi	r3,r3,11064
 8000528:	1f07883a 	add	r3,r3,fp
 800052c:	18800015 	stw	r2,0(r3)

	printf("Timestamp Time Taken: %lu clock ticks\n", end_time - start_time);
 8000530:	013fffb4 	movhi	r4,65534
 8000534:	210ace04 	addi	r4,r4,11064
 8000538:	2709883a 	add	r4,r4,fp
 800053c:	20c00017 	ldw	r3,0(r4)
 8000540:	017fffb4 	movhi	r5,65534
 8000544:	294acd04 	addi	r5,r5,11060
 8000548:	2f0b883a 	add	r5,r5,fp
 800054c:	28800017 	ldw	r2,0(r5)
 8000550:	1885c83a 	sub	r2,r3,r2
 8000554:	01020074 	movhi	r4,2049
 8000558:	213fb304 	addi	r4,r4,-308
 800055c:	100b883a 	mov	r5,r2
 8000560:	8000d200 	call	8000d20 <printf>
	printf("                      %f seconds\n", (float)(end_time - start_time) / (float)alt_timestamp_freq());
 8000564:	00bfffb4 	movhi	r2,65534
 8000568:	108ace04 	addi	r2,r2,11064
 800056c:	1705883a 	add	r2,r2,fp
 8000570:	10c00017 	ldw	r3,0(r2)
 8000574:	013fffb4 	movhi	r4,65534
 8000578:	210acd04 	addi	r4,r4,11060
 800057c:	2709883a 	add	r4,r4,fp
 8000580:	20800017 	ldw	r2,0(r4)
 8000584:	1885c83a 	sub	r2,r3,r2
 8000588:	1009883a 	mov	r4,r2
 800058c:	8000a700 	call	8000a70 <__floatunsisf>
 8000590:	1021883a 	mov	r16,r2
 8000594:	800ec140 	call	800ec14 <alt_timestamp_freq>
 8000598:	1009883a 	mov	r4,r2
 800059c:	8000a700 	call	8000a70 <__floatunsisf>
 80005a0:	1007883a 	mov	r3,r2
 80005a4:	8009883a 	mov	r4,r16
 80005a8:	180b883a 	mov	r5,r3
 80005ac:	80006200 	call	8000620 <__divsf3>
 80005b0:	1007883a 	mov	r3,r2
 80005b4:	1805883a 	mov	r2,r3
 80005b8:	1009883a 	mov	r4,r2
 80005bc:	8000b800 	call	8000b80 <__extendsfdf2>
 80005c0:	100d883a 	mov	r6,r2
 80005c4:	180f883a 	mov	r7,r3
 80005c8:	01020074 	movhi	r4,2049
 80005cc:	213fbd04 	addi	r4,r4,-268
 80005d0:	300b883a 	mov	r5,r6
 80005d4:	380d883a 	mov	r6,r7
 80005d8:	8000d200 	call	8000d20 <printf>


	return 0;
 80005dc:	0005883a 	mov	r2,zero
}
 80005e0:	e6ffff04 	addi	sp,fp,-4
 80005e4:	dfc00217 	ldw	ra,8(sp)
 80005e8:	df000117 	ldw	fp,4(sp)
 80005ec:	dc000017 	ldw	r16,0(sp)
 80005f0:	dec00304 	addi	sp,sp,12
 80005f4:	f800283a 	ret

080005f8 <__mulsi3>:
 80005f8:	0005883a 	mov	r2,zero
 80005fc:	20000726 	beq	r4,zero,800061c <__mulsi3+0x24>
 8000600:	20c0004c 	andi	r3,r4,1
 8000604:	2008d07a 	srli	r4,r4,1
 8000608:	18000126 	beq	r3,zero,8000610 <__mulsi3+0x18>
 800060c:	1145883a 	add	r2,r2,r5
 8000610:	294b883a 	add	r5,r5,r5
 8000614:	203ffa1e 	bne	r4,zero,8000600 <__mulsi3+0x8>
 8000618:	f800283a 	ret
 800061c:	f800283a 	ret

08000620 <__divsf3>:
 8000620:	defff504 	addi	sp,sp,-44
 8000624:	dd000515 	stw	r20,20(sp)
 8000628:	2028d5fa 	srli	r20,r4,23
 800062c:	dd400615 	stw	r21,24(sp)
 8000630:	202ad7fa 	srli	r21,r4,31
 8000634:	00c02034 	movhi	r3,128
 8000638:	dcc00415 	stw	r19,16(sp)
 800063c:	dc800315 	stw	r18,12(sp)
 8000640:	18ffffc4 	addi	r3,r3,-1
 8000644:	dfc00a15 	stw	ra,40(sp)
 8000648:	df000915 	stw	fp,36(sp)
 800064c:	ddc00815 	stw	r23,32(sp)
 8000650:	dd800715 	stw	r22,28(sp)
 8000654:	dc400215 	stw	r17,8(sp)
 8000658:	dc000115 	stw	r16,4(sp)
 800065c:	a5003fcc 	andi	r20,r20,255
 8000660:	1924703a 	and	r18,r3,r4
 8000664:	acc03fcc 	andi	r19,r21,255
 8000668:	a0004d26 	beq	r20,zero,80007a0 <__divsf3+0x180>
 800066c:	00803fc4 	movi	r2,255
 8000670:	a0802e26 	beq	r20,r2,800072c <__divsf3+0x10c>
 8000674:	91002034 	orhi	r4,r18,128
 8000678:	202490fa 	slli	r18,r4,3
 800067c:	a53fe044 	addi	r20,r20,-127
 8000680:	0021883a 	mov	r16,zero
 8000684:	002f883a 	mov	r23,zero
 8000688:	2804d5fa 	srli	r2,r5,23
 800068c:	282cd7fa 	srli	r22,r5,31
 8000690:	00c02034 	movhi	r3,128
 8000694:	18ffffc4 	addi	r3,r3,-1
 8000698:	10803fcc 	andi	r2,r2,255
 800069c:	1962703a 	and	r17,r3,r5
 80006a0:	b7003fcc 	andi	fp,r22,255
 80006a4:	10004526 	beq	r2,zero,80007bc <__divsf3+0x19c>
 80006a8:	00c03fc4 	movi	r3,255
 80006ac:	10c04026 	beq	r2,r3,80007b0 <__divsf3+0x190>
 80006b0:	88c02034 	orhi	r3,r17,128
 80006b4:	182290fa 	slli	r17,r3,3
 80006b8:	10bfe044 	addi	r2,r2,-127
 80006bc:	0009883a 	mov	r4,zero
 80006c0:	2420b03a 	or	r16,r4,r16
 80006c4:	802090ba 	slli	r16,r16,2
 80006c8:	01c20034 	movhi	r7,2048
 80006cc:	39c1bb04 	addi	r7,r7,1772
 80006d0:	81e1883a 	add	r16,r16,r7
 80006d4:	80c00017 	ldw	r3,0(r16)
 80006d8:	ad8af03a 	xor	r5,r21,r22
 80006dc:	280d883a 	mov	r6,r5
 80006e0:	a085c83a 	sub	r2,r20,r2
 80006e4:	29403fcc 	andi	r5,r5,255
 80006e8:	1800683a 	jmp	r3
 80006ec:	080008f8 	rdprs	zero,at,35
 80006f0:	080008a0 	cmpeqi	zero,at,34
 80006f4:	080008c4 	addi	zero,at,35
 80006f8:	0800088c 	andi	zero,at,34
 80006fc:	080008c4 	addi	zero,at,35
 8000700:	0800073c 	xorhi	zero,at,28
 8000704:	080008c4 	addi	zero,at,35
 8000708:	0800088c 	andi	zero,at,34
 800070c:	080008a0 	cmpeqi	zero,at,34
 8000710:	080008a0 	cmpeqi	zero,at,34
 8000714:	0800073c 	xorhi	zero,at,28
 8000718:	0800088c 	andi	zero,at,34
 800071c:	08000990 	cmplti	zero,at,38
 8000720:	08000990 	cmplti	zero,at,38
 8000724:	08000990 	cmplti	zero,at,38
 8000728:	080008d0 	cmplti	zero,at,35
 800072c:	9000531e 	bne	r18,zero,800087c <__divsf3+0x25c>
 8000730:	04000204 	movi	r16,8
 8000734:	05c00084 	movi	r23,2
 8000738:	003fd306 	br	8000688 <__divsf3+0x68>
 800073c:	00c02034 	movhi	r3,128
 8000740:	000d883a 	mov	r6,zero
 8000744:	18ffffc4 	addi	r3,r3,-1
 8000748:	013fffc4 	movi	r4,-1
 800074c:	21003fcc 	andi	r4,r4,255
 8000750:	200895fa 	slli	r4,r4,23
 8000754:	30803fcc 	andi	r2,r6,255
 8000758:	01802034 	movhi	r6,128
 800075c:	31bfffc4 	addi	r6,r6,-1
 8000760:	100497fa 	slli	r2,r2,31
 8000764:	1986703a 	and	r3,r3,r6
 8000768:	1906b03a 	or	r3,r3,r4
 800076c:	1884b03a 	or	r2,r3,r2
 8000770:	dfc00a17 	ldw	ra,40(sp)
 8000774:	df000917 	ldw	fp,36(sp)
 8000778:	ddc00817 	ldw	r23,32(sp)
 800077c:	dd800717 	ldw	r22,28(sp)
 8000780:	dd400617 	ldw	r21,24(sp)
 8000784:	dd000517 	ldw	r20,20(sp)
 8000788:	dcc00417 	ldw	r19,16(sp)
 800078c:	dc800317 	ldw	r18,12(sp)
 8000790:	dc400217 	ldw	r17,8(sp)
 8000794:	dc000117 	ldw	r16,4(sp)
 8000798:	dec00b04 	addi	sp,sp,44
 800079c:	f800283a 	ret
 80007a0:	90002b1e 	bne	r18,zero,8000850 <__divsf3+0x230>
 80007a4:	04000104 	movi	r16,4
 80007a8:	05c00044 	movi	r23,1
 80007ac:	003fb606 	br	8000688 <__divsf3+0x68>
 80007b0:	8800251e 	bne	r17,zero,8000848 <__divsf3+0x228>
 80007b4:	01000084 	movi	r4,2
 80007b8:	00000206 	br	80007c4 <__divsf3+0x1a4>
 80007bc:	88001a1e 	bne	r17,zero,8000828 <__divsf3+0x208>
 80007c0:	01000044 	movi	r4,1
 80007c4:	2420b03a 	or	r16,r4,r16
 80007c8:	802090ba 	slli	r16,r16,2
 80007cc:	00c20034 	movhi	r3,2048
 80007d0:	18c1fa04 	addi	r3,r3,2024
 80007d4:	80e1883a 	add	r16,r16,r3
 80007d8:	80c00017 	ldw	r3,0(r16)
 80007dc:	ad8af03a 	xor	r5,r21,r22
 80007e0:	a085c83a 	sub	r2,r20,r2
 80007e4:	1800683a 	jmp	r3
 80007e8:	080008a0 	cmpeqi	zero,at,34
 80007ec:	080008a0 	cmpeqi	zero,at,34
 80007f0:	080009f0 	cmpltui	zero,at,39
 80007f4:	08000888 	cmpgei	zero,at,34
 80007f8:	080009f0 	cmpltui	zero,at,39
 80007fc:	0800073c 	xorhi	zero,at,28
 8000800:	080009f0 	cmpltui	zero,at,39
 8000804:	08000888 	cmpgei	zero,at,34
 8000808:	080008a0 	cmpeqi	zero,at,34
 800080c:	080008a0 	cmpeqi	zero,at,34
 8000810:	0800073c 	xorhi	zero,at,28
 8000814:	08000888 	cmpgei	zero,at,34
 8000818:	08000990 	cmplti	zero,at,38
 800081c:	08000990 	cmplti	zero,at,38
 8000820:	08000990 	cmplti	zero,at,38
 8000824:	080009bc 	xorhi	zero,at,38
 8000828:	8809883a 	mov	r4,r17
 800082c:	8000c900 	call	8000c90 <__clzsi2>
 8000830:	10fffec4 	addi	r3,r2,-5
 8000834:	88e2983a 	sll	r17,r17,r3
 8000838:	00ffe284 	movi	r3,-118
 800083c:	1885c83a 	sub	r2,r3,r2
 8000840:	0009883a 	mov	r4,zero
 8000844:	003f9e06 	br	80006c0 <__divsf3+0xa0>
 8000848:	010000c4 	movi	r4,3
 800084c:	003f9c06 	br	80006c0 <__divsf3+0xa0>
 8000850:	9009883a 	mov	r4,r18
 8000854:	d9400015 	stw	r5,0(sp)
 8000858:	8000c900 	call	8000c90 <__clzsi2>
 800085c:	10fffec4 	addi	r3,r2,-5
 8000860:	053fe284 	movi	r20,-118
 8000864:	90e4983a 	sll	r18,r18,r3
 8000868:	a0a9c83a 	sub	r20,r20,r2
 800086c:	0021883a 	mov	r16,zero
 8000870:	002f883a 	mov	r23,zero
 8000874:	d9400017 	ldw	r5,0(sp)
 8000878:	003f8306 	br	8000688 <__divsf3+0x68>
 800087c:	04000304 	movi	r16,12
 8000880:	05c000c4 	movi	r23,3
 8000884:	003f8006 	br	8000688 <__divsf3+0x68>
 8000888:	0023883a 	mov	r17,zero
 800088c:	e027883a 	mov	r19,fp
 8000890:	202f883a 	mov	r23,r4
 8000894:	00c00084 	movi	r3,2
 8000898:	980b883a 	mov	r5,r19
 800089c:	b8c0501e 	bne	r23,r3,80009e0 <__divsf3+0x3c0>
 80008a0:	2980004c 	andi	r6,r5,1
 80008a4:	013fffc4 	movi	r4,-1
 80008a8:	0007883a 	mov	r3,zero
 80008ac:	003fa706 	br	800074c <__divsf3+0x12c>
 80008b0:	013fe084 	movi	r4,-126
 80008b4:	2089c83a 	sub	r4,r4,r2
 80008b8:	00c006c4 	movi	r3,27
 80008bc:	1900500e 	bge	r3,r4,8000a00 <__divsf3+0x3e0>
 80008c0:	9980004c 	andi	r6,r19,1
 80008c4:	0009883a 	mov	r4,zero
 80008c8:	0007883a 	mov	r3,zero
 80008cc:	003f9f06 	br	800074c <__divsf3+0x12c>
 80008d0:	9080102c 	andhi	r2,r18,64
 80008d4:	10000226 	beq	r2,zero,80008e0 <__divsf3+0x2c0>
 80008d8:	8880102c 	andhi	r2,r17,64
 80008dc:	10003a26 	beq	r2,zero,80009c8 <__divsf3+0x3a8>
 80008e0:	00802034 	movhi	r2,128
 80008e4:	90c01034 	orhi	r3,r18,64
 80008e8:	10bfffc4 	addi	r2,r2,-1
 80008ec:	a80d883a 	mov	r6,r21
 80008f0:	1886703a 	and	r3,r3,r2
 80008f4:	003f9406 	br	8000748 <__divsf3+0x128>
 80008f8:	9006917a 	slli	r3,r18,5
 80008fc:	8822917a 	slli	r17,r17,5
 8000900:	1c402936 	bltu	r3,r17,80009a8 <__divsf3+0x388>
 8000904:	1c47c83a 	sub	r3,r3,r17
 8000908:	2827883a 	mov	r19,r5
 800090c:	01800684 	movi	r6,26
 8000910:	01000044 	movi	r4,1
 8000914:	180f883a 	mov	r7,r3
 8000918:	2109883a 	add	r4,r4,r4
 800091c:	18c7883a 	add	r3,r3,r3
 8000920:	38000116 	blt	r7,zero,8000928 <__divsf3+0x308>
 8000924:	1c400236 	bltu	r3,r17,8000930 <__divsf3+0x310>
 8000928:	1c47c83a 	sub	r3,r3,r17
 800092c:	21000054 	ori	r4,r4,1
 8000930:	31bfffc4 	addi	r6,r6,-1
 8000934:	303ff71e 	bne	r6,zero,8000914 <__divsf3+0x2f4>
 8000938:	1806c03a 	cmpne	r3,r3,zero
 800093c:	1922b03a 	or	r17,r3,r4
 8000940:	11001fc4 	addi	r4,r2,127
 8000944:	013fda0e 	bge	zero,r4,80008b0 <__divsf3+0x290>
 8000948:	88c001cc 	andi	r3,r17,7
 800094c:	18000426 	beq	r3,zero,8000960 <__divsf3+0x340>
 8000950:	894003cc 	andi	r5,r17,15
 8000954:	00c00104 	movi	r3,4
 8000958:	28c00126 	beq	r5,r3,8000960 <__divsf3+0x340>
 800095c:	88e3883a 	add	r17,r17,r3
 8000960:	88c2002c 	andhi	r3,r17,2048
 8000964:	18000426 	beq	r3,zero,8000978 <__divsf3+0x358>
 8000968:	11002004 	addi	r4,r2,128
 800096c:	00be0034 	movhi	r2,63488
 8000970:	10bfffc4 	addi	r2,r2,-1
 8000974:	88a2703a 	and	r17,r17,r2
 8000978:	00803f84 	movi	r2,254
 800097c:	1100060e 	bge	r2,r4,8000998 <__divsf3+0x378>
 8000980:	9980004c 	andi	r6,r19,1
 8000984:	013fffc4 	movi	r4,-1
 8000988:	0007883a 	mov	r3,zero
 800098c:	003f6f06 	br	800074c <__divsf3+0x12c>
 8000990:	9023883a 	mov	r17,r18
 8000994:	003fbf06 	br	8000894 <__divsf3+0x274>
 8000998:	880691ba 	slli	r3,r17,6
 800099c:	9980004c 	andi	r6,r19,1
 80009a0:	1806d27a 	srli	r3,r3,9
 80009a4:	003f6906 	br	800074c <__divsf3+0x12c>
 80009a8:	10bfffc4 	addi	r2,r2,-1
 80009ac:	2827883a 	mov	r19,r5
 80009b0:	018006c4 	movi	r6,27
 80009b4:	0009883a 	mov	r4,zero
 80009b8:	003fd606 	br	8000914 <__divsf3+0x2f4>
 80009bc:	9080102c 	andhi	r2,r18,64
 80009c0:	0023883a 	mov	r17,zero
 80009c4:	103fc626 	beq	r2,zero,80008e0 <__divsf3+0x2c0>
 80009c8:	00802034 	movhi	r2,128
 80009cc:	88c01034 	orhi	r3,r17,64
 80009d0:	10bfffc4 	addi	r2,r2,-1
 80009d4:	b00d883a 	mov	r6,r22
 80009d8:	1886703a 	and	r3,r3,r2
 80009dc:	003f5a06 	br	8000748 <__divsf3+0x128>
 80009e0:	00c000c4 	movi	r3,3
 80009e4:	b8c01c26 	beq	r23,r3,8000a58 <__divsf3+0x438>
 80009e8:	00c00044 	movi	r3,1
 80009ec:	b8ffd41e 	bne	r23,r3,8000940 <__divsf3+0x320>
 80009f0:	2980004c 	andi	r6,r5,1
 80009f4:	0009883a 	mov	r4,zero
 80009f8:	0007883a 	mov	r3,zero
 80009fc:	003f5306 	br	800074c <__divsf3+0x12c>
 8000a00:	10802784 	addi	r2,r2,158
 8000a04:	8884983a 	sll	r2,r17,r2
 8000a08:	8908d83a 	srl	r4,r17,r4
 8000a0c:	1022c03a 	cmpne	r17,r2,zero
 8000a10:	8908b03a 	or	r4,r17,r4
 8000a14:	208001cc 	andi	r2,r4,7
 8000a18:	10000426 	beq	r2,zero,8000a2c <__divsf3+0x40c>
 8000a1c:	20c003cc 	andi	r3,r4,15
 8000a20:	00800104 	movi	r2,4
 8000a24:	18800126 	beq	r3,r2,8000a2c <__divsf3+0x40c>
 8000a28:	2089883a 	add	r4,r4,r2
 8000a2c:	2081002c 	andhi	r2,r4,1024
 8000a30:	10000426 	beq	r2,zero,8000a44 <__divsf3+0x424>
 8000a34:	9980004c 	andi	r6,r19,1
 8000a38:	01000044 	movi	r4,1
 8000a3c:	0007883a 	mov	r3,zero
 8000a40:	003f4206 	br	800074c <__divsf3+0x12c>
 8000a44:	200691ba 	slli	r3,r4,6
 8000a48:	9980004c 	andi	r6,r19,1
 8000a4c:	0009883a 	mov	r4,zero
 8000a50:	1806d27a 	srli	r3,r3,9
 8000a54:	003f3d06 	br	800074c <__divsf3+0x12c>
 8000a58:	00802034 	movhi	r2,128
 8000a5c:	88c01034 	orhi	r3,r17,64
 8000a60:	10bfffc4 	addi	r2,r2,-1
 8000a64:	9980004c 	andi	r6,r19,1
 8000a68:	1886703a 	and	r3,r3,r2
 8000a6c:	003f3606 	br	8000748 <__divsf3+0x128>

08000a70 <__floatunsisf>:
 8000a70:	defffe04 	addi	sp,sp,-8
 8000a74:	dc000015 	stw	r16,0(sp)
 8000a78:	dfc00115 	stw	ra,4(sp)
 8000a7c:	2021883a 	mov	r16,r4
 8000a80:	20002626 	beq	r4,zero,8000b1c <__floatunsisf+0xac>
 8000a84:	8000c900 	call	8000c90 <__clzsi2>
 8000a88:	00c02784 	movi	r3,158
 8000a8c:	1887c83a 	sub	r3,r3,r2
 8000a90:	01002584 	movi	r4,150
 8000a94:	20c00816 	blt	r4,r3,8000ab8 <__floatunsisf+0x48>
 8000a98:	01000204 	movi	r4,8
 8000a9c:	2080340e 	bge	r4,r2,8000b70 <__floatunsisf+0x100>
 8000aa0:	10bffe04 	addi	r2,r2,-8
 8000aa4:	8088983a 	sll	r4,r16,r2
 8000aa8:	00802034 	movhi	r2,128
 8000aac:	10bfffc4 	addi	r2,r2,-1
 8000ab0:	2088703a 	and	r4,r4,r2
 8000ab4:	00001b06 	br	8000b24 <__floatunsisf+0xb4>
 8000ab8:	01002644 	movi	r4,153
 8000abc:	20c02316 	blt	r4,r3,8000b4c <__floatunsisf+0xdc>
 8000ac0:	01000144 	movi	r4,5
 8000ac4:	2080020e 	bge	r4,r2,8000ad0 <__floatunsisf+0x60>
 8000ac8:	113ffec4 	addi	r4,r2,-5
 8000acc:	8120983a 	sll	r16,r16,r4
 8000ad0:	017f0034 	movhi	r5,64512
 8000ad4:	297fffc4 	addi	r5,r5,-1
 8000ad8:	810001cc 	andi	r4,r16,7
 8000adc:	814a703a 	and	r5,r16,r5
 8000ae0:	20000426 	beq	r4,zero,8000af4 <__floatunsisf+0x84>
 8000ae4:	840003cc 	andi	r16,r16,15
 8000ae8:	01000104 	movi	r4,4
 8000aec:	81000126 	beq	r16,r4,8000af4 <__floatunsisf+0x84>
 8000af0:	290b883a 	add	r5,r5,r4
 8000af4:	2901002c 	andhi	r4,r5,1024
 8000af8:	20000526 	beq	r4,zero,8000b10 <__floatunsisf+0xa0>
 8000afc:	00c027c4 	movi	r3,159
 8000b00:	1887c83a 	sub	r3,r3,r2
 8000b04:	00bf0034 	movhi	r2,64512
 8000b08:	10bfffc4 	addi	r2,r2,-1
 8000b0c:	288a703a 	and	r5,r5,r2
 8000b10:	280891ba 	slli	r4,r5,6
 8000b14:	2008d27a 	srli	r4,r4,9
 8000b18:	00000206 	br	8000b24 <__floatunsisf+0xb4>
 8000b1c:	0007883a 	mov	r3,zero
 8000b20:	0009883a 	mov	r4,zero
 8000b24:	18c03fcc 	andi	r3,r3,255
 8000b28:	180695fa 	slli	r3,r3,23
 8000b2c:	00802034 	movhi	r2,128
 8000b30:	10bfffc4 	addi	r2,r2,-1
 8000b34:	2084703a 	and	r2,r4,r2
 8000b38:	10c4b03a 	or	r2,r2,r3
 8000b3c:	dfc00117 	ldw	ra,4(sp)
 8000b40:	dc000017 	ldw	r16,0(sp)
 8000b44:	dec00204 	addi	sp,sp,8
 8000b48:	f800283a 	ret
 8000b4c:	01400144 	movi	r5,5
 8000b50:	110006c4 	addi	r4,r2,27
 8000b54:	8108983a 	sll	r4,r16,r4
 8000b58:	288dc83a 	sub	r6,r5,r2
 8000b5c:	81a0d83a 	srl	r16,r16,r6
 8000b60:	2008c03a 	cmpne	r4,r4,zero
 8000b64:	2420b03a 	or	r16,r4,r16
 8000b68:	28bfd90e 	bge	r5,r2,8000ad0 <__floatunsisf+0x60>
 8000b6c:	003fd606 	br	8000ac8 <__floatunsisf+0x58>
 8000b70:	01402034 	movhi	r5,128
 8000b74:	297fffc4 	addi	r5,r5,-1
 8000b78:	8148703a 	and	r4,r16,r5
 8000b7c:	003fe906 	br	8000b24 <__floatunsisf+0xb4>

08000b80 <__extendsfdf2>:
 8000b80:	200ad5fa 	srli	r5,r4,23
 8000b84:	defffd04 	addi	sp,sp,-12
 8000b88:	dc400115 	stw	r17,4(sp)
 8000b8c:	29403fcc 	andi	r5,r5,255
 8000b90:	29800044 	addi	r6,r5,1
 8000b94:	04402034 	movhi	r17,128
 8000b98:	dc000015 	stw	r16,0(sp)
 8000b9c:	8c7fffc4 	addi	r17,r17,-1
 8000ba0:	dfc00215 	stw	ra,8(sp)
 8000ba4:	31803fcc 	andi	r6,r6,255
 8000ba8:	00800044 	movi	r2,1
 8000bac:	8922703a 	and	r17,r17,r4
 8000bb0:	2020d7fa 	srli	r16,r4,31
 8000bb4:	1180110e 	bge	r2,r6,8000bfc <__extendsfdf2+0x7c>
 8000bb8:	880ed0fa 	srli	r7,r17,3
 8000bbc:	8822977a 	slli	r17,r17,29
 8000bc0:	2940e004 	addi	r5,r5,896
 8000bc4:	2941ffcc 	andi	r5,r5,2047
 8000bc8:	280c953a 	slli	r6,r5,20
 8000bcc:	01400434 	movhi	r5,16
 8000bd0:	800697fa 	slli	r3,r16,31
 8000bd4:	297fffc4 	addi	r5,r5,-1
 8000bd8:	394a703a 	and	r5,r7,r5
 8000bdc:	298ab03a 	or	r5,r5,r6
 8000be0:	8805883a 	mov	r2,r17
 8000be4:	28c6b03a 	or	r3,r5,r3
 8000be8:	dfc00217 	ldw	ra,8(sp)
 8000bec:	dc400117 	ldw	r17,4(sp)
 8000bf0:	dc000017 	ldw	r16,0(sp)
 8000bf4:	dec00304 	addi	sp,sp,12
 8000bf8:	f800283a 	ret
 8000bfc:	2800111e 	bne	r5,zero,8000c44 <__extendsfdf2+0xc4>
 8000c00:	88001c26 	beq	r17,zero,8000c74 <__extendsfdf2+0xf4>
 8000c04:	8809883a 	mov	r4,r17
 8000c08:	8000c900 	call	8000c90 <__clzsi2>
 8000c0c:	00c00284 	movi	r3,10
 8000c10:	18801b16 	blt	r3,r2,8000c80 <__extendsfdf2+0x100>
 8000c14:	01c002c4 	movi	r7,11
 8000c18:	388fc83a 	sub	r7,r7,r2
 8000c1c:	10c00544 	addi	r3,r2,21
 8000c20:	89ced83a 	srl	r7,r17,r7
 8000c24:	88e2983a 	sll	r17,r17,r3
 8000c28:	0180e244 	movi	r6,905
 8000c2c:	308bc83a 	sub	r5,r6,r2
 8000c30:	01800434 	movhi	r6,16
 8000c34:	31bfffc4 	addi	r6,r6,-1
 8000c38:	398e703a 	and	r7,r7,r6
 8000c3c:	2941ffcc 	andi	r5,r5,2047
 8000c40:	003fe006 	br	8000bc4 <__extendsfdf2+0x44>
 8000c44:	88000826 	beq	r17,zero,8000c68 <__extendsfdf2+0xe8>
 8000c48:	880ed0fa 	srli	r7,r17,3
 8000c4c:	00800434 	movhi	r2,16
 8000c50:	10bfffc4 	addi	r2,r2,-1
 8000c54:	39c00234 	orhi	r7,r7,8
 8000c58:	8822977a 	slli	r17,r17,29
 8000c5c:	388e703a 	and	r7,r7,r2
 8000c60:	0141ffc4 	movi	r5,2047
 8000c64:	003fd706 	br	8000bc4 <__extendsfdf2+0x44>
 8000c68:	0141ffc4 	movi	r5,2047
 8000c6c:	000f883a 	mov	r7,zero
 8000c70:	003fd406 	br	8000bc4 <__extendsfdf2+0x44>
 8000c74:	000b883a 	mov	r5,zero
 8000c78:	000f883a 	mov	r7,zero
 8000c7c:	003fd106 	br	8000bc4 <__extendsfdf2+0x44>
 8000c80:	11fffd44 	addi	r7,r2,-11
 8000c84:	89ce983a 	sll	r7,r17,r7
 8000c88:	0023883a 	mov	r17,zero
 8000c8c:	003fe606 	br	8000c28 <__extendsfdf2+0xa8>

08000c90 <__clzsi2>:
 8000c90:	00bfffd4 	movui	r2,65535
 8000c94:	11000b36 	bltu	r2,r4,8000cc4 <__clzsi2+0x34>
 8000c98:	00803fc4 	movi	r2,255
 8000c9c:	1100122e 	bgeu	r2,r4,8000ce8 <__clzsi2+0x58>
 8000ca0:	00c00204 	movi	r3,8
 8000ca4:	01400604 	movi	r5,24
 8000ca8:	20c8d83a 	srl	r4,r4,r3
 8000cac:	00820074 	movhi	r2,2049
 8000cb0:	10bfc604 	addi	r2,r2,-232
 8000cb4:	1109883a 	add	r4,r2,r4
 8000cb8:	20800003 	ldbu	r2,0(r4)
 8000cbc:	2885c83a 	sub	r2,r5,r2
 8000cc0:	f800283a 	ret
 8000cc4:	00804034 	movhi	r2,256
 8000cc8:	10bfffc4 	addi	r2,r2,-1
 8000ccc:	11000336 	bltu	r2,r4,8000cdc <__clzsi2+0x4c>
 8000cd0:	00c00404 	movi	r3,16
 8000cd4:	180b883a 	mov	r5,r3
 8000cd8:	003ff306 	br	8000ca8 <__clzsi2+0x18>
 8000cdc:	00c00604 	movi	r3,24
 8000ce0:	01400204 	movi	r5,8
 8000ce4:	003ff006 	br	8000ca8 <__clzsi2+0x18>
 8000ce8:	0007883a 	mov	r3,zero
 8000cec:	01400804 	movi	r5,32
 8000cf0:	003fed06 	br	8000ca8 <__clzsi2+0x18>

08000cf4 <_printf_r>:
 8000cf4:	defffd04 	addi	sp,sp,-12
 8000cf8:	dfc00015 	stw	ra,0(sp)
 8000cfc:	d9800115 	stw	r6,4(sp)
 8000d00:	d9c00215 	stw	r7,8(sp)
 8000d04:	280d883a 	mov	r6,r5
 8000d08:	21400217 	ldw	r5,8(r4)
 8000d0c:	d9c00104 	addi	r7,sp,4
 8000d10:	8000d5c0 	call	8000d5c <___vfprintf_internal_r>
 8000d14:	dfc00017 	ldw	ra,0(sp)
 8000d18:	dec00304 	addi	sp,sp,12
 8000d1c:	f800283a 	ret

08000d20 <printf>:
 8000d20:	defffc04 	addi	sp,sp,-16
 8000d24:	dfc00015 	stw	ra,0(sp)
 8000d28:	d9400115 	stw	r5,4(sp)
 8000d2c:	d9800215 	stw	r6,8(sp)
 8000d30:	d9c00315 	stw	r7,12(sp)
 8000d34:	00820074 	movhi	r2,2049
 8000d38:	10873104 	addi	r2,r2,7364
 8000d3c:	10800017 	ldw	r2,0(r2)
 8000d40:	200b883a 	mov	r5,r4
 8000d44:	d9800104 	addi	r6,sp,4
 8000d48:	11000217 	ldw	r4,8(r2)
 8000d4c:	8002db40 	call	8002db4 <__vfprintf_internal>
 8000d50:	dfc00017 	ldw	ra,0(sp)
 8000d54:	dec00404 	addi	sp,sp,16
 8000d58:	f800283a 	ret

08000d5c <___vfprintf_internal_r>:
 8000d5c:	deffb604 	addi	sp,sp,-296
 8000d60:	dfc04915 	stw	ra,292(sp)
 8000d64:	ddc04715 	stw	r23,284(sp)
 8000d68:	dd804615 	stw	r22,280(sp)
 8000d6c:	202f883a 	mov	r23,r4
 8000d70:	282d883a 	mov	r22,r5
 8000d74:	d9802a15 	stw	r6,168(sp)
 8000d78:	d9c02d15 	stw	r7,180(sp)
 8000d7c:	df004815 	stw	fp,288(sp)
 8000d80:	dd404515 	stw	r21,276(sp)
 8000d84:	dd004415 	stw	r20,272(sp)
 8000d88:	dcc04315 	stw	r19,268(sp)
 8000d8c:	dc804215 	stw	r18,264(sp)
 8000d90:	dc404115 	stw	r17,260(sp)
 8000d94:	dc004015 	stw	r16,256(sp)
 8000d98:	80055c40 	call	80055c4 <_localeconv_r>
 8000d9c:	10800017 	ldw	r2,0(r2)
 8000da0:	1009883a 	mov	r4,r2
 8000da4:	d8803515 	stw	r2,212(sp)
 8000da8:	80075a00 	call	80075a0 <strlen>
 8000dac:	d8803815 	stw	r2,224(sp)
 8000db0:	b8000226 	beq	r23,zero,8000dbc <___vfprintf_internal_r+0x60>
 8000db4:	b8800e17 	ldw	r2,56(r23)
 8000db8:	1000e226 	beq	r2,zero,8001144 <___vfprintf_internal_r+0x3e8>
 8000dbc:	b080030b 	ldhu	r2,12(r22)
 8000dc0:	10c8000c 	andi	r3,r2,8192
 8000dc4:	1800061e 	bne	r3,zero,8000de0 <___vfprintf_internal_r+0x84>
 8000dc8:	b1001917 	ldw	r4,100(r22)
 8000dcc:	00f7ffc4 	movi	r3,-8193
 8000dd0:	10880014 	ori	r2,r2,8192
 8000dd4:	20c6703a 	and	r3,r4,r3
 8000dd8:	b080030d 	sth	r2,12(r22)
 8000ddc:	b0c01915 	stw	r3,100(r22)
 8000de0:	10c0020c 	andi	r3,r2,8
 8000de4:	1800a826 	beq	r3,zero,8001088 <___vfprintf_internal_r+0x32c>
 8000de8:	b0c00417 	ldw	r3,16(r22)
 8000dec:	1800a626 	beq	r3,zero,8001088 <___vfprintf_internal_r+0x32c>
 8000df0:	1080068c 	andi	r2,r2,26
 8000df4:	00c00284 	movi	r3,10
 8000df8:	10c0ab26 	beq	r2,r3,80010a8 <___vfprintf_internal_r+0x34c>
 8000dfc:	d8801e04 	addi	r2,sp,120
 8000e00:	d8c01dc4 	addi	r3,sp,119
 8000e04:	d9000404 	addi	r4,sp,16
 8000e08:	05020074 	movhi	r20,2049
 8000e0c:	10cbc83a 	sub	r5,r2,r3
 8000e10:	a5001684 	addi	r20,r20,90
 8000e14:	d8802815 	stw	r2,160(sp)
 8000e18:	d8c02915 	stw	r3,164(sp)
 8000e1c:	d9001e15 	stw	r4,120(sp)
 8000e20:	d8002015 	stw	zero,128(sp)
 8000e24:	d8001f15 	stw	zero,124(sp)
 8000e28:	d8003315 	stw	zero,204(sp)
 8000e2c:	d8003715 	stw	zero,220(sp)
 8000e30:	d8003915 	stw	zero,228(sp)
 8000e34:	2011883a 	mov	r8,r4
 8000e38:	d8003b15 	stw	zero,236(sp)
 8000e3c:	d8003a15 	stw	zero,232(sp)
 8000e40:	d8002f15 	stw	zero,188(sp)
 8000e44:	d9403c15 	stw	r5,240(sp)
 8000e48:	d8c02a17 	ldw	r3,168(sp)
 8000e4c:	18800007 	ldb	r2,0(r3)
 8000e50:	1001f226 	beq	r2,zero,800161c <___vfprintf_internal_r+0x8c0>
 8000e54:	00c00944 	movi	r3,37
 8000e58:	dc002a17 	ldw	r16,168(sp)
 8000e5c:	10c0021e 	bne	r2,r3,8000e68 <___vfprintf_internal_r+0x10c>
 8000e60:	00001606 	br	8000ebc <___vfprintf_internal_r+0x160>
 8000e64:	10c08526 	beq	r2,r3,800107c <___vfprintf_internal_r+0x320>
 8000e68:	84000044 	addi	r16,r16,1
 8000e6c:	80800007 	ldb	r2,0(r16)
 8000e70:	103ffc1e 	bne	r2,zero,8000e64 <___vfprintf_internal_r+0x108>
 8000e74:	d9002a17 	ldw	r4,168(sp)
 8000e78:	8123c83a 	sub	r17,r16,r4
 8000e7c:	88000f26 	beq	r17,zero,8000ebc <___vfprintf_internal_r+0x160>
 8000e80:	d8802a17 	ldw	r2,168(sp)
 8000e84:	d8c02017 	ldw	r3,128(sp)
 8000e88:	44400115 	stw	r17,4(r8)
 8000e8c:	40800015 	stw	r2,0(r8)
 8000e90:	d8801f17 	ldw	r2,124(sp)
 8000e94:	1c47883a 	add	r3,r3,r17
 8000e98:	d8c02015 	stw	r3,128(sp)
 8000e9c:	10800044 	addi	r2,r2,1
 8000ea0:	d8801f15 	stw	r2,124(sp)
 8000ea4:	00c001c4 	movi	r3,7
 8000ea8:	18809416 	blt	r3,r2,80010fc <___vfprintf_internal_r+0x3a0>
 8000eac:	42000204 	addi	r8,r8,8
 8000eb0:	d8c02f17 	ldw	r3,188(sp)
 8000eb4:	1c47883a 	add	r3,r3,r17
 8000eb8:	d8c02f15 	stw	r3,188(sp)
 8000ebc:	80800007 	ldb	r2,0(r16)
 8000ec0:	10009526 	beq	r2,zero,8001118 <___vfprintf_internal_r+0x3bc>
 8000ec4:	80800044 	addi	r2,r16,1
 8000ec8:	84000047 	ldb	r16,1(r16)
 8000ecc:	0027883a 	mov	r19,zero
 8000ed0:	0039883a 	mov	fp,zero
 8000ed4:	dcc02b05 	stb	r19,172(sp)
 8000ed8:	d8002785 	stb	zero,158(sp)
 8000edc:	027fffc4 	movi	r9,-1
 8000ee0:	d8002e15 	stw	zero,184(sp)
 8000ee4:	04401604 	movi	r17,88
 8000ee8:	04800244 	movi	r18,9
 8000eec:	da002a15 	stw	r8,168(sp)
 8000ef0:	e027883a 	mov	r19,fp
 8000ef4:	17000044 	addi	fp,r2,1
 8000ef8:	80bff804 	addi	r2,r16,-32
 8000efc:	8882ed36 	bltu	r17,r2,8001ab4 <___vfprintf_internal_r+0xd58>
 8000f00:	100490ba 	slli	r2,r2,2
 8000f04:	01020034 	movhi	r4,2048
 8000f08:	2103c604 	addi	r4,r4,3864
 8000f0c:	1105883a 	add	r2,r2,r4
 8000f10:	10800017 	ldw	r2,0(r2)
 8000f14:	1000683a 	jmp	r2
 8000f18:	080018fc 	xorhi	zero,at,99
 8000f1c:	08001ab4 	orhi	zero,at,106
 8000f20:	08001ab4 	orhi	zero,at,106
 8000f24:	08001918 	cmpnei	zero,at,100
 8000f28:	08001ab4 	orhi	zero,at,106
 8000f2c:	08001ab4 	orhi	zero,at,106
 8000f30:	08001ab4 	orhi	zero,at,106
 8000f34:	08001ab4 	orhi	zero,at,106
 8000f38:	08001ab4 	orhi	zero,at,106
 8000f3c:	08001ab4 	orhi	zero,at,106
 8000f40:	08001928 	cmpgeui	zero,at,100
 8000f44:	08001950 	cmplti	zero,at,101
 8000f48:	08001ab4 	orhi	zero,at,106
 8000f4c:	08001150 	cmplti	zero,at,69
 8000f50:	08001160 	cmpeqi	zero,at,69
 8000f54:	08001ab4 	orhi	zero,at,106
 8000f58:	080011b0 	cmpltui	zero,at,70
 8000f5c:	080011c0 	call	80011c <__alt_mem_onchip_memory2_0+0x80011c>
 8000f60:	080011c0 	call	80011c <__alt_mem_onchip_memory2_0+0x80011c>
 8000f64:	080011c0 	call	80011c <__alt_mem_onchip_memory2_0+0x80011c>
 8000f68:	080011c0 	call	80011c <__alt_mem_onchip_memory2_0+0x80011c>
 8000f6c:	080011c0 	call	80011c <__alt_mem_onchip_memory2_0+0x80011c>
 8000f70:	080011c0 	call	80011c <__alt_mem_onchip_memory2_0+0x80011c>
 8000f74:	080011c0 	call	80011c <__alt_mem_onchip_memory2_0+0x80011c>
 8000f78:	080011c0 	call	80011c <__alt_mem_onchip_memory2_0+0x80011c>
 8000f7c:	080011c0 	call	80011c <__alt_mem_onchip_memory2_0+0x80011c>
 8000f80:	08001ab4 	orhi	zero,at,106
 8000f84:	08001ab4 	orhi	zero,at,106
 8000f88:	08001ab4 	orhi	zero,at,106
 8000f8c:	08001ab4 	orhi	zero,at,106
 8000f90:	08001ab4 	orhi	zero,at,106
 8000f94:	08001ab4 	orhi	zero,at,106
 8000f98:	08001ab4 	orhi	zero,at,106
 8000f9c:	08001ab4 	orhi	zero,at,106
 8000fa0:	08001ab4 	orhi	zero,at,106
 8000fa4:	08001ab4 	orhi	zero,at,106
 8000fa8:	08001204 	addi	zero,at,72
 8000fac:	08001624 	muli	zero,at,88
 8000fb0:	08001ab4 	orhi	zero,at,106
 8000fb4:	08001624 	muli	zero,at,88
 8000fb8:	08001ab4 	orhi	zero,at,106
 8000fbc:	08001ab4 	orhi	zero,at,106
 8000fc0:	08001ab4 	orhi	zero,at,106
 8000fc4:	08001ab4 	orhi	zero,at,106
 8000fc8:	080016cc 	andi	zero,at,91
 8000fcc:	08001ab4 	orhi	zero,at,106
 8000fd0:	08001ab4 	orhi	zero,at,106
 8000fd4:	080016dc 	xori	zero,at,91
 8000fd8:	08001ab4 	orhi	zero,at,106
 8000fdc:	08001ab4 	orhi	zero,at,106
 8000fe0:	08001ab4 	orhi	zero,at,106
 8000fe4:	08001ab4 	orhi	zero,at,106
 8000fe8:	08001ab4 	orhi	zero,at,106
 8000fec:	0800171c 	xori	zero,at,92
 8000ff0:	08001ab4 	orhi	zero,at,106
 8000ff4:	08001ab4 	orhi	zero,at,106
 8000ff8:	08001848 	cmpgei	zero,at,97
 8000ffc:	08001ab4 	orhi	zero,at,106
 8001000:	08001ab4 	orhi	zero,at,106
 8001004:	08001ab4 	orhi	zero,at,106
 8001008:	08001ab4 	orhi	zero,at,106
 800100c:	08001ab4 	orhi	zero,at,106
 8001010:	08001ab4 	orhi	zero,at,106
 8001014:	08001ab4 	orhi	zero,at,106
 8001018:	08001ab4 	orhi	zero,at,106
 800101c:	08001ab4 	orhi	zero,at,106
 8001020:	08001ab4 	orhi	zero,at,106
 8001024:	080018b0 	cmpltui	zero,at,98
 8001028:	0800179c 	xori	zero,at,94
 800102c:	08001624 	muli	zero,at,88
 8001030:	08001624 	muli	zero,at,88
 8001034:	08001624 	muli	zero,at,88
 8001038:	080017e0 	cmpeqi	zero,at,95
 800103c:	0800179c 	xori	zero,at,94
 8001040:	08001ab4 	orhi	zero,at,106
 8001044:	08001ab4 	orhi	zero,at,106
 8001048:	080017f0 	cmpltui	zero,at,95
 800104c:	08001ab4 	orhi	zero,at,106
 8001050:	08001808 	cmpgei	zero,at,96
 8001054:	08001a78 	rdprs	zero,at,105
 8001058:	08001750 	cmplti	zero,at,93
 800105c:	08001a2c 	andhi	zero,at,104
 8001060:	08001ab4 	orhi	zero,at,106
 8001064:	08001964 	muli	zero,at,101
 8001068:	08001ab4 	orhi	zero,at,106
 800106c:	08001a3c 	xorhi	zero,at,104
 8001070:	08001ab4 	orhi	zero,at,106
 8001074:	08001ab4 	orhi	zero,at,106
 8001078:	080019e0 	cmpeqi	zero,at,103
 800107c:	d9402a17 	ldw	r5,168(sp)
 8001080:	8163c83a 	sub	r17,r16,r5
 8001084:	003f7d06 	br	8000e7c <___vfprintf_internal_r+0x120>
 8001088:	b809883a 	mov	r4,r23
 800108c:	b00b883a 	mov	r5,r22
 8001090:	8002e940 	call	8002e94 <__swsetup_r>
 8001094:	10000c1e 	bne	r2,zero,80010c8 <___vfprintf_internal_r+0x36c>
 8001098:	b080030b 	ldhu	r2,12(r22)
 800109c:	00c00284 	movi	r3,10
 80010a0:	1080068c 	andi	r2,r2,26
 80010a4:	10ff551e 	bne	r2,r3,8000dfc <___vfprintf_internal_r+0xa0>
 80010a8:	b080038f 	ldh	r2,14(r22)
 80010ac:	103f5316 	blt	r2,zero,8000dfc <___vfprintf_internal_r+0xa0>
 80010b0:	d9802a17 	ldw	r6,168(sp)
 80010b4:	d9c02d17 	ldw	r7,180(sp)
 80010b8:	b809883a 	mov	r4,r23
 80010bc:	b00b883a 	mov	r5,r22
 80010c0:	8002dd80 	call	8002dd8 <__sbprintf>
 80010c4:	00000106 	br	80010cc <___vfprintf_internal_r+0x370>
 80010c8:	00bfffc4 	movi	r2,-1
 80010cc:	dfc04917 	ldw	ra,292(sp)
 80010d0:	df004817 	ldw	fp,288(sp)
 80010d4:	ddc04717 	ldw	r23,284(sp)
 80010d8:	dd804617 	ldw	r22,280(sp)
 80010dc:	dd404517 	ldw	r21,276(sp)
 80010e0:	dd004417 	ldw	r20,272(sp)
 80010e4:	dcc04317 	ldw	r19,268(sp)
 80010e8:	dc804217 	ldw	r18,264(sp)
 80010ec:	dc404117 	ldw	r17,260(sp)
 80010f0:	dc004017 	ldw	r16,256(sp)
 80010f4:	dec04a04 	addi	sp,sp,296
 80010f8:	f800283a 	ret
 80010fc:	b809883a 	mov	r4,r23
 8001100:	b00b883a 	mov	r5,r22
 8001104:	d9801e04 	addi	r6,sp,120
 8001108:	80077340 	call	8007734 <__sprint_r>
 800110c:	1000081e 	bne	r2,zero,8001130 <___vfprintf_internal_r+0x3d4>
 8001110:	da000404 	addi	r8,sp,16
 8001114:	003f6606 	br	8000eb0 <___vfprintf_internal_r+0x154>
 8001118:	d8802017 	ldw	r2,128(sp)
 800111c:	10000426 	beq	r2,zero,8001130 <___vfprintf_internal_r+0x3d4>
 8001120:	b809883a 	mov	r4,r23
 8001124:	b00b883a 	mov	r5,r22
 8001128:	d9801e04 	addi	r6,sp,120
 800112c:	80077340 	call	8007734 <__sprint_r>
 8001130:	b080030b 	ldhu	r2,12(r22)
 8001134:	1080100c 	andi	r2,r2,64
 8001138:	103fe31e 	bne	r2,zero,80010c8 <___vfprintf_internal_r+0x36c>
 800113c:	d8802f17 	ldw	r2,188(sp)
 8001140:	003fe206 	br	80010cc <___vfprintf_internal_r+0x370>
 8001144:	b809883a 	mov	r4,r23
 8001148:	8004f2c0 	call	8004f2c <__sinit>
 800114c:	003f1b06 	br	8000dbc <___vfprintf_internal_r+0x60>
 8001150:	e005883a 	mov	r2,fp
 8001154:	9cc00114 	ori	r19,r19,4
 8001158:	e4000007 	ldb	r16,0(fp)
 800115c:	003f6506 	br	8000ef4 <___vfprintf_internal_r+0x198>
 8001160:	e4000007 	ldb	r16,0(fp)
 8001164:	01000a84 	movi	r4,42
 8001168:	e0800044 	addi	r2,fp,1
 800116c:	8106ff26 	beq	r16,r4,8002d6c <___vfprintf_internal_r+0x2010>
 8001170:	857ff404 	addi	r21,r16,-48
 8001174:	1039883a 	mov	fp,r2
 8001178:	0013883a 	mov	r9,zero
 800117c:	957f5e36 	bltu	r18,r21,8000ef8 <___vfprintf_internal_r+0x19c>
 8001180:	0009883a 	mov	r4,zero
 8001184:	01400284 	movi	r5,10
 8001188:	80005f80 	call	80005f8 <__mulsi3>
 800118c:	e4000007 	ldb	r16,0(fp)
 8001190:	a889883a 	add	r4,r21,r2
 8001194:	e7000044 	addi	fp,fp,1
 8001198:	857ff404 	addi	r21,r16,-48
 800119c:	957ff92e 	bgeu	r18,r21,8001184 <___vfprintf_internal_r+0x428>
 80011a0:	2013883a 	mov	r9,r4
 80011a4:	203f540e 	bge	r4,zero,8000ef8 <___vfprintf_internal_r+0x19c>
 80011a8:	027fffc4 	movi	r9,-1
 80011ac:	003f5206 	br	8000ef8 <___vfprintf_internal_r+0x19c>
 80011b0:	9cc02014 	ori	r19,r19,128
 80011b4:	e005883a 	mov	r2,fp
 80011b8:	e4000007 	ldb	r16,0(fp)
 80011bc:	003f4d06 	br	8000ef4 <___vfprintf_internal_r+0x198>
 80011c0:	857ff404 	addi	r21,r16,-48
 80011c4:	d8002e15 	stw	zero,184(sp)
 80011c8:	0009883a 	mov	r4,zero
 80011cc:	da402c15 	stw	r9,176(sp)
 80011d0:	e021883a 	mov	r16,fp
 80011d4:	01400284 	movi	r5,10
 80011d8:	80005f80 	call	80005f8 <__mulsi3>
 80011dc:	81400007 	ldb	r5,0(r16)
 80011e0:	1549883a 	add	r4,r2,r21
 80011e4:	e7000044 	addi	fp,fp,1
 80011e8:	2d7ff404 	addi	r21,r5,-48
 80011ec:	e021883a 	mov	r16,fp
 80011f0:	957ff82e 	bgeu	r18,r21,80011d4 <___vfprintf_internal_r+0x478>
 80011f4:	2821883a 	mov	r16,r5
 80011f8:	d9002e15 	stw	r4,184(sp)
 80011fc:	da402c17 	ldw	r9,176(sp)
 8001200:	003f3d06 	br	8000ef8 <___vfprintf_internal_r+0x19c>
 8001204:	da002a17 	ldw	r8,168(sp)
 8001208:	df002a15 	stw	fp,168(sp)
 800120c:	9839883a 	mov	fp,r19
 8001210:	dcc02b03 	ldbu	r19,172(sp)
 8001214:	e7000414 	ori	fp,fp,16
 8001218:	e080080c 	andi	r2,fp,32
 800121c:	dcc02785 	stb	r19,158(sp)
 8001220:	d8c02d17 	ldw	r3,180(sp)
 8001224:	10016526 	beq	r2,zero,80017bc <___vfprintf_internal_r+0xa60>
 8001228:	d9002d17 	ldw	r4,180(sp)
 800122c:	18800117 	ldw	r2,4(r3)
 8001230:	1c800017 	ldw	r18,0(r3)
 8001234:	21000204 	addi	r4,r4,8
 8001238:	d9002d15 	stw	r4,180(sp)
 800123c:	102b883a 	mov	r21,r2
 8001240:	10044516 	blt	r2,zero,8002358 <___vfprintf_internal_r+0x15fc>
 8001244:	dcc02783 	ldbu	r19,158(sp)
 8001248:	da403215 	stw	r9,200(sp)
 800124c:	00800044 	movi	r2,1
 8001250:	9546b03a 	or	r3,r18,r21
 8001254:	48000216 	blt	r9,zero,8001260 <___vfprintf_internal_r+0x504>
 8001258:	013fdfc4 	movi	r4,-129
 800125c:	e138703a 	and	fp,fp,r4
 8001260:	1802211e 	bne	r3,zero,8001ae8 <___vfprintf_internal_r+0xd8c>
 8001264:	48031326 	beq	r9,zero,8001eb4 <___vfprintf_internal_r+0x1158>
 8001268:	10803fcc 	andi	r2,r2,255
 800126c:	00c00044 	movi	r3,1
 8001270:	10c24126 	beq	r2,r3,8001b78 <___vfprintf_internal_r+0xe1c>
 8001274:	00c00084 	movi	r3,2
 8001278:	10c33426 	beq	r2,r3,8001f4c <___vfprintf_internal_r+0x11f0>
 800127c:	d8c01e04 	addi	r3,sp,120
 8001280:	9008d0fa 	srli	r4,r18,3
 8001284:	a80a977a 	slli	r5,r21,29
 8001288:	a82ad0fa 	srli	r21,r21,3
 800128c:	948001cc 	andi	r18,r18,7
 8001290:	90800c04 	addi	r2,r18,48
 8001294:	18ffffc4 	addi	r3,r3,-1
 8001298:	2924b03a 	or	r18,r5,r4
 800129c:	18800005 	stb	r2,0(r3)
 80012a0:	9548b03a 	or	r4,r18,r21
 80012a4:	203ff61e 	bne	r4,zero,8001280 <___vfprintf_internal_r+0x524>
 80012a8:	e100004c 	andi	r4,fp,1
 80012ac:	d8c03115 	stw	r3,196(sp)
 80012b0:	2003961e 	bne	r4,zero,800210c <___vfprintf_internal_r+0x13b0>
 80012b4:	d8802817 	ldw	r2,160(sp)
 80012b8:	10e3c83a 	sub	r17,r2,r3
 80012bc:	8805883a 	mov	r2,r17
 80012c0:	8a40010e 	bge	r17,r9,80012c8 <___vfprintf_internal_r+0x56c>
 80012c4:	4805883a 	mov	r2,r9
 80012c8:	d8802b15 	stw	r2,172(sp)
 80012cc:	d8003415 	stw	zero,208(sp)
 80012d0:	98803fcc 	andi	r2,r19,255
 80012d4:	1080201c 	xori	r2,r2,128
 80012d8:	10bfe004 	addi	r2,r2,-128
 80012dc:	10000326 	beq	r2,zero,80012ec <___vfprintf_internal_r+0x590>
 80012e0:	d8c02b17 	ldw	r3,172(sp)
 80012e4:	18c00044 	addi	r3,r3,1
 80012e8:	d8c02b15 	stw	r3,172(sp)
 80012ec:	e0c0008c 	andi	r3,fp,2
 80012f0:	d8c02c15 	stw	r3,176(sp)
 80012f4:	18000326 	beq	r3,zero,8001304 <___vfprintf_internal_r+0x5a8>
 80012f8:	d8c02b17 	ldw	r3,172(sp)
 80012fc:	18c00084 	addi	r3,r3,2
 8001300:	d8c02b15 	stw	r3,172(sp)
 8001304:	e0c0210c 	andi	r3,fp,132
 8001308:	d8c03015 	stw	r3,192(sp)
 800130c:	1801f41e 	bne	r3,zero,8001ae0 <___vfprintf_internal_r+0xd84>
 8001310:	d9002e17 	ldw	r4,184(sp)
 8001314:	d8c02b17 	ldw	r3,172(sp)
 8001318:	20ebc83a 	sub	r21,r4,r3
 800131c:	0541f00e 	bge	zero,r21,8001ae0 <___vfprintf_internal_r+0xd84>
 8001320:	02400404 	movi	r9,16
 8001324:	d8c02017 	ldw	r3,128(sp)
 8001328:	d8801f17 	ldw	r2,124(sp)
 800132c:	4d45710e 	bge	r9,r21,80028f4 <___vfprintf_internal_r+0x1b98>
 8001330:	01420074 	movhi	r5,2049
 8001334:	29401a84 	addi	r5,r5,106
 8001338:	d9403615 	stw	r5,216(sp)
 800133c:	4827883a 	mov	r19,r9
 8001340:	048001c4 	movi	r18,7
 8001344:	00000306 	br	8001354 <___vfprintf_internal_r+0x5f8>
 8001348:	ad7ffc04 	addi	r21,r21,-16
 800134c:	42000204 	addi	r8,r8,8
 8001350:	9d40130e 	bge	r19,r21,80013a0 <___vfprintf_internal_r+0x644>
 8001354:	01020074 	movhi	r4,2049
 8001358:	18c00404 	addi	r3,r3,16
 800135c:	10800044 	addi	r2,r2,1
 8001360:	21001a84 	addi	r4,r4,106
 8001364:	41000015 	stw	r4,0(r8)
 8001368:	44c00115 	stw	r19,4(r8)
 800136c:	d8c02015 	stw	r3,128(sp)
 8001370:	d8801f15 	stw	r2,124(sp)
 8001374:	90bff40e 	bge	r18,r2,8001348 <___vfprintf_internal_r+0x5ec>
 8001378:	b809883a 	mov	r4,r23
 800137c:	b00b883a 	mov	r5,r22
 8001380:	d9801e04 	addi	r6,sp,120
 8001384:	80077340 	call	8007734 <__sprint_r>
 8001388:	103f691e 	bne	r2,zero,8001130 <___vfprintf_internal_r+0x3d4>
 800138c:	ad7ffc04 	addi	r21,r21,-16
 8001390:	d8c02017 	ldw	r3,128(sp)
 8001394:	d8801f17 	ldw	r2,124(sp)
 8001398:	da000404 	addi	r8,sp,16
 800139c:	9d7fed16 	blt	r19,r21,8001354 <___vfprintf_internal_r+0x5f8>
 80013a0:	d9403617 	ldw	r5,216(sp)
 80013a4:	a8c7883a 	add	r3,r21,r3
 80013a8:	10800044 	addi	r2,r2,1
 80013ac:	41400015 	stw	r5,0(r8)
 80013b0:	45400115 	stw	r21,4(r8)
 80013b4:	d8c02015 	stw	r3,128(sp)
 80013b8:	d8801f15 	stw	r2,124(sp)
 80013bc:	010001c4 	movi	r4,7
 80013c0:	20832716 	blt	r4,r2,8002060 <___vfprintf_internal_r+0x1304>
 80013c4:	d8802787 	ldb	r2,158(sp)
 80013c8:	42000204 	addi	r8,r8,8
 80013cc:	10000c26 	beq	r2,zero,8001400 <___vfprintf_internal_r+0x6a4>
 80013d0:	d8801f17 	ldw	r2,124(sp)
 80013d4:	d9002784 	addi	r4,sp,158
 80013d8:	18c00044 	addi	r3,r3,1
 80013dc:	10800044 	addi	r2,r2,1
 80013e0:	41000015 	stw	r4,0(r8)
 80013e4:	01000044 	movi	r4,1
 80013e8:	41000115 	stw	r4,4(r8)
 80013ec:	d8c02015 	stw	r3,128(sp)
 80013f0:	d8801f15 	stw	r2,124(sp)
 80013f4:	010001c4 	movi	r4,7
 80013f8:	2082c016 	blt	r4,r2,8001efc <___vfprintf_internal_r+0x11a0>
 80013fc:	42000204 	addi	r8,r8,8
 8001400:	d8802c17 	ldw	r2,176(sp)
 8001404:	10000c26 	beq	r2,zero,8001438 <___vfprintf_internal_r+0x6dc>
 8001408:	d8801f17 	ldw	r2,124(sp)
 800140c:	d9002704 	addi	r4,sp,156
 8001410:	18c00084 	addi	r3,r3,2
 8001414:	10800044 	addi	r2,r2,1
 8001418:	41000015 	stw	r4,0(r8)
 800141c:	01000084 	movi	r4,2
 8001420:	41000115 	stw	r4,4(r8)
 8001424:	d8c02015 	stw	r3,128(sp)
 8001428:	d8801f15 	stw	r2,124(sp)
 800142c:	010001c4 	movi	r4,7
 8001430:	2082ba16 	blt	r4,r2,8001f1c <___vfprintf_internal_r+0x11c0>
 8001434:	42000204 	addi	r8,r8,8
 8001438:	d9003017 	ldw	r4,192(sp)
 800143c:	00802004 	movi	r2,128
 8001440:	20821c26 	beq	r4,r2,8001cb4 <___vfprintf_internal_r+0xf58>
 8001444:	d9403217 	ldw	r5,200(sp)
 8001448:	2c67c83a 	sub	r19,r5,r17
 800144c:	04c0260e 	bge	zero,r19,80014e8 <___vfprintf_internal_r+0x78c>
 8001450:	05400404 	movi	r21,16
 8001454:	d8801f17 	ldw	r2,124(sp)
 8001458:	acc46e0e 	bge	r21,r19,8002614 <___vfprintf_internal_r+0x18b8>
 800145c:	01420074 	movhi	r5,2049
 8001460:	29401684 	addi	r5,r5,90
 8001464:	d9402c15 	stw	r5,176(sp)
 8001468:	048001c4 	movi	r18,7
 800146c:	00000306 	br	800147c <___vfprintf_internal_r+0x720>
 8001470:	9cfffc04 	addi	r19,r19,-16
 8001474:	42000204 	addi	r8,r8,8
 8001478:	acc0110e 	bge	r21,r19,80014c0 <___vfprintf_internal_r+0x764>
 800147c:	18c00404 	addi	r3,r3,16
 8001480:	10800044 	addi	r2,r2,1
 8001484:	45000015 	stw	r20,0(r8)
 8001488:	45400115 	stw	r21,4(r8)
 800148c:	d8c02015 	stw	r3,128(sp)
 8001490:	d8801f15 	stw	r2,124(sp)
 8001494:	90bff60e 	bge	r18,r2,8001470 <___vfprintf_internal_r+0x714>
 8001498:	b809883a 	mov	r4,r23
 800149c:	b00b883a 	mov	r5,r22
 80014a0:	d9801e04 	addi	r6,sp,120
 80014a4:	80077340 	call	8007734 <__sprint_r>
 80014a8:	103f211e 	bne	r2,zero,8001130 <___vfprintf_internal_r+0x3d4>
 80014ac:	9cfffc04 	addi	r19,r19,-16
 80014b0:	d8c02017 	ldw	r3,128(sp)
 80014b4:	d8801f17 	ldw	r2,124(sp)
 80014b8:	da000404 	addi	r8,sp,16
 80014bc:	acffef16 	blt	r21,r19,800147c <___vfprintf_internal_r+0x720>
 80014c0:	d9002c17 	ldw	r4,176(sp)
 80014c4:	1cc7883a 	add	r3,r3,r19
 80014c8:	10800044 	addi	r2,r2,1
 80014cc:	41000015 	stw	r4,0(r8)
 80014d0:	44c00115 	stw	r19,4(r8)
 80014d4:	d8c02015 	stw	r3,128(sp)
 80014d8:	d8801f15 	stw	r2,124(sp)
 80014dc:	010001c4 	movi	r4,7
 80014e0:	20827e16 	blt	r4,r2,8001edc <___vfprintf_internal_r+0x1180>
 80014e4:	42000204 	addi	r8,r8,8
 80014e8:	e080400c 	andi	r2,fp,256
 80014ec:	1001a81e 	bne	r2,zero,8001b90 <___vfprintf_internal_r+0xe34>
 80014f0:	d8801f17 	ldw	r2,124(sp)
 80014f4:	d9403117 	ldw	r5,196(sp)
 80014f8:	1c47883a 	add	r3,r3,r17
 80014fc:	10800044 	addi	r2,r2,1
 8001500:	41400015 	stw	r5,0(r8)
 8001504:	44400115 	stw	r17,4(r8)
 8001508:	d8c02015 	stw	r3,128(sp)
 800150c:	d8801f15 	stw	r2,124(sp)
 8001510:	010001c4 	movi	r4,7
 8001514:	20825916 	blt	r4,r2,8001e7c <___vfprintf_internal_r+0x1120>
 8001518:	42000204 	addi	r8,r8,8
 800151c:	e080010c 	andi	r2,fp,4
 8001520:	10003126 	beq	r2,zero,80015e8 <___vfprintf_internal_r+0x88c>
 8001524:	d8802e17 	ldw	r2,184(sp)
 8001528:	d9002b17 	ldw	r4,172(sp)
 800152c:	1121c83a 	sub	r16,r2,r4
 8001530:	04002d0e 	bge	zero,r16,80015e8 <___vfprintf_internal_r+0x88c>
 8001534:	04400404 	movi	r17,16
 8001538:	d8801f17 	ldw	r2,124(sp)
 800153c:	8c053f0e 	bge	r17,r16,8002a3c <___vfprintf_internal_r+0x1ce0>
 8001540:	01020074 	movhi	r4,2049
 8001544:	21001a84 	addi	r4,r4,106
 8001548:	d9003615 	stw	r4,216(sp)
 800154c:	048001c4 	movi	r18,7
 8001550:	00000306 	br	8001560 <___vfprintf_internal_r+0x804>
 8001554:	843ffc04 	addi	r16,r16,-16
 8001558:	42000204 	addi	r8,r8,8
 800155c:	8c00130e 	bge	r17,r16,80015ac <___vfprintf_internal_r+0x850>
 8001560:	01420074 	movhi	r5,2049
 8001564:	18c00404 	addi	r3,r3,16
 8001568:	10800044 	addi	r2,r2,1
 800156c:	29401a84 	addi	r5,r5,106
 8001570:	41400015 	stw	r5,0(r8)
 8001574:	44400115 	stw	r17,4(r8)
 8001578:	d8c02015 	stw	r3,128(sp)
 800157c:	d8801f15 	stw	r2,124(sp)
 8001580:	90bff40e 	bge	r18,r2,8001554 <___vfprintf_internal_r+0x7f8>
 8001584:	b809883a 	mov	r4,r23
 8001588:	b00b883a 	mov	r5,r22
 800158c:	d9801e04 	addi	r6,sp,120
 8001590:	80077340 	call	8007734 <__sprint_r>
 8001594:	103ee61e 	bne	r2,zero,8001130 <___vfprintf_internal_r+0x3d4>
 8001598:	843ffc04 	addi	r16,r16,-16
 800159c:	d8c02017 	ldw	r3,128(sp)
 80015a0:	d8801f17 	ldw	r2,124(sp)
 80015a4:	da000404 	addi	r8,sp,16
 80015a8:	8c3fed16 	blt	r17,r16,8001560 <___vfprintf_internal_r+0x804>
 80015ac:	d9003617 	ldw	r4,216(sp)
 80015b0:	1c07883a 	add	r3,r3,r16
 80015b4:	10800044 	addi	r2,r2,1
 80015b8:	41000015 	stw	r4,0(r8)
 80015bc:	44000115 	stw	r16,4(r8)
 80015c0:	d8c02015 	stw	r3,128(sp)
 80015c4:	d8801f15 	stw	r2,124(sp)
 80015c8:	010001c4 	movi	r4,7
 80015cc:	2080060e 	bge	r4,r2,80015e8 <___vfprintf_internal_r+0x88c>
 80015d0:	b809883a 	mov	r4,r23
 80015d4:	b00b883a 	mov	r5,r22
 80015d8:	d9801e04 	addi	r6,sp,120
 80015dc:	80077340 	call	8007734 <__sprint_r>
 80015e0:	103ed31e 	bne	r2,zero,8001130 <___vfprintf_internal_r+0x3d4>
 80015e4:	d8c02017 	ldw	r3,128(sp)
 80015e8:	df002b17 	ldw	fp,172(sp)
 80015ec:	d9402e17 	ldw	r5,184(sp)
 80015f0:	e140010e 	bge	fp,r5,80015f8 <___vfprintf_internal_r+0x89c>
 80015f4:	2839883a 	mov	fp,r5
 80015f8:	d8802f17 	ldw	r2,188(sp)
 80015fc:	1705883a 	add	r2,r2,fp
 8001600:	d8802f15 	stw	r2,188(sp)
 8001604:	1802251e 	bne	r3,zero,8001e9c <___vfprintf_internal_r+0x1140>
 8001608:	d8c02a17 	ldw	r3,168(sp)
 800160c:	d8001f15 	stw	zero,124(sp)
 8001610:	da000404 	addi	r8,sp,16
 8001614:	18800007 	ldb	r2,0(r3)
 8001618:	103e0e1e 	bne	r2,zero,8000e54 <___vfprintf_internal_r+0xf8>
 800161c:	dc002a17 	ldw	r16,168(sp)
 8001620:	003e2606 	br	8000ebc <___vfprintf_internal_r+0x160>
 8001624:	d9002d17 	ldw	r4,180(sp)
 8001628:	d9402d17 	ldw	r5,180(sp)
 800162c:	da002a17 	ldw	r8,168(sp)
 8001630:	21000017 	ldw	r4,0(r4)
 8001634:	29400117 	ldw	r5,4(r5)
 8001638:	df002a15 	stw	fp,168(sp)
 800163c:	9839883a 	mov	fp,r19
 8001640:	dcc02b03 	ldbu	r19,172(sp)
 8001644:	d9003715 	stw	r4,220(sp)
 8001648:	d9403915 	stw	r5,228(sp)
 800164c:	da003f15 	stw	r8,252(sp)
 8001650:	da403e15 	stw	r9,248(sp)
 8001654:	dcc02785 	stb	r19,158(sp)
 8001658:	80072f80 	call	80072f8 <__fpclassifyd>
 800165c:	d8c02d17 	ldw	r3,180(sp)
 8001660:	04400044 	movi	r17,1
 8001664:	da003f17 	ldw	r8,252(sp)
 8001668:	1c800204 	addi	r18,r3,8
 800166c:	da403e17 	ldw	r9,248(sp)
 8001670:	d9003717 	ldw	r4,220(sp)
 8001674:	d9403917 	ldw	r5,228(sp)
 8001678:	1443411e 	bne	r2,r17,8002380 <___vfprintf_internal_r+0x1624>
 800167c:	000d883a 	mov	r6,zero
 8001680:	000f883a 	mov	r7,zero
 8001684:	800c0c00 	call	800c0c0 <__ledf2>
 8001688:	da003f17 	ldw	r8,252(sp)
 800168c:	10050d16 	blt	r2,zero,8002ac4 <___vfprintf_internal_r+0x1d68>
 8001690:	dcc02783 	ldbu	r19,158(sp)
 8001694:	008011c4 	movi	r2,71
 8001698:	1404590e 	bge	r2,r16,8002800 <___vfprintf_internal_r+0x1aa4>
 800169c:	01420074 	movhi	r5,2049
 80016a0:	29400704 	addi	r5,r5,28
 80016a4:	d9403115 	stw	r5,196(sp)
 80016a8:	00c000c4 	movi	r3,3
 80016ac:	00bfdfc4 	movi	r2,-129
 80016b0:	d8c02b15 	stw	r3,172(sp)
 80016b4:	e0b8703a 	and	fp,fp,r2
 80016b8:	dc802d15 	stw	r18,180(sp)
 80016bc:	1823883a 	mov	r17,r3
 80016c0:	d8003215 	stw	zero,200(sp)
 80016c4:	d8003415 	stw	zero,208(sp)
 80016c8:	003f0106 	br	80012d0 <___vfprintf_internal_r+0x574>
 80016cc:	9cc00214 	ori	r19,r19,8
 80016d0:	e005883a 	mov	r2,fp
 80016d4:	e4000007 	ldb	r16,0(fp)
 80016d8:	003e0606 	br	8000ef4 <___vfprintf_internal_r+0x198>
 80016dc:	da002a17 	ldw	r8,168(sp)
 80016e0:	df002a15 	stw	fp,168(sp)
 80016e4:	9f000414 	ori	fp,r19,16
 80016e8:	e080080c 	andi	r2,fp,32
 80016ec:	1000e726 	beq	r2,zero,8001a8c <___vfprintf_internal_r+0xd30>
 80016f0:	d9402d17 	ldw	r5,180(sp)
 80016f4:	0005883a 	mov	r2,zero
 80016f8:	2c800017 	ldw	r18,0(r5)
 80016fc:	2d400117 	ldw	r21,4(r5)
 8001700:	29400204 	addi	r5,r5,8
 8001704:	d9402d15 	stw	r5,180(sp)
 8001708:	9546b03a 	or	r3,r18,r21
 800170c:	d8002785 	stb	zero,158(sp)
 8001710:	da403215 	stw	r9,200(sp)
 8001714:	0027883a 	mov	r19,zero
 8001718:	003ece06 	br	8001254 <___vfprintf_internal_r+0x4f8>
 800171c:	da002a17 	ldw	r8,168(sp)
 8001720:	df002a15 	stw	fp,168(sp)
 8001724:	9f000414 	ori	fp,r19,16
 8001728:	e080080c 	andi	r2,fp,32
 800172c:	1000c826 	beq	r2,zero,8001a50 <___vfprintf_internal_r+0xcf4>
 8001730:	d9002d17 	ldw	r4,180(sp)
 8001734:	00800044 	movi	r2,1
 8001738:	24800017 	ldw	r18,0(r4)
 800173c:	25400117 	ldw	r21,4(r4)
 8001740:	21000204 	addi	r4,r4,8
 8001744:	d9002d15 	stw	r4,180(sp)
 8001748:	9546b03a 	or	r3,r18,r21
 800174c:	003fef06 	br	800170c <___vfprintf_internal_r+0x9b0>
 8001750:	d9402d17 	ldw	r5,180(sp)
 8001754:	00800c04 	movi	r2,48
 8001758:	d8802705 	stb	r2,156(sp)
 800175c:	2c800017 	ldw	r18,0(r5)
 8001760:	00801e04 	movi	r2,120
 8001764:	d8802745 	stb	r2,157(sp)
 8001768:	00820074 	movhi	r2,2049
 800176c:	10800f04 	addi	r2,r2,60
 8001770:	29400104 	addi	r5,r5,4
 8001774:	da002a17 	ldw	r8,168(sp)
 8001778:	d8803b15 	stw	r2,236(sp)
 800177c:	df002a15 	stw	fp,168(sp)
 8001780:	002b883a 	mov	r21,zero
 8001784:	9f000094 	ori	fp,r19,2
 8001788:	d9402d15 	stw	r5,180(sp)
 800178c:	00800084 	movi	r2,2
 8001790:	04001e04 	movi	r16,120
 8001794:	9007883a 	mov	r3,r18
 8001798:	003fdc06 	br	800170c <___vfprintf_internal_r+0x9b0>
 800179c:	da002a17 	ldw	r8,168(sp)
 80017a0:	df002a15 	stw	fp,168(sp)
 80017a4:	9839883a 	mov	fp,r19
 80017a8:	dcc02b03 	ldbu	r19,172(sp)
 80017ac:	e080080c 	andi	r2,fp,32
 80017b0:	d8c02d17 	ldw	r3,180(sp)
 80017b4:	dcc02785 	stb	r19,158(sp)
 80017b8:	103e9b1e 	bne	r2,zero,8001228 <___vfprintf_internal_r+0x4cc>
 80017bc:	e080040c 	andi	r2,fp,16
 80017c0:	10036626 	beq	r2,zero,800255c <___vfprintf_internal_r+0x1800>
 80017c4:	1c800017 	ldw	r18,0(r3)
 80017c8:	d9402d17 	ldw	r5,180(sp)
 80017cc:	902bd7fa 	srai	r21,r18,31
 80017d0:	29400104 	addi	r5,r5,4
 80017d4:	d9402d15 	stw	r5,180(sp)
 80017d8:	a805883a 	mov	r2,r21
 80017dc:	003e9806 	br	8001240 <___vfprintf_internal_r+0x4e4>
 80017e0:	9cc01014 	ori	r19,r19,64
 80017e4:	e005883a 	mov	r2,fp
 80017e8:	e4000007 	ldb	r16,0(fp)
 80017ec:	003dc106 	br	8000ef4 <___vfprintf_internal_r+0x198>
 80017f0:	e4000007 	ldb	r16,0(fp)
 80017f4:	00801b04 	movi	r2,108
 80017f8:	80841426 	beq	r16,r2,800284c <___vfprintf_internal_r+0x1af0>
 80017fc:	9cc00414 	ori	r19,r19,16
 8001800:	e005883a 	mov	r2,fp
 8001804:	003dbb06 	br	8000ef4 <___vfprintf_internal_r+0x198>
 8001808:	da002a17 	ldw	r8,168(sp)
 800180c:	df002a15 	stw	fp,168(sp)
 8001810:	9839883a 	mov	fp,r19
 8001814:	dcc02b03 	ldbu	r19,172(sp)
 8001818:	e080080c 	andi	r2,fp,32
 800181c:	dcc02785 	stb	r19,158(sp)
 8001820:	10036126 	beq	r2,zero,80025a8 <___vfprintf_internal_r+0x184c>
 8001824:	d9402d17 	ldw	r5,180(sp)
 8001828:	d9002f17 	ldw	r4,188(sp)
 800182c:	28800017 	ldw	r2,0(r5)
 8001830:	2007d7fa 	srai	r3,r4,31
 8001834:	29400104 	addi	r5,r5,4
 8001838:	d9402d15 	stw	r5,180(sp)
 800183c:	11000015 	stw	r4,0(r2)
 8001840:	10c00115 	stw	r3,4(r2)
 8001844:	003d8006 	br	8000e48 <___vfprintf_internal_r+0xec>
 8001848:	da002a17 	ldw	r8,168(sp)
 800184c:	df002a15 	stw	fp,168(sp)
 8001850:	9839883a 	mov	fp,r19
 8001854:	dcc02b03 	ldbu	r19,172(sp)
 8001858:	01420074 	movhi	r5,2049
 800185c:	29400a04 	addi	r5,r5,40
 8001860:	dcc02785 	stb	r19,158(sp)
 8001864:	d9403b15 	stw	r5,236(sp)
 8001868:	e0c0080c 	andi	r3,fp,32
 800186c:	d8802d17 	ldw	r2,180(sp)
 8001870:	18006626 	beq	r3,zero,8001a0c <___vfprintf_internal_r+0xcb0>
 8001874:	d9402d17 	ldw	r5,180(sp)
 8001878:	14800017 	ldw	r18,0(r2)
 800187c:	15400117 	ldw	r21,4(r2)
 8001880:	29400204 	addi	r5,r5,8
 8001884:	d9402d15 	stw	r5,180(sp)
 8001888:	e080004c 	andi	r2,fp,1
 800188c:	1001fd26 	beq	r2,zero,8002084 <___vfprintf_internal_r+0x1328>
 8001890:	9546b03a 	or	r3,r18,r21
 8001894:	18034f26 	beq	r3,zero,80025d4 <___vfprintf_internal_r+0x1878>
 8001898:	00800c04 	movi	r2,48
 800189c:	d8802705 	stb	r2,156(sp)
 80018a0:	dc002745 	stb	r16,157(sp)
 80018a4:	e7000094 	ori	fp,fp,2
 80018a8:	00800084 	movi	r2,2
 80018ac:	003f9706 	br	800170c <___vfprintf_internal_r+0x9b0>
 80018b0:	d8c02d17 	ldw	r3,180(sp)
 80018b4:	d9002d17 	ldw	r4,180(sp)
 80018b8:	da002a17 	ldw	r8,168(sp)
 80018bc:	18800017 	ldw	r2,0(r3)
 80018c0:	21000104 	addi	r4,r4,4
 80018c4:	00c00044 	movi	r3,1
 80018c8:	df002a15 	stw	fp,168(sp)
 80018cc:	d8c02b15 	stw	r3,172(sp)
 80018d0:	9839883a 	mov	fp,r19
 80018d4:	d8002785 	stb	zero,158(sp)
 80018d8:	d8801405 	stb	r2,80(sp)
 80018dc:	d9002d15 	stw	r4,180(sp)
 80018e0:	1823883a 	mov	r17,r3
 80018e4:	d8c01404 	addi	r3,sp,80
 80018e8:	d8003215 	stw	zero,200(sp)
 80018ec:	d8003415 	stw	zero,208(sp)
 80018f0:	d8c03115 	stw	r3,196(sp)
 80018f4:	0005883a 	mov	r2,zero
 80018f8:	003e7c06 	br	80012ec <___vfprintf_internal_r+0x590>
 80018fc:	d8802b07 	ldb	r2,172(sp)
 8001900:	1003011e 	bne	r2,zero,8002508 <___vfprintf_internal_r+0x17ac>
 8001904:	00c00804 	movi	r3,32
 8001908:	d8c02b05 	stb	r3,172(sp)
 800190c:	e005883a 	mov	r2,fp
 8001910:	e4000007 	ldb	r16,0(fp)
 8001914:	003d7706 	br	8000ef4 <___vfprintf_internal_r+0x198>
 8001918:	9cc00054 	ori	r19,r19,1
 800191c:	e005883a 	mov	r2,fp
 8001920:	e4000007 	ldb	r16,0(fp)
 8001924:	003d7306 	br	8000ef4 <___vfprintf_internal_r+0x198>
 8001928:	d9002d17 	ldw	r4,180(sp)
 800192c:	d9402d17 	ldw	r5,180(sp)
 8001930:	21000017 	ldw	r4,0(r4)
 8001934:	28c00104 	addi	r3,r5,4
 8001938:	d9002e15 	stw	r4,184(sp)
 800193c:	2003bd16 	blt	r4,zero,8002834 <___vfprintf_internal_r+0x1ad8>
 8001940:	d8c02d15 	stw	r3,180(sp)
 8001944:	e005883a 	mov	r2,fp
 8001948:	e4000007 	ldb	r16,0(fp)
 800194c:	003d6906 	br	8000ef4 <___vfprintf_internal_r+0x198>
 8001950:	00c00ac4 	movi	r3,43
 8001954:	d8c02b05 	stb	r3,172(sp)
 8001958:	e005883a 	mov	r2,fp
 800195c:	e4000007 	ldb	r16,0(fp)
 8001960:	003d6406 	br	8000ef4 <___vfprintf_internal_r+0x198>
 8001964:	d8c02d17 	ldw	r3,180(sp)
 8001968:	d9002d17 	ldw	r4,180(sp)
 800196c:	da002a17 	ldw	r8,168(sp)
 8001970:	18c00017 	ldw	r3,0(r3)
 8001974:	df002a15 	stw	fp,168(sp)
 8001978:	d8002785 	stb	zero,158(sp)
 800197c:	d8c03115 	stw	r3,196(sp)
 8001980:	9839883a 	mov	fp,r19
 8001984:	24800104 	addi	r18,r4,4
 8001988:	18041b26 	beq	r3,zero,80029f8 <___vfprintf_internal_r+0x1c9c>
 800198c:	d9003117 	ldw	r4,196(sp)
 8001990:	4803be16 	blt	r9,zero,800288c <___vfprintf_internal_r+0x1b30>
 8001994:	480d883a 	mov	r6,r9
 8001998:	000b883a 	mov	r5,zero
 800199c:	da003f15 	stw	r8,252(sp)
 80019a0:	da403e15 	stw	r9,248(sp)
 80019a4:	8005f580 	call	8005f58 <memchr>
 80019a8:	da003f17 	ldw	r8,252(sp)
 80019ac:	da403e17 	ldw	r9,248(sp)
 80019b0:	10045426 	beq	r2,zero,8002b04 <___vfprintf_internal_r+0x1da8>
 80019b4:	d8c03117 	ldw	r3,196(sp)
 80019b8:	10e3c83a 	sub	r17,r2,r3
 80019bc:	4c436a16 	blt	r9,r17,8002768 <___vfprintf_internal_r+0x1a0c>
 80019c0:	8805883a 	mov	r2,r17
 80019c4:	8803b616 	blt	r17,zero,80028a0 <___vfprintf_internal_r+0x1b44>
 80019c8:	dcc02783 	ldbu	r19,158(sp)
 80019cc:	d8802b15 	stw	r2,172(sp)
 80019d0:	dc802d15 	stw	r18,180(sp)
 80019d4:	d8003215 	stw	zero,200(sp)
 80019d8:	d8003415 	stw	zero,208(sp)
 80019dc:	003e3c06 	br	80012d0 <___vfprintf_internal_r+0x574>
 80019e0:	da002a17 	ldw	r8,168(sp)
 80019e4:	df002a15 	stw	fp,168(sp)
 80019e8:	9839883a 	mov	fp,r19
 80019ec:	dcc02b03 	ldbu	r19,172(sp)
 80019f0:	01020074 	movhi	r4,2049
 80019f4:	21000f04 	addi	r4,r4,60
 80019f8:	d9003b15 	stw	r4,236(sp)
 80019fc:	dcc02785 	stb	r19,158(sp)
 8001a00:	e0c0080c 	andi	r3,fp,32
 8001a04:	d8802d17 	ldw	r2,180(sp)
 8001a08:	183f9a1e 	bne	r3,zero,8001874 <___vfprintf_internal_r+0xb18>
 8001a0c:	e0c0040c 	andi	r3,fp,16
 8001a10:	1802c026 	beq	r3,zero,8002514 <___vfprintf_internal_r+0x17b8>
 8001a14:	d8c02d17 	ldw	r3,180(sp)
 8001a18:	14800017 	ldw	r18,0(r2)
 8001a1c:	002b883a 	mov	r21,zero
 8001a20:	18c00104 	addi	r3,r3,4
 8001a24:	d8c02d15 	stw	r3,180(sp)
 8001a28:	003f9706 	br	8001888 <___vfprintf_internal_r+0xb2c>
 8001a2c:	9cc00814 	ori	r19,r19,32
 8001a30:	e005883a 	mov	r2,fp
 8001a34:	e4000007 	ldb	r16,0(fp)
 8001a38:	003d2e06 	br	8000ef4 <___vfprintf_internal_r+0x198>
 8001a3c:	da002a17 	ldw	r8,168(sp)
 8001a40:	df002a15 	stw	fp,168(sp)
 8001a44:	9839883a 	mov	fp,r19
 8001a48:	e080080c 	andi	r2,fp,32
 8001a4c:	103f381e 	bne	r2,zero,8001730 <___vfprintf_internal_r+0x9d4>
 8001a50:	e080040c 	andi	r2,fp,16
 8001a54:	1002b726 	beq	r2,zero,8002534 <___vfprintf_internal_r+0x17d8>
 8001a58:	d9402d17 	ldw	r5,180(sp)
 8001a5c:	002b883a 	mov	r21,zero
 8001a60:	00800044 	movi	r2,1
 8001a64:	2c800017 	ldw	r18,0(r5)
 8001a68:	29400104 	addi	r5,r5,4
 8001a6c:	d9402d15 	stw	r5,180(sp)
 8001a70:	9007883a 	mov	r3,r18
 8001a74:	003f2506 	br	800170c <___vfprintf_internal_r+0x9b0>
 8001a78:	da002a17 	ldw	r8,168(sp)
 8001a7c:	df002a15 	stw	fp,168(sp)
 8001a80:	9839883a 	mov	fp,r19
 8001a84:	e080080c 	andi	r2,fp,32
 8001a88:	103f191e 	bne	r2,zero,80016f0 <___vfprintf_internal_r+0x994>
 8001a8c:	e080040c 	andi	r2,fp,16
 8001a90:	1002bb26 	beq	r2,zero,8002580 <___vfprintf_internal_r+0x1824>
 8001a94:	d8802d17 	ldw	r2,180(sp)
 8001a98:	002b883a 	mov	r21,zero
 8001a9c:	14800017 	ldw	r18,0(r2)
 8001aa0:	10800104 	addi	r2,r2,4
 8001aa4:	d8802d15 	stw	r2,180(sp)
 8001aa8:	9007883a 	mov	r3,r18
 8001aac:	0005883a 	mov	r2,zero
 8001ab0:	003f1606 	br	800170c <___vfprintf_internal_r+0x9b0>
 8001ab4:	da002a17 	ldw	r8,168(sp)
 8001ab8:	df002a15 	stw	fp,168(sp)
 8001abc:	9839883a 	mov	fp,r19
 8001ac0:	dcc02b03 	ldbu	r19,172(sp)
 8001ac4:	dcc02785 	stb	r19,158(sp)
 8001ac8:	803d9326 	beq	r16,zero,8001118 <___vfprintf_internal_r+0x3bc>
 8001acc:	00c00044 	movi	r3,1
 8001ad0:	d8c02b15 	stw	r3,172(sp)
 8001ad4:	dc001405 	stb	r16,80(sp)
 8001ad8:	d8002785 	stb	zero,158(sp)
 8001adc:	003f8006 	br	80018e0 <___vfprintf_internal_r+0xb84>
 8001ae0:	d8c02017 	ldw	r3,128(sp)
 8001ae4:	003e3906 	br	80013cc <___vfprintf_internal_r+0x670>
 8001ae8:	10803fcc 	andi	r2,r2,255
 8001aec:	00c00044 	movi	r3,1
 8001af0:	10fde01e 	bne	r2,r3,8001274 <___vfprintf_internal_r+0x518>
 8001af4:	a800021e 	bne	r21,zero,8001b00 <___vfprintf_internal_r+0xda4>
 8001af8:	00800244 	movi	r2,9
 8001afc:	14801e2e 	bgeu	r2,r18,8001b78 <___vfprintf_internal_r+0xe1c>
 8001b00:	dc002b15 	stw	r16,172(sp)
 8001b04:	dc401e04 	addi	r17,sp,120
 8001b08:	9021883a 	mov	r16,r18
 8001b0c:	da402c15 	stw	r9,176(sp)
 8001b10:	a825883a 	mov	r18,r21
 8001b14:	402b883a 	mov	r21,r8
 8001b18:	8009883a 	mov	r4,r16
 8001b1c:	900b883a 	mov	r5,r18
 8001b20:	01800284 	movi	r6,10
 8001b24:	000f883a 	mov	r7,zero
 8001b28:	800a5f80 	call	800a5f8 <__umoddi3>
 8001b2c:	10800c04 	addi	r2,r2,48
 8001b30:	8c7fffc4 	addi	r17,r17,-1
 8001b34:	8009883a 	mov	r4,r16
 8001b38:	900b883a 	mov	r5,r18
 8001b3c:	01800284 	movi	r6,10
 8001b40:	000f883a 	mov	r7,zero
 8001b44:	88800005 	stb	r2,0(r17)
 8001b48:	8009fb80 	call	8009fb8 <__udivdi3>
 8001b4c:	1021883a 	mov	r16,r2
 8001b50:	10c4b03a 	or	r2,r2,r3
 8001b54:	1825883a 	mov	r18,r3
 8001b58:	103fef1e 	bne	r2,zero,8001b18 <___vfprintf_internal_r+0xdbc>
 8001b5c:	d9002817 	ldw	r4,160(sp)
 8001b60:	dc403115 	stw	r17,196(sp)
 8001b64:	dc002b17 	ldw	r16,172(sp)
 8001b68:	da402c17 	ldw	r9,176(sp)
 8001b6c:	a811883a 	mov	r8,r21
 8001b70:	2463c83a 	sub	r17,r4,r17
 8001b74:	003dd106 	br	80012bc <___vfprintf_internal_r+0x560>
 8001b78:	94800c04 	addi	r18,r18,48
 8001b7c:	d8c01dc4 	addi	r3,sp,119
 8001b80:	dc801dc5 	stb	r18,119(sp)
 8001b84:	dc403c17 	ldw	r17,240(sp)
 8001b88:	d8c03115 	stw	r3,196(sp)
 8001b8c:	003dcb06 	br	80012bc <___vfprintf_internal_r+0x560>
 8001b90:	00801944 	movi	r2,101
 8001b94:	1400720e 	bge	r2,r16,8001d60 <___vfprintf_internal_r+0x1004>
 8001b98:	d9003717 	ldw	r4,220(sp)
 8001b9c:	d9403917 	ldw	r5,228(sp)
 8001ba0:	000d883a 	mov	r6,zero
 8001ba4:	000f883a 	mov	r7,zero
 8001ba8:	d8c03d15 	stw	r3,244(sp)
 8001bac:	da003f15 	stw	r8,252(sp)
 8001bb0:	800bf5c0 	call	800bf5c <__eqdf2>
 8001bb4:	d8c03d17 	ldw	r3,244(sp)
 8001bb8:	da003f17 	ldw	r8,252(sp)
 8001bbc:	1000f41e 	bne	r2,zero,8001f90 <___vfprintf_internal_r+0x1234>
 8001bc0:	d8801f17 	ldw	r2,124(sp)
 8001bc4:	01020074 	movhi	r4,2049
 8001bc8:	21001604 	addi	r4,r4,88
 8001bcc:	18c00044 	addi	r3,r3,1
 8001bd0:	10800044 	addi	r2,r2,1
 8001bd4:	41000015 	stw	r4,0(r8)
 8001bd8:	01000044 	movi	r4,1
 8001bdc:	41000115 	stw	r4,4(r8)
 8001be0:	d8c02015 	stw	r3,128(sp)
 8001be4:	d8801f15 	stw	r2,124(sp)
 8001be8:	010001c4 	movi	r4,7
 8001bec:	20828d16 	blt	r4,r2,8002624 <___vfprintf_internal_r+0x18c8>
 8001bf0:	42000204 	addi	r8,r8,8
 8001bf4:	d8802617 	ldw	r2,152(sp)
 8001bf8:	d9403317 	ldw	r5,204(sp)
 8001bfc:	11400216 	blt	r2,r5,8001c08 <___vfprintf_internal_r+0xeac>
 8001c00:	e080004c 	andi	r2,fp,1
 8001c04:	103e4526 	beq	r2,zero,800151c <___vfprintf_internal_r+0x7c0>
 8001c08:	d8803817 	ldw	r2,224(sp)
 8001c0c:	d9003517 	ldw	r4,212(sp)
 8001c10:	d9403817 	ldw	r5,224(sp)
 8001c14:	1887883a 	add	r3,r3,r2
 8001c18:	d8801f17 	ldw	r2,124(sp)
 8001c1c:	41000015 	stw	r4,0(r8)
 8001c20:	41400115 	stw	r5,4(r8)
 8001c24:	10800044 	addi	r2,r2,1
 8001c28:	d8c02015 	stw	r3,128(sp)
 8001c2c:	d8801f15 	stw	r2,124(sp)
 8001c30:	010001c4 	movi	r4,7
 8001c34:	20830916 	blt	r4,r2,800285c <___vfprintf_internal_r+0x1b00>
 8001c38:	42000204 	addi	r8,r8,8
 8001c3c:	d8803317 	ldw	r2,204(sp)
 8001c40:	143fffc4 	addi	r16,r2,-1
 8001c44:	043e350e 	bge	zero,r16,800151c <___vfprintf_internal_r+0x7c0>
 8001c48:	04400404 	movi	r17,16
 8001c4c:	d8801f17 	ldw	r2,124(sp)
 8001c50:	8c007e0e 	bge	r17,r16,8001e4c <___vfprintf_internal_r+0x10f0>
 8001c54:	01420074 	movhi	r5,2049
 8001c58:	29401684 	addi	r5,r5,90
 8001c5c:	d9402c15 	stw	r5,176(sp)
 8001c60:	04c001c4 	movi	r19,7
 8001c64:	00000306 	br	8001c74 <___vfprintf_internal_r+0xf18>
 8001c68:	42000204 	addi	r8,r8,8
 8001c6c:	843ffc04 	addi	r16,r16,-16
 8001c70:	8c00790e 	bge	r17,r16,8001e58 <___vfprintf_internal_r+0x10fc>
 8001c74:	18c00404 	addi	r3,r3,16
 8001c78:	10800044 	addi	r2,r2,1
 8001c7c:	45000015 	stw	r20,0(r8)
 8001c80:	44400115 	stw	r17,4(r8)
 8001c84:	d8c02015 	stw	r3,128(sp)
 8001c88:	d8801f15 	stw	r2,124(sp)
 8001c8c:	98bff60e 	bge	r19,r2,8001c68 <___vfprintf_internal_r+0xf0c>
 8001c90:	b809883a 	mov	r4,r23
 8001c94:	b00b883a 	mov	r5,r22
 8001c98:	d9801e04 	addi	r6,sp,120
 8001c9c:	80077340 	call	8007734 <__sprint_r>
 8001ca0:	103d231e 	bne	r2,zero,8001130 <___vfprintf_internal_r+0x3d4>
 8001ca4:	d8c02017 	ldw	r3,128(sp)
 8001ca8:	d8801f17 	ldw	r2,124(sp)
 8001cac:	da000404 	addi	r8,sp,16
 8001cb0:	003fee06 	br	8001c6c <___vfprintf_internal_r+0xf10>
 8001cb4:	d9402e17 	ldw	r5,184(sp)
 8001cb8:	d8802b17 	ldw	r2,172(sp)
 8001cbc:	28a7c83a 	sub	r19,r5,r2
 8001cc0:	04fde00e 	bge	zero,r19,8001444 <___vfprintf_internal_r+0x6e8>
 8001cc4:	05400404 	movi	r21,16
 8001cc8:	d8801f17 	ldw	r2,124(sp)
 8001ccc:	acc3870e 	bge	r21,r19,8002aec <___vfprintf_internal_r+0x1d90>
 8001cd0:	01420074 	movhi	r5,2049
 8001cd4:	29401684 	addi	r5,r5,90
 8001cd8:	d9402c15 	stw	r5,176(sp)
 8001cdc:	048001c4 	movi	r18,7
 8001ce0:	00000306 	br	8001cf0 <___vfprintf_internal_r+0xf94>
 8001ce4:	9cfffc04 	addi	r19,r19,-16
 8001ce8:	42000204 	addi	r8,r8,8
 8001cec:	acc0110e 	bge	r21,r19,8001d34 <___vfprintf_internal_r+0xfd8>
 8001cf0:	18c00404 	addi	r3,r3,16
 8001cf4:	10800044 	addi	r2,r2,1
 8001cf8:	45000015 	stw	r20,0(r8)
 8001cfc:	45400115 	stw	r21,4(r8)
 8001d00:	d8c02015 	stw	r3,128(sp)
 8001d04:	d8801f15 	stw	r2,124(sp)
 8001d08:	90bff60e 	bge	r18,r2,8001ce4 <___vfprintf_internal_r+0xf88>
 8001d0c:	b809883a 	mov	r4,r23
 8001d10:	b00b883a 	mov	r5,r22
 8001d14:	d9801e04 	addi	r6,sp,120
 8001d18:	80077340 	call	8007734 <__sprint_r>
 8001d1c:	103d041e 	bne	r2,zero,8001130 <___vfprintf_internal_r+0x3d4>
 8001d20:	9cfffc04 	addi	r19,r19,-16
 8001d24:	d8c02017 	ldw	r3,128(sp)
 8001d28:	d8801f17 	ldw	r2,124(sp)
 8001d2c:	da000404 	addi	r8,sp,16
 8001d30:	acffef16 	blt	r21,r19,8001cf0 <___vfprintf_internal_r+0xf94>
 8001d34:	d9002c17 	ldw	r4,176(sp)
 8001d38:	1cc7883a 	add	r3,r3,r19
 8001d3c:	10800044 	addi	r2,r2,1
 8001d40:	41000015 	stw	r4,0(r8)
 8001d44:	44c00115 	stw	r19,4(r8)
 8001d48:	d8c02015 	stw	r3,128(sp)
 8001d4c:	d8801f15 	stw	r2,124(sp)
 8001d50:	010001c4 	movi	r4,7
 8001d54:	20817816 	blt	r4,r2,8002338 <___vfprintf_internal_r+0x15dc>
 8001d58:	42000204 	addi	r8,r8,8
 8001d5c:	003db906 	br	8001444 <___vfprintf_internal_r+0x6e8>
 8001d60:	d9403317 	ldw	r5,204(sp)
 8001d64:	00800044 	movi	r2,1
 8001d68:	18c00044 	addi	r3,r3,1
 8001d6c:	11413e0e 	bge	r2,r5,8002268 <___vfprintf_internal_r+0x150c>
 8001d70:	dc001f17 	ldw	r16,124(sp)
 8001d74:	d8803117 	ldw	r2,196(sp)
 8001d78:	d8c02015 	stw	r3,128(sp)
 8001d7c:	84000044 	addi	r16,r16,1
 8001d80:	40800015 	stw	r2,0(r8)
 8001d84:	00800044 	movi	r2,1
 8001d88:	40800115 	stw	r2,4(r8)
 8001d8c:	dc001f15 	stw	r16,124(sp)
 8001d90:	008001c4 	movi	r2,7
 8001d94:	14015616 	blt	r2,r16,80022f0 <___vfprintf_internal_r+0x1594>
 8001d98:	42000204 	addi	r8,r8,8
 8001d9c:	d9003817 	ldw	r4,224(sp)
 8001da0:	d9403517 	ldw	r5,212(sp)
 8001da4:	84000044 	addi	r16,r16,1
 8001da8:	1907883a 	add	r3,r3,r4
 8001dac:	41400015 	stw	r5,0(r8)
 8001db0:	41000115 	stw	r4,4(r8)
 8001db4:	d8c02015 	stw	r3,128(sp)
 8001db8:	dc001f15 	stw	r16,124(sp)
 8001dbc:	008001c4 	movi	r2,7
 8001dc0:	14015416 	blt	r2,r16,8002314 <___vfprintf_internal_r+0x15b8>
 8001dc4:	44400204 	addi	r17,r8,8
 8001dc8:	d9003717 	ldw	r4,220(sp)
 8001dcc:	d9403917 	ldw	r5,228(sp)
 8001dd0:	000d883a 	mov	r6,zero
 8001dd4:	000f883a 	mov	r7,zero
 8001dd8:	d8c03d15 	stw	r3,244(sp)
 8001ddc:	800bf5c0 	call	800bf5c <__eqdf2>
 8001de0:	d8c03d17 	ldw	r3,244(sp)
 8001de4:	1000aa26 	beq	r2,zero,8002090 <___vfprintf_internal_r+0x1334>
 8001de8:	d9003317 	ldw	r4,204(sp)
 8001dec:	d9403117 	ldw	r5,196(sp)
 8001df0:	84000044 	addi	r16,r16,1
 8001df4:	20bfffc4 	addi	r2,r4,-1
 8001df8:	1887883a 	add	r3,r3,r2
 8001dfc:	29000044 	addi	r4,r5,1
 8001e00:	88800115 	stw	r2,4(r17)
 8001e04:	89000015 	stw	r4,0(r17)
 8001e08:	d8c02015 	stw	r3,128(sp)
 8001e0c:	dc001f15 	stw	r16,124(sp)
 8001e10:	008001c4 	movi	r2,7
 8001e14:	14012d16 	blt	r2,r16,80022cc <___vfprintf_internal_r+0x1570>
 8001e18:	8c400204 	addi	r17,r17,8
 8001e1c:	d9403a17 	ldw	r5,232(sp)
 8001e20:	dcc022c4 	addi	r19,sp,139
 8001e24:	84000044 	addi	r16,r16,1
 8001e28:	1947883a 	add	r3,r3,r5
 8001e2c:	8cc00015 	stw	r19,0(r17)
 8001e30:	89400115 	stw	r5,4(r17)
 8001e34:	d8c02015 	stw	r3,128(sp)
 8001e38:	dc001f15 	stw	r16,124(sp)
 8001e3c:	008001c4 	movi	r2,7
 8001e40:	14000e16 	blt	r2,r16,8001e7c <___vfprintf_internal_r+0x1120>
 8001e44:	8a000204 	addi	r8,r17,8
 8001e48:	003db406 	br	800151c <___vfprintf_internal_r+0x7c0>
 8001e4c:	01020074 	movhi	r4,2049
 8001e50:	21001684 	addi	r4,r4,90
 8001e54:	d9002c15 	stw	r4,176(sp)
 8001e58:	d9002c17 	ldw	r4,176(sp)
 8001e5c:	1c07883a 	add	r3,r3,r16
 8001e60:	44000115 	stw	r16,4(r8)
 8001e64:	41000015 	stw	r4,0(r8)
 8001e68:	10800044 	addi	r2,r2,1
 8001e6c:	d8c02015 	stw	r3,128(sp)
 8001e70:	d8801f15 	stw	r2,124(sp)
 8001e74:	010001c4 	movi	r4,7
 8001e78:	20bda70e 	bge	r4,r2,8001518 <___vfprintf_internal_r+0x7bc>
 8001e7c:	b809883a 	mov	r4,r23
 8001e80:	b00b883a 	mov	r5,r22
 8001e84:	d9801e04 	addi	r6,sp,120
 8001e88:	80077340 	call	8007734 <__sprint_r>
 8001e8c:	103ca81e 	bne	r2,zero,8001130 <___vfprintf_internal_r+0x3d4>
 8001e90:	d8c02017 	ldw	r3,128(sp)
 8001e94:	da000404 	addi	r8,sp,16
 8001e98:	003da006 	br	800151c <___vfprintf_internal_r+0x7c0>
 8001e9c:	b809883a 	mov	r4,r23
 8001ea0:	b00b883a 	mov	r5,r22
 8001ea4:	d9801e04 	addi	r6,sp,120
 8001ea8:	80077340 	call	8007734 <__sprint_r>
 8001eac:	103dd626 	beq	r2,zero,8001608 <___vfprintf_internal_r+0x8ac>
 8001eb0:	003c9f06 	br	8001130 <___vfprintf_internal_r+0x3d4>
 8001eb4:	10803fcc 	andi	r2,r2,255
 8001eb8:	1000201e 	bne	r2,zero,8001f3c <___vfprintf_internal_r+0x11e0>
 8001ebc:	e080004c 	andi	r2,fp,1
 8001ec0:	10001e26 	beq	r2,zero,8001f3c <___vfprintf_internal_r+0x11e0>
 8001ec4:	00800c04 	movi	r2,48
 8001ec8:	d8c01dc4 	addi	r3,sp,119
 8001ecc:	d8801dc5 	stb	r2,119(sp)
 8001ed0:	dc403c17 	ldw	r17,240(sp)
 8001ed4:	d8c03115 	stw	r3,196(sp)
 8001ed8:	003cf806 	br	80012bc <___vfprintf_internal_r+0x560>
 8001edc:	b809883a 	mov	r4,r23
 8001ee0:	b00b883a 	mov	r5,r22
 8001ee4:	d9801e04 	addi	r6,sp,120
 8001ee8:	80077340 	call	8007734 <__sprint_r>
 8001eec:	103c901e 	bne	r2,zero,8001130 <___vfprintf_internal_r+0x3d4>
 8001ef0:	d8c02017 	ldw	r3,128(sp)
 8001ef4:	da000404 	addi	r8,sp,16
 8001ef8:	003d7b06 	br	80014e8 <___vfprintf_internal_r+0x78c>
 8001efc:	b809883a 	mov	r4,r23
 8001f00:	b00b883a 	mov	r5,r22
 8001f04:	d9801e04 	addi	r6,sp,120
 8001f08:	80077340 	call	8007734 <__sprint_r>
 8001f0c:	103c881e 	bne	r2,zero,8001130 <___vfprintf_internal_r+0x3d4>
 8001f10:	d8c02017 	ldw	r3,128(sp)
 8001f14:	da000404 	addi	r8,sp,16
 8001f18:	003d3906 	br	8001400 <___vfprintf_internal_r+0x6a4>
 8001f1c:	b809883a 	mov	r4,r23
 8001f20:	b00b883a 	mov	r5,r22
 8001f24:	d9801e04 	addi	r6,sp,120
 8001f28:	80077340 	call	8007734 <__sprint_r>
 8001f2c:	103c801e 	bne	r2,zero,8001130 <___vfprintf_internal_r+0x3d4>
 8001f30:	d8c02017 	ldw	r3,128(sp)
 8001f34:	da000404 	addi	r8,sp,16
 8001f38:	003d3f06 	br	8001438 <___vfprintf_internal_r+0x6dc>
 8001f3c:	d8c01e04 	addi	r3,sp,120
 8001f40:	0023883a 	mov	r17,zero
 8001f44:	d8c03115 	stw	r3,196(sp)
 8001f48:	003cdc06 	br	80012bc <___vfprintf_internal_r+0x560>
 8001f4c:	d9403b17 	ldw	r5,236(sp)
 8001f50:	d8c01e04 	addi	r3,sp,120
 8001f54:	908003cc 	andi	r2,r18,15
 8001f58:	a808973a 	slli	r4,r21,28
 8001f5c:	2885883a 	add	r2,r5,r2
 8001f60:	9024d13a 	srli	r18,r18,4
 8001f64:	10800003 	ldbu	r2,0(r2)
 8001f68:	a82ad13a 	srli	r21,r21,4
 8001f6c:	18ffffc4 	addi	r3,r3,-1
 8001f70:	24a4b03a 	or	r18,r4,r18
 8001f74:	18800005 	stb	r2,0(r3)
 8001f78:	9544b03a 	or	r2,r18,r21
 8001f7c:	103ff51e 	bne	r2,zero,8001f54 <___vfprintf_internal_r+0x11f8>
 8001f80:	d9402817 	ldw	r5,160(sp)
 8001f84:	d8c03115 	stw	r3,196(sp)
 8001f88:	28e3c83a 	sub	r17,r5,r3
 8001f8c:	003ccb06 	br	80012bc <___vfprintf_internal_r+0x560>
 8001f90:	dc002617 	ldw	r16,152(sp)
 8001f94:	0401ab0e 	bge	zero,r16,8002644 <___vfprintf_internal_r+0x18e8>
 8001f98:	d8803317 	ldw	r2,204(sp)
 8001f9c:	d9403117 	ldw	r5,196(sp)
 8001fa0:	d9003417 	ldw	r4,208(sp)
 8001fa4:	1023883a 	mov	r17,r2
 8001fa8:	28a1883a 	add	r16,r5,r2
 8001fac:	2080010e 	bge	r4,r2,8001fb4 <___vfprintf_internal_r+0x1258>
 8001fb0:	2023883a 	mov	r17,r4
 8001fb4:	04400b0e 	bge	zero,r17,8001fe4 <___vfprintf_internal_r+0x1288>
 8001fb8:	d8801f17 	ldw	r2,124(sp)
 8001fbc:	d9403117 	ldw	r5,196(sp)
 8001fc0:	1c47883a 	add	r3,r3,r17
 8001fc4:	10800044 	addi	r2,r2,1
 8001fc8:	41400015 	stw	r5,0(r8)
 8001fcc:	44400115 	stw	r17,4(r8)
 8001fd0:	d8c02015 	stw	r3,128(sp)
 8001fd4:	d8801f15 	stw	r2,124(sp)
 8001fd8:	010001c4 	movi	r4,7
 8001fdc:	20826716 	blt	r4,r2,800297c <___vfprintf_internal_r+0x1c20>
 8001fe0:	42000204 	addi	r8,r8,8
 8001fe4:	88026316 	blt	r17,zero,8002974 <___vfprintf_internal_r+0x1c18>
 8001fe8:	d8803417 	ldw	r2,208(sp)
 8001fec:	1463c83a 	sub	r17,r2,r17
 8001ff0:	0440590e 	bge	zero,r17,8002158 <___vfprintf_internal_r+0x13fc>
 8001ff4:	04c00404 	movi	r19,16
 8001ff8:	d8801f17 	ldw	r2,124(sp)
 8001ffc:	9c41770e 	bge	r19,r17,80025dc <___vfprintf_internal_r+0x1880>
 8002000:	01420074 	movhi	r5,2049
 8002004:	29401684 	addi	r5,r5,90
 8002008:	d9402c15 	stw	r5,176(sp)
 800200c:	054001c4 	movi	r21,7
 8002010:	00000306 	br	8002020 <___vfprintf_internal_r+0x12c4>
 8002014:	42000204 	addi	r8,r8,8
 8002018:	8c7ffc04 	addi	r17,r17,-16
 800201c:	9c41720e 	bge	r19,r17,80025e8 <___vfprintf_internal_r+0x188c>
 8002020:	18c00404 	addi	r3,r3,16
 8002024:	10800044 	addi	r2,r2,1
 8002028:	45000015 	stw	r20,0(r8)
 800202c:	44c00115 	stw	r19,4(r8)
 8002030:	d8c02015 	stw	r3,128(sp)
 8002034:	d8801f15 	stw	r2,124(sp)
 8002038:	a8bff60e 	bge	r21,r2,8002014 <___vfprintf_internal_r+0x12b8>
 800203c:	b809883a 	mov	r4,r23
 8002040:	b00b883a 	mov	r5,r22
 8002044:	d9801e04 	addi	r6,sp,120
 8002048:	80077340 	call	8007734 <__sprint_r>
 800204c:	103c381e 	bne	r2,zero,8001130 <___vfprintf_internal_r+0x3d4>
 8002050:	d8c02017 	ldw	r3,128(sp)
 8002054:	d8801f17 	ldw	r2,124(sp)
 8002058:	da000404 	addi	r8,sp,16
 800205c:	003fee06 	br	8002018 <___vfprintf_internal_r+0x12bc>
 8002060:	b809883a 	mov	r4,r23
 8002064:	b00b883a 	mov	r5,r22
 8002068:	d9801e04 	addi	r6,sp,120
 800206c:	80077340 	call	8007734 <__sprint_r>
 8002070:	103c2f1e 	bne	r2,zero,8001130 <___vfprintf_internal_r+0x3d4>
 8002074:	d8c02017 	ldw	r3,128(sp)
 8002078:	d8802787 	ldb	r2,158(sp)
 800207c:	da000404 	addi	r8,sp,16
 8002080:	003cd206 	br	80013cc <___vfprintf_internal_r+0x670>
 8002084:	00800084 	movi	r2,2
 8002088:	9546b03a 	or	r3,r18,r21
 800208c:	003d9f06 	br	800170c <___vfprintf_internal_r+0x9b0>
 8002090:	d8803317 	ldw	r2,204(sp)
 8002094:	14ffffc4 	addi	r19,r2,-1
 8002098:	04ff600e 	bge	zero,r19,8001e1c <___vfprintf_internal_r+0x10c0>
 800209c:	05400404 	movi	r21,16
 80020a0:	acc07e0e 	bge	r21,r19,800229c <___vfprintf_internal_r+0x1540>
 80020a4:	01420074 	movhi	r5,2049
 80020a8:	29401684 	addi	r5,r5,90
 80020ac:	d9402c15 	stw	r5,176(sp)
 80020b0:	01c001c4 	movi	r7,7
 80020b4:	00000306 	br	80020c4 <___vfprintf_internal_r+0x1368>
 80020b8:	8c400204 	addi	r17,r17,8
 80020bc:	9cfffc04 	addi	r19,r19,-16
 80020c0:	acc0790e 	bge	r21,r19,80022a8 <___vfprintf_internal_r+0x154c>
 80020c4:	18c00404 	addi	r3,r3,16
 80020c8:	84000044 	addi	r16,r16,1
 80020cc:	8d000015 	stw	r20,0(r17)
 80020d0:	8d400115 	stw	r21,4(r17)
 80020d4:	d8c02015 	stw	r3,128(sp)
 80020d8:	dc001f15 	stw	r16,124(sp)
 80020dc:	3c3ff60e 	bge	r7,r16,80020b8 <___vfprintf_internal_r+0x135c>
 80020e0:	b809883a 	mov	r4,r23
 80020e4:	b00b883a 	mov	r5,r22
 80020e8:	d9801e04 	addi	r6,sp,120
 80020ec:	d9c03d15 	stw	r7,244(sp)
 80020f0:	80077340 	call	8007734 <__sprint_r>
 80020f4:	d9c03d17 	ldw	r7,244(sp)
 80020f8:	103c0d1e 	bne	r2,zero,8001130 <___vfprintf_internal_r+0x3d4>
 80020fc:	d8c02017 	ldw	r3,128(sp)
 8002100:	dc001f17 	ldw	r16,124(sp)
 8002104:	dc400404 	addi	r17,sp,16
 8002108:	003fec06 	br	80020bc <___vfprintf_internal_r+0x1360>
 800210c:	10803fcc 	andi	r2,r2,255
 8002110:	1080201c 	xori	r2,r2,128
 8002114:	10bfe004 	addi	r2,r2,-128
 8002118:	01000c04 	movi	r4,48
 800211c:	1101d726 	beq	r2,r4,800287c <___vfprintf_internal_r+0x1b20>
 8002120:	d9403117 	ldw	r5,196(sp)
 8002124:	d8802817 	ldw	r2,160(sp)
 8002128:	193fffc5 	stb	r4,-1(r3)
 800212c:	297fffc4 	addi	r5,r5,-1
 8002130:	d9403115 	stw	r5,196(sp)
 8002134:	1163c83a 	sub	r17,r2,r5
 8002138:	003c6006 	br	80012bc <___vfprintf_internal_r+0x560>
 800213c:	b809883a 	mov	r4,r23
 8002140:	b00b883a 	mov	r5,r22
 8002144:	d9801e04 	addi	r6,sp,120
 8002148:	80077340 	call	8007734 <__sprint_r>
 800214c:	103bf81e 	bne	r2,zero,8001130 <___vfprintf_internal_r+0x3d4>
 8002150:	d8c02017 	ldw	r3,128(sp)
 8002154:	da000404 	addi	r8,sp,16
 8002158:	d9403117 	ldw	r5,196(sp)
 800215c:	d9003417 	ldw	r4,208(sp)
 8002160:	d8802617 	ldw	r2,152(sp)
 8002164:	2923883a 	add	r17,r5,r4
 8002168:	d9403317 	ldw	r5,204(sp)
 800216c:	11400216 	blt	r2,r5,8002178 <___vfprintf_internal_r+0x141c>
 8002170:	e100004c 	andi	r4,fp,1
 8002174:	20000d26 	beq	r4,zero,80021ac <___vfprintf_internal_r+0x1450>
 8002178:	d9003817 	ldw	r4,224(sp)
 800217c:	d9403517 	ldw	r5,212(sp)
 8002180:	1907883a 	add	r3,r3,r4
 8002184:	d9001f17 	ldw	r4,124(sp)
 8002188:	41400015 	stw	r5,0(r8)
 800218c:	d9403817 	ldw	r5,224(sp)
 8002190:	21000044 	addi	r4,r4,1
 8002194:	d8c02015 	stw	r3,128(sp)
 8002198:	41400115 	stw	r5,4(r8)
 800219c:	d9001f15 	stw	r4,124(sp)
 80021a0:	014001c4 	movi	r5,7
 80021a4:	2901fd16 	blt	r5,r4,800299c <___vfprintf_internal_r+0x1c40>
 80021a8:	42000204 	addi	r8,r8,8
 80021ac:	d9003317 	ldw	r4,204(sp)
 80021b0:	2085c83a 	sub	r2,r4,r2
 80021b4:	8449c83a 	sub	r4,r16,r17
 80021b8:	1021883a 	mov	r16,r2
 80021bc:	2080010e 	bge	r4,r2,80021c4 <___vfprintf_internal_r+0x1468>
 80021c0:	2021883a 	mov	r16,r4
 80021c4:	04000a0e 	bge	zero,r16,80021f0 <___vfprintf_internal_r+0x1494>
 80021c8:	d9001f17 	ldw	r4,124(sp)
 80021cc:	1c07883a 	add	r3,r3,r16
 80021d0:	44400015 	stw	r17,0(r8)
 80021d4:	21000044 	addi	r4,r4,1
 80021d8:	44000115 	stw	r16,4(r8)
 80021dc:	d8c02015 	stw	r3,128(sp)
 80021e0:	d9001f15 	stw	r4,124(sp)
 80021e4:	014001c4 	movi	r5,7
 80021e8:	29021816 	blt	r5,r4,8002a4c <___vfprintf_internal_r+0x1cf0>
 80021ec:	42000204 	addi	r8,r8,8
 80021f0:	80021016 	blt	r16,zero,8002a34 <___vfprintf_internal_r+0x1cd8>
 80021f4:	1421c83a 	sub	r16,r2,r16
 80021f8:	043cc80e 	bge	zero,r16,800151c <___vfprintf_internal_r+0x7c0>
 80021fc:	04400404 	movi	r17,16
 8002200:	d8801f17 	ldw	r2,124(sp)
 8002204:	8c3f110e 	bge	r17,r16,8001e4c <___vfprintf_internal_r+0x10f0>
 8002208:	01420074 	movhi	r5,2049
 800220c:	29401684 	addi	r5,r5,90
 8002210:	d9402c15 	stw	r5,176(sp)
 8002214:	04c001c4 	movi	r19,7
 8002218:	00000306 	br	8002228 <___vfprintf_internal_r+0x14cc>
 800221c:	42000204 	addi	r8,r8,8
 8002220:	843ffc04 	addi	r16,r16,-16
 8002224:	8c3f0c0e 	bge	r17,r16,8001e58 <___vfprintf_internal_r+0x10fc>
 8002228:	18c00404 	addi	r3,r3,16
 800222c:	10800044 	addi	r2,r2,1
 8002230:	45000015 	stw	r20,0(r8)
 8002234:	44400115 	stw	r17,4(r8)
 8002238:	d8c02015 	stw	r3,128(sp)
 800223c:	d8801f15 	stw	r2,124(sp)
 8002240:	98bff60e 	bge	r19,r2,800221c <___vfprintf_internal_r+0x14c0>
 8002244:	b809883a 	mov	r4,r23
 8002248:	b00b883a 	mov	r5,r22
 800224c:	d9801e04 	addi	r6,sp,120
 8002250:	80077340 	call	8007734 <__sprint_r>
 8002254:	103bb61e 	bne	r2,zero,8001130 <___vfprintf_internal_r+0x3d4>
 8002258:	d8c02017 	ldw	r3,128(sp)
 800225c:	d8801f17 	ldw	r2,124(sp)
 8002260:	da000404 	addi	r8,sp,16
 8002264:	003fee06 	br	8002220 <___vfprintf_internal_r+0x14c4>
 8002268:	e088703a 	and	r4,fp,r2
 800226c:	203ec01e 	bne	r4,zero,8001d70 <___vfprintf_internal_r+0x1014>
 8002270:	dc001f17 	ldw	r16,124(sp)
 8002274:	d9003117 	ldw	r4,196(sp)
 8002278:	40800115 	stw	r2,4(r8)
 800227c:	84000044 	addi	r16,r16,1
 8002280:	41000015 	stw	r4,0(r8)
 8002284:	d8c02015 	stw	r3,128(sp)
 8002288:	dc001f15 	stw	r16,124(sp)
 800228c:	008001c4 	movi	r2,7
 8002290:	14000e16 	blt	r2,r16,80022cc <___vfprintf_internal_r+0x1570>
 8002294:	44400204 	addi	r17,r8,8
 8002298:	003ee006 	br	8001e1c <___vfprintf_internal_r+0x10c0>
 800229c:	01020074 	movhi	r4,2049
 80022a0:	21001684 	addi	r4,r4,90
 80022a4:	d9002c15 	stw	r4,176(sp)
 80022a8:	d8802c17 	ldw	r2,176(sp)
 80022ac:	1cc7883a 	add	r3,r3,r19
 80022b0:	84000044 	addi	r16,r16,1
 80022b4:	88800015 	stw	r2,0(r17)
 80022b8:	8cc00115 	stw	r19,4(r17)
 80022bc:	d8c02015 	stw	r3,128(sp)
 80022c0:	dc001f15 	stw	r16,124(sp)
 80022c4:	008001c4 	movi	r2,7
 80022c8:	143ed30e 	bge	r2,r16,8001e18 <___vfprintf_internal_r+0x10bc>
 80022cc:	b809883a 	mov	r4,r23
 80022d0:	b00b883a 	mov	r5,r22
 80022d4:	d9801e04 	addi	r6,sp,120
 80022d8:	80077340 	call	8007734 <__sprint_r>
 80022dc:	103b941e 	bne	r2,zero,8001130 <___vfprintf_internal_r+0x3d4>
 80022e0:	d8c02017 	ldw	r3,128(sp)
 80022e4:	dc001f17 	ldw	r16,124(sp)
 80022e8:	dc400404 	addi	r17,sp,16
 80022ec:	003ecb06 	br	8001e1c <___vfprintf_internal_r+0x10c0>
 80022f0:	b809883a 	mov	r4,r23
 80022f4:	b00b883a 	mov	r5,r22
 80022f8:	d9801e04 	addi	r6,sp,120
 80022fc:	80077340 	call	8007734 <__sprint_r>
 8002300:	103b8b1e 	bne	r2,zero,8001130 <___vfprintf_internal_r+0x3d4>
 8002304:	d8c02017 	ldw	r3,128(sp)
 8002308:	dc001f17 	ldw	r16,124(sp)
 800230c:	da000404 	addi	r8,sp,16
 8002310:	003ea206 	br	8001d9c <___vfprintf_internal_r+0x1040>
 8002314:	b809883a 	mov	r4,r23
 8002318:	b00b883a 	mov	r5,r22
 800231c:	d9801e04 	addi	r6,sp,120
 8002320:	80077340 	call	8007734 <__sprint_r>
 8002324:	103b821e 	bne	r2,zero,8001130 <___vfprintf_internal_r+0x3d4>
 8002328:	d8c02017 	ldw	r3,128(sp)
 800232c:	dc001f17 	ldw	r16,124(sp)
 8002330:	dc400404 	addi	r17,sp,16
 8002334:	003ea406 	br	8001dc8 <___vfprintf_internal_r+0x106c>
 8002338:	b809883a 	mov	r4,r23
 800233c:	b00b883a 	mov	r5,r22
 8002340:	d9801e04 	addi	r6,sp,120
 8002344:	80077340 	call	8007734 <__sprint_r>
 8002348:	103b791e 	bne	r2,zero,8001130 <___vfprintf_internal_r+0x3d4>
 800234c:	d8c02017 	ldw	r3,128(sp)
 8002350:	da000404 	addi	r8,sp,16
 8002354:	003c3b06 	br	8001444 <___vfprintf_internal_r+0x6e8>
 8002358:	04a5c83a 	sub	r18,zero,r18
 800235c:	9004c03a 	cmpne	r2,r18,zero
 8002360:	056bc83a 	sub	r21,zero,r21
 8002364:	a8abc83a 	sub	r21,r21,r2
 8002368:	04c00b44 	movi	r19,45
 800236c:	dcc02785 	stb	r19,158(sp)
 8002370:	da403215 	stw	r9,200(sp)
 8002374:	00800044 	movi	r2,1
 8002378:	9546b03a 	or	r3,r18,r21
 800237c:	003bb506 	br	8001254 <___vfprintf_internal_r+0x4f8>
 8002380:	da003f15 	stw	r8,252(sp)
 8002384:	da403e15 	stw	r9,248(sp)
 8002388:	80072f80 	call	80072f8 <__fpclassifyd>
 800238c:	da003f17 	ldw	r8,252(sp)
 8002390:	da403e17 	ldw	r9,248(sp)
 8002394:	1000e526 	beq	r2,zero,800272c <___vfprintf_internal_r+0x19d0>
 8002398:	04fff7c4 	movi	r19,-33
 800239c:	00bfffc4 	movi	r2,-1
 80023a0:	84e6703a 	and	r19,r16,r19
 80023a4:	48822526 	beq	r9,r2,8002c3c <___vfprintf_internal_r+0x1ee0>
 80023a8:	008011c4 	movi	r2,71
 80023ac:	98821626 	beq	r19,r2,8002c08 <___vfprintf_internal_r+0x1eac>
 80023b0:	d9003917 	ldw	r4,228(sp)
 80023b4:	e0c04014 	ori	r3,fp,256
 80023b8:	d8c02d15 	stw	r3,180(sp)
 80023bc:	20022116 	blt	r4,zero,8002c44 <___vfprintf_internal_r+0x1ee8>
 80023c0:	dc403917 	ldw	r17,228(sp)
 80023c4:	d8002b05 	stb	zero,172(sp)
 80023c8:	00801984 	movi	r2,102
 80023cc:	80814d26 	beq	r16,r2,8002904 <___vfprintf_internal_r+0x1ba8>
 80023d0:	00801184 	movi	r2,70
 80023d4:	80814b26 	beq	r16,r2,8002904 <___vfprintf_internal_r+0x1ba8>
 80023d8:	00801144 	movi	r2,69
 80023dc:	98822626 	beq	r19,r2,8002c78 <___vfprintf_internal_r+0x1f1c>
 80023e0:	482b883a 	mov	r21,r9
 80023e4:	d8802604 	addi	r2,sp,152
 80023e8:	d8800115 	stw	r2,4(sp)
 80023ec:	d9403717 	ldw	r5,220(sp)
 80023f0:	d8802504 	addi	r2,sp,148
 80023f4:	d8800215 	stw	r2,8(sp)
 80023f8:	d8802104 	addi	r2,sp,132
 80023fc:	dd400015 	stw	r21,0(sp)
 8002400:	d8800315 	stw	r2,12(sp)
 8002404:	b809883a 	mov	r4,r23
 8002408:	880d883a 	mov	r6,r17
 800240c:	01c00084 	movi	r7,2
 8002410:	da003f15 	stw	r8,252(sp)
 8002414:	da403e15 	stw	r9,248(sp)
 8002418:	80032100 	call	8003210 <_dtoa_r>
 800241c:	d8803115 	stw	r2,196(sp)
 8002420:	008019c4 	movi	r2,103
 8002424:	da003f17 	ldw	r8,252(sp)
 8002428:	da403e17 	ldw	r9,248(sp)
 800242c:	80800226 	beq	r16,r2,8002438 <___vfprintf_internal_r+0x16dc>
 8002430:	008011c4 	movi	r2,71
 8002434:	8081451e 	bne	r16,r2,800294c <___vfprintf_internal_r+0x1bf0>
 8002438:	e080004c 	andi	r2,fp,1
 800243c:	10021e26 	beq	r2,zero,8002cb8 <___vfprintf_internal_r+0x1f5c>
 8002440:	d8c03117 	ldw	r3,196(sp)
 8002444:	1d55883a 	add	r10,r3,r21
 8002448:	d9003717 	ldw	r4,220(sp)
 800244c:	880b883a 	mov	r5,r17
 8002450:	000d883a 	mov	r6,zero
 8002454:	000f883a 	mov	r7,zero
 8002458:	da003f15 	stw	r8,252(sp)
 800245c:	da403e15 	stw	r9,248(sp)
 8002460:	da803d15 	stw	r10,244(sp)
 8002464:	800bf5c0 	call	800bf5c <__eqdf2>
 8002468:	da003f17 	ldw	r8,252(sp)
 800246c:	da403e17 	ldw	r9,248(sp)
 8002470:	da803d17 	ldw	r10,244(sp)
 8002474:	1001a126 	beq	r2,zero,8002afc <___vfprintf_internal_r+0x1da0>
 8002478:	d8802117 	ldw	r2,132(sp)
 800247c:	1280062e 	bgeu	r2,r10,8002498 <___vfprintf_internal_r+0x173c>
 8002480:	01000c04 	movi	r4,48
 8002484:	10c00044 	addi	r3,r2,1
 8002488:	d8c02115 	stw	r3,132(sp)
 800248c:	11000005 	stb	r4,0(r2)
 8002490:	d8802117 	ldw	r2,132(sp)
 8002494:	12bffb36 	bltu	r2,r10,8002484 <___vfprintf_internal_r+0x1728>
 8002498:	d8c03117 	ldw	r3,196(sp)
 800249c:	10c5c83a 	sub	r2,r2,r3
 80024a0:	d8803315 	stw	r2,204(sp)
 80024a4:	008011c4 	movi	r2,71
 80024a8:	98817f26 	beq	r19,r2,8002aa8 <___vfprintf_internal_r+0x1d4c>
 80024ac:	00801944 	movi	r2,101
 80024b0:	14023e0e 	bge	r2,r16,8002dac <___vfprintf_internal_r+0x2050>
 80024b4:	d8c02617 	ldw	r3,152(sp)
 80024b8:	00801984 	movi	r2,102
 80024bc:	d8c03415 	stw	r3,208(sp)
 80024c0:	8081f326 	beq	r16,r2,8002c90 <___vfprintf_internal_r+0x1f34>
 80024c4:	d8c03417 	ldw	r3,208(sp)
 80024c8:	d9003317 	ldw	r4,204(sp)
 80024cc:	1901e116 	blt	r3,r4,8002c54 <___vfprintf_internal_r+0x1ef8>
 80024d0:	e080004c 	andi	r2,fp,1
 80024d4:	1001ea26 	beq	r2,zero,8002c80 <___vfprintf_internal_r+0x1f24>
 80024d8:	d8c03417 	ldw	r3,208(sp)
 80024dc:	1c400044 	addi	r17,r3,1
 80024e0:	8839883a 	mov	fp,r17
 80024e4:	8801e216 	blt	r17,zero,8002c70 <___vfprintf_internal_r+0x1f14>
 80024e8:	dd402b07 	ldb	r21,172(sp)
 80024ec:	a801661e 	bne	r21,zero,8002a88 <___vfprintf_internal_r+0x1d2c>
 80024f0:	df002b15 	stw	fp,172(sp)
 80024f4:	dcc02783 	ldbu	r19,158(sp)
 80024f8:	df002d17 	ldw	fp,180(sp)
 80024fc:	d8003215 	stw	zero,200(sp)
 8002500:	dc802d15 	stw	r18,180(sp)
 8002504:	003b7206 	br	80012d0 <___vfprintf_internal_r+0x574>
 8002508:	e4000007 	ldb	r16,0(fp)
 800250c:	e005883a 	mov	r2,fp
 8002510:	003a7806 	br	8000ef4 <___vfprintf_internal_r+0x198>
 8002514:	e0c0100c 	andi	r3,fp,64
 8002518:	1800b326 	beq	r3,zero,80027e8 <___vfprintf_internal_r+0x1a8c>
 800251c:	d9002d17 	ldw	r4,180(sp)
 8002520:	1480000b 	ldhu	r18,0(r2)
 8002524:	002b883a 	mov	r21,zero
 8002528:	21000104 	addi	r4,r4,4
 800252c:	d9002d15 	stw	r4,180(sp)
 8002530:	003cd506 	br	8001888 <___vfprintf_internal_r+0xb2c>
 8002534:	e080100c 	andi	r2,fp,64
 8002538:	1000a326 	beq	r2,zero,80027c8 <___vfprintf_internal_r+0x1a6c>
 800253c:	d8802d17 	ldw	r2,180(sp)
 8002540:	002b883a 	mov	r21,zero
 8002544:	1480000b 	ldhu	r18,0(r2)
 8002548:	10800104 	addi	r2,r2,4
 800254c:	d8802d15 	stw	r2,180(sp)
 8002550:	9007883a 	mov	r3,r18
 8002554:	00800044 	movi	r2,1
 8002558:	003c6c06 	br	800170c <___vfprintf_internal_r+0x9b0>
 800255c:	e080100c 	andi	r2,fp,64
 8002560:	10009226 	beq	r2,zero,80027ac <___vfprintf_internal_r+0x1a50>
 8002564:	1c80000f 	ldh	r18,0(r3)
 8002568:	d8802d17 	ldw	r2,180(sp)
 800256c:	902bd7fa 	srai	r21,r18,31
 8002570:	10800104 	addi	r2,r2,4
 8002574:	d8802d15 	stw	r2,180(sp)
 8002578:	a805883a 	mov	r2,r21
 800257c:	003b3006 	br	8001240 <___vfprintf_internal_r+0x4e4>
 8002580:	e080100c 	andi	r2,fp,64
 8002584:	10008126 	beq	r2,zero,800278c <___vfprintf_internal_r+0x1a30>
 8002588:	d8c02d17 	ldw	r3,180(sp)
 800258c:	002b883a 	mov	r21,zero
 8002590:	0005883a 	mov	r2,zero
 8002594:	1c80000b 	ldhu	r18,0(r3)
 8002598:	18c00104 	addi	r3,r3,4
 800259c:	d8c02d15 	stw	r3,180(sp)
 80025a0:	9007883a 	mov	r3,r18
 80025a4:	003c5906 	br	800170c <___vfprintf_internal_r+0x9b0>
 80025a8:	e080040c 	andi	r2,fp,16
 80025ac:	1000701e 	bne	r2,zero,8002770 <___vfprintf_internal_r+0x1a14>
 80025b0:	e080100c 	andi	r2,fp,64
 80025b4:	10014626 	beq	r2,zero,8002ad0 <___vfprintf_internal_r+0x1d74>
 80025b8:	d9002d17 	ldw	r4,180(sp)
 80025bc:	d9402f17 	ldw	r5,188(sp)
 80025c0:	20800017 	ldw	r2,0(r4)
 80025c4:	21000104 	addi	r4,r4,4
 80025c8:	d9002d15 	stw	r4,180(sp)
 80025cc:	1140000d 	sth	r5,0(r2)
 80025d0:	003a1d06 	br	8000e48 <___vfprintf_internal_r+0xec>
 80025d4:	00800084 	movi	r2,2
 80025d8:	003c4c06 	br	800170c <___vfprintf_internal_r+0x9b0>
 80025dc:	01020074 	movhi	r4,2049
 80025e0:	21001684 	addi	r4,r4,90
 80025e4:	d9002c15 	stw	r4,176(sp)
 80025e8:	d9002c17 	ldw	r4,176(sp)
 80025ec:	1c47883a 	add	r3,r3,r17
 80025f0:	10800044 	addi	r2,r2,1
 80025f4:	41000015 	stw	r4,0(r8)
 80025f8:	44400115 	stw	r17,4(r8)
 80025fc:	d8c02015 	stw	r3,128(sp)
 8002600:	d8801f15 	stw	r2,124(sp)
 8002604:	010001c4 	movi	r4,7
 8002608:	20becc16 	blt	r4,r2,800213c <___vfprintf_internal_r+0x13e0>
 800260c:	42000204 	addi	r8,r8,8
 8002610:	003ed106 	br	8002158 <___vfprintf_internal_r+0x13fc>
 8002614:	01020074 	movhi	r4,2049
 8002618:	21001684 	addi	r4,r4,90
 800261c:	d9002c15 	stw	r4,176(sp)
 8002620:	003ba706 	br	80014c0 <___vfprintf_internal_r+0x764>
 8002624:	b809883a 	mov	r4,r23
 8002628:	b00b883a 	mov	r5,r22
 800262c:	d9801e04 	addi	r6,sp,120
 8002630:	80077340 	call	8007734 <__sprint_r>
 8002634:	103abe1e 	bne	r2,zero,8001130 <___vfprintf_internal_r+0x3d4>
 8002638:	d8c02017 	ldw	r3,128(sp)
 800263c:	da000404 	addi	r8,sp,16
 8002640:	003d6c06 	br	8001bf4 <___vfprintf_internal_r+0xe98>
 8002644:	d8801f17 	ldw	r2,124(sp)
 8002648:	01420074 	movhi	r5,2049
 800264c:	01000044 	movi	r4,1
 8002650:	18c00044 	addi	r3,r3,1
 8002654:	10800044 	addi	r2,r2,1
 8002658:	29401604 	addi	r5,r5,88
 800265c:	41000115 	stw	r4,4(r8)
 8002660:	41400015 	stw	r5,0(r8)
 8002664:	d8c02015 	stw	r3,128(sp)
 8002668:	d8801f15 	stw	r2,124(sp)
 800266c:	010001c4 	movi	r4,7
 8002670:	20806716 	blt	r4,r2,8002810 <___vfprintf_internal_r+0x1ab4>
 8002674:	42000204 	addi	r8,r8,8
 8002678:	8000041e 	bne	r16,zero,800268c <___vfprintf_internal_r+0x1930>
 800267c:	d8803317 	ldw	r2,204(sp)
 8002680:	1000021e 	bne	r2,zero,800268c <___vfprintf_internal_r+0x1930>
 8002684:	e080004c 	andi	r2,fp,1
 8002688:	103ba426 	beq	r2,zero,800151c <___vfprintf_internal_r+0x7c0>
 800268c:	d9003817 	ldw	r4,224(sp)
 8002690:	d8801f17 	ldw	r2,124(sp)
 8002694:	d9403517 	ldw	r5,212(sp)
 8002698:	1907883a 	add	r3,r3,r4
 800269c:	10800044 	addi	r2,r2,1
 80026a0:	41000115 	stw	r4,4(r8)
 80026a4:	41400015 	stw	r5,0(r8)
 80026a8:	d8c02015 	stw	r3,128(sp)
 80026ac:	d8801f15 	stw	r2,124(sp)
 80026b0:	010001c4 	movi	r4,7
 80026b4:	20815716 	blt	r4,r2,8002c14 <___vfprintf_internal_r+0x1eb8>
 80026b8:	42000204 	addi	r8,r8,8
 80026bc:	0421c83a 	sub	r16,zero,r16
 80026c0:	0400810e 	bge	zero,r16,80028c8 <___vfprintf_internal_r+0x1b6c>
 80026c4:	04400404 	movi	r17,16
 80026c8:	8c00bd0e 	bge	r17,r16,80029c0 <___vfprintf_internal_r+0x1c64>
 80026cc:	01420074 	movhi	r5,2049
 80026d0:	29401684 	addi	r5,r5,90
 80026d4:	d9402c15 	stw	r5,176(sp)
 80026d8:	04c001c4 	movi	r19,7
 80026dc:	00000306 	br	80026ec <___vfprintf_internal_r+0x1990>
 80026e0:	42000204 	addi	r8,r8,8
 80026e4:	843ffc04 	addi	r16,r16,-16
 80026e8:	8c00b80e 	bge	r17,r16,80029cc <___vfprintf_internal_r+0x1c70>
 80026ec:	18c00404 	addi	r3,r3,16
 80026f0:	10800044 	addi	r2,r2,1
 80026f4:	45000015 	stw	r20,0(r8)
 80026f8:	44400115 	stw	r17,4(r8)
 80026fc:	d8c02015 	stw	r3,128(sp)
 8002700:	d8801f15 	stw	r2,124(sp)
 8002704:	98bff60e 	bge	r19,r2,80026e0 <___vfprintf_internal_r+0x1984>
 8002708:	b809883a 	mov	r4,r23
 800270c:	b00b883a 	mov	r5,r22
 8002710:	d9801e04 	addi	r6,sp,120
 8002714:	80077340 	call	8007734 <__sprint_r>
 8002718:	103a851e 	bne	r2,zero,8001130 <___vfprintf_internal_r+0x3d4>
 800271c:	d8c02017 	ldw	r3,128(sp)
 8002720:	d8801f17 	ldw	r2,124(sp)
 8002724:	da000404 	addi	r8,sp,16
 8002728:	003fee06 	br	80026e4 <___vfprintf_internal_r+0x1988>
 800272c:	008011c4 	movi	r2,71
 8002730:	1400d116 	blt	r2,r16,8002a78 <___vfprintf_internal_r+0x1d1c>
 8002734:	01020074 	movhi	r4,2049
 8002738:	21000804 	addi	r4,r4,32
 800273c:	d9003115 	stw	r4,196(sp)
 8002740:	00c000c4 	movi	r3,3
 8002744:	00bfdfc4 	movi	r2,-129
 8002748:	d8c02b15 	stw	r3,172(sp)
 800274c:	e0b8703a 	and	fp,fp,r2
 8002750:	dcc02783 	ldbu	r19,158(sp)
 8002754:	dc802d15 	stw	r18,180(sp)
 8002758:	1823883a 	mov	r17,r3
 800275c:	d8003215 	stw	zero,200(sp)
 8002760:	d8003415 	stw	zero,208(sp)
 8002764:	003ada06 	br	80012d0 <___vfprintf_internal_r+0x574>
 8002768:	4823883a 	mov	r17,r9
 800276c:	003c9406 	br	80019c0 <___vfprintf_internal_r+0xc64>
 8002770:	d9402d17 	ldw	r5,180(sp)
 8002774:	d8c02f17 	ldw	r3,188(sp)
 8002778:	28800017 	ldw	r2,0(r5)
 800277c:	29400104 	addi	r5,r5,4
 8002780:	d9402d15 	stw	r5,180(sp)
 8002784:	10c00015 	stw	r3,0(r2)
 8002788:	0039af06 	br	8000e48 <___vfprintf_internal_r+0xec>
 800278c:	d9002d17 	ldw	r4,180(sp)
 8002790:	002b883a 	mov	r21,zero
 8002794:	0005883a 	mov	r2,zero
 8002798:	24800017 	ldw	r18,0(r4)
 800279c:	21000104 	addi	r4,r4,4
 80027a0:	d9002d15 	stw	r4,180(sp)
 80027a4:	9007883a 	mov	r3,r18
 80027a8:	003bd806 	br	800170c <___vfprintf_internal_r+0x9b0>
 80027ac:	1c800017 	ldw	r18,0(r3)
 80027b0:	d8c02d17 	ldw	r3,180(sp)
 80027b4:	902bd7fa 	srai	r21,r18,31
 80027b8:	18c00104 	addi	r3,r3,4
 80027bc:	d8c02d15 	stw	r3,180(sp)
 80027c0:	a805883a 	mov	r2,r21
 80027c4:	003a9e06 	br	8001240 <___vfprintf_internal_r+0x4e4>
 80027c8:	d8c02d17 	ldw	r3,180(sp)
 80027cc:	002b883a 	mov	r21,zero
 80027d0:	00800044 	movi	r2,1
 80027d4:	1c800017 	ldw	r18,0(r3)
 80027d8:	18c00104 	addi	r3,r3,4
 80027dc:	d8c02d15 	stw	r3,180(sp)
 80027e0:	9007883a 	mov	r3,r18
 80027e4:	003bc906 	br	800170c <___vfprintf_internal_r+0x9b0>
 80027e8:	d9402d17 	ldw	r5,180(sp)
 80027ec:	14800017 	ldw	r18,0(r2)
 80027f0:	002b883a 	mov	r21,zero
 80027f4:	29400104 	addi	r5,r5,4
 80027f8:	d9402d15 	stw	r5,180(sp)
 80027fc:	003c2206 	br	8001888 <___vfprintf_internal_r+0xb2c>
 8002800:	01020074 	movhi	r4,2049
 8002804:	21000604 	addi	r4,r4,24
 8002808:	d9003115 	stw	r4,196(sp)
 800280c:	003ba606 	br	80016a8 <___vfprintf_internal_r+0x94c>
 8002810:	b809883a 	mov	r4,r23
 8002814:	b00b883a 	mov	r5,r22
 8002818:	d9801e04 	addi	r6,sp,120
 800281c:	80077340 	call	8007734 <__sprint_r>
 8002820:	103a431e 	bne	r2,zero,8001130 <___vfprintf_internal_r+0x3d4>
 8002824:	dc002617 	ldw	r16,152(sp)
 8002828:	d8c02017 	ldw	r3,128(sp)
 800282c:	da000404 	addi	r8,sp,16
 8002830:	003f9106 	br	8002678 <___vfprintf_internal_r+0x191c>
 8002834:	d8802e17 	ldw	r2,184(sp)
 8002838:	d8c02d15 	stw	r3,180(sp)
 800283c:	0085c83a 	sub	r2,zero,r2
 8002840:	d8802e15 	stw	r2,184(sp)
 8002844:	e005883a 	mov	r2,fp
 8002848:	003a4206 	br	8001154 <___vfprintf_internal_r+0x3f8>
 800284c:	e0800044 	addi	r2,fp,1
 8002850:	9cc00814 	ori	r19,r19,32
 8002854:	e4000047 	ldb	r16,1(fp)
 8002858:	0039a606 	br	8000ef4 <___vfprintf_internal_r+0x198>
 800285c:	b809883a 	mov	r4,r23
 8002860:	b00b883a 	mov	r5,r22
 8002864:	d9801e04 	addi	r6,sp,120
 8002868:	80077340 	call	8007734 <__sprint_r>
 800286c:	103a301e 	bne	r2,zero,8001130 <___vfprintf_internal_r+0x3d4>
 8002870:	d8c02017 	ldw	r3,128(sp)
 8002874:	da000404 	addi	r8,sp,16
 8002878:	003cf006 	br	8001c3c <___vfprintf_internal_r+0xee0>
 800287c:	d8c02817 	ldw	r3,160(sp)
 8002880:	d9003117 	ldw	r4,196(sp)
 8002884:	1923c83a 	sub	r17,r3,r4
 8002888:	003a8c06 	br	80012bc <___vfprintf_internal_r+0x560>
 800288c:	da003f15 	stw	r8,252(sp)
 8002890:	80075a00 	call	80075a0 <strlen>
 8002894:	1023883a 	mov	r17,r2
 8002898:	da003f17 	ldw	r8,252(sp)
 800289c:	883c4a0e 	bge	r17,zero,80019c8 <___vfprintf_internal_r+0xc6c>
 80028a0:	0005883a 	mov	r2,zero
 80028a4:	003c4806 	br	80019c8 <___vfprintf_internal_r+0xc6c>
 80028a8:	b809883a 	mov	r4,r23
 80028ac:	b00b883a 	mov	r5,r22
 80028b0:	d9801e04 	addi	r6,sp,120
 80028b4:	80077340 	call	8007734 <__sprint_r>
 80028b8:	103a1d1e 	bne	r2,zero,8001130 <___vfprintf_internal_r+0x3d4>
 80028bc:	d8c02017 	ldw	r3,128(sp)
 80028c0:	d8801f17 	ldw	r2,124(sp)
 80028c4:	da000404 	addi	r8,sp,16
 80028c8:	d9403317 	ldw	r5,204(sp)
 80028cc:	d9003117 	ldw	r4,196(sp)
 80028d0:	10800044 	addi	r2,r2,1
 80028d4:	1947883a 	add	r3,r3,r5
 80028d8:	41000015 	stw	r4,0(r8)
 80028dc:	41400115 	stw	r5,4(r8)
 80028e0:	d8c02015 	stw	r3,128(sp)
 80028e4:	d8801f15 	stw	r2,124(sp)
 80028e8:	010001c4 	movi	r4,7
 80028ec:	20bb0a0e 	bge	r4,r2,8001518 <___vfprintf_internal_r+0x7bc>
 80028f0:	003d6206 	br	8001e7c <___vfprintf_internal_r+0x1120>
 80028f4:	01020074 	movhi	r4,2049
 80028f8:	21001a84 	addi	r4,r4,106
 80028fc:	d9003615 	stw	r4,216(sp)
 8002900:	003aa706 	br	80013a0 <___vfprintf_internal_r+0x644>
 8002904:	d8802604 	addi	r2,sp,152
 8002908:	d8800115 	stw	r2,4(sp)
 800290c:	d9403717 	ldw	r5,220(sp)
 8002910:	d8802504 	addi	r2,sp,148
 8002914:	d8800215 	stw	r2,8(sp)
 8002918:	d8802104 	addi	r2,sp,132
 800291c:	da400015 	stw	r9,0(sp)
 8002920:	d8800315 	stw	r2,12(sp)
 8002924:	b809883a 	mov	r4,r23
 8002928:	880d883a 	mov	r6,r17
 800292c:	01c000c4 	movi	r7,3
 8002930:	da003f15 	stw	r8,252(sp)
 8002934:	da403e15 	stw	r9,248(sp)
 8002938:	80032100 	call	8003210 <_dtoa_r>
 800293c:	da403e17 	ldw	r9,248(sp)
 8002940:	da003f17 	ldw	r8,252(sp)
 8002944:	d8803115 	stw	r2,196(sp)
 8002948:	482b883a 	mov	r21,r9
 800294c:	d8c03117 	ldw	r3,196(sp)
 8002950:	00801184 	movi	r2,70
 8002954:	1d55883a 	add	r10,r3,r21
 8002958:	98bebb1e 	bne	r19,r2,8002448 <___vfprintf_internal_r+0x16ec>
 800295c:	19000007 	ldb	r4,0(r3)
 8002960:	00800c04 	movi	r2,48
 8002964:	2080df26 	beq	r4,r2,8002ce4 <___vfprintf_internal_r+0x1f88>
 8002968:	d8c02617 	ldw	r3,152(sp)
 800296c:	50d5883a 	add	r10,r10,r3
 8002970:	003eb506 	br	8002448 <___vfprintf_internal_r+0x16ec>
 8002974:	0023883a 	mov	r17,zero
 8002978:	003d9b06 	br	8001fe8 <___vfprintf_internal_r+0x128c>
 800297c:	b809883a 	mov	r4,r23
 8002980:	b00b883a 	mov	r5,r22
 8002984:	d9801e04 	addi	r6,sp,120
 8002988:	80077340 	call	8007734 <__sprint_r>
 800298c:	1039e81e 	bne	r2,zero,8001130 <___vfprintf_internal_r+0x3d4>
 8002990:	d8c02017 	ldw	r3,128(sp)
 8002994:	da000404 	addi	r8,sp,16
 8002998:	003d9206 	br	8001fe4 <___vfprintf_internal_r+0x1288>
 800299c:	b809883a 	mov	r4,r23
 80029a0:	b00b883a 	mov	r5,r22
 80029a4:	d9801e04 	addi	r6,sp,120
 80029a8:	80077340 	call	8007734 <__sprint_r>
 80029ac:	1039e01e 	bne	r2,zero,8001130 <___vfprintf_internal_r+0x3d4>
 80029b0:	d8802617 	ldw	r2,152(sp)
 80029b4:	d8c02017 	ldw	r3,128(sp)
 80029b8:	da000404 	addi	r8,sp,16
 80029bc:	003dfb06 	br	80021ac <___vfprintf_internal_r+0x1450>
 80029c0:	01020074 	movhi	r4,2049
 80029c4:	21001684 	addi	r4,r4,90
 80029c8:	d9002c15 	stw	r4,176(sp)
 80029cc:	d9002c17 	ldw	r4,176(sp)
 80029d0:	1c07883a 	add	r3,r3,r16
 80029d4:	10800044 	addi	r2,r2,1
 80029d8:	41000015 	stw	r4,0(r8)
 80029dc:	44000115 	stw	r16,4(r8)
 80029e0:	d8c02015 	stw	r3,128(sp)
 80029e4:	d8801f15 	stw	r2,124(sp)
 80029e8:	010001c4 	movi	r4,7
 80029ec:	20bfae16 	blt	r4,r2,80028a8 <___vfprintf_internal_r+0x1b4c>
 80029f0:	42000204 	addi	r8,r8,8
 80029f4:	003fb406 	br	80028c8 <___vfprintf_internal_r+0x1b6c>
 80029f8:	00800184 	movi	r2,6
 80029fc:	1240012e 	bgeu	r2,r9,8002a04 <___vfprintf_internal_r+0x1ca8>
 8002a00:	1013883a 	mov	r9,r2
 8002a04:	4823883a 	mov	r17,r9
 8002a08:	4805883a 	mov	r2,r9
 8002a0c:	4800ac16 	blt	r9,zero,8002cc0 <___vfprintf_internal_r+0x1f64>
 8002a10:	01420074 	movhi	r5,2049
 8002a14:	29401404 	addi	r5,r5,80
 8002a18:	d8802b15 	stw	r2,172(sp)
 8002a1c:	dc802d15 	stw	r18,180(sp)
 8002a20:	d8003215 	stw	zero,200(sp)
 8002a24:	d8003415 	stw	zero,208(sp)
 8002a28:	d9403115 	stw	r5,196(sp)
 8002a2c:	0005883a 	mov	r2,zero
 8002a30:	003a2e06 	br	80012ec <___vfprintf_internal_r+0x590>
 8002a34:	0021883a 	mov	r16,zero
 8002a38:	003dee06 	br	80021f4 <___vfprintf_internal_r+0x1498>
 8002a3c:	01420074 	movhi	r5,2049
 8002a40:	29401a84 	addi	r5,r5,106
 8002a44:	d9403615 	stw	r5,216(sp)
 8002a48:	003ad806 	br	80015ac <___vfprintf_internal_r+0x850>
 8002a4c:	b809883a 	mov	r4,r23
 8002a50:	b00b883a 	mov	r5,r22
 8002a54:	d9801e04 	addi	r6,sp,120
 8002a58:	80077340 	call	8007734 <__sprint_r>
 8002a5c:	1039b41e 	bne	r2,zero,8001130 <___vfprintf_internal_r+0x3d4>
 8002a60:	d8802617 	ldw	r2,152(sp)
 8002a64:	d9403317 	ldw	r5,204(sp)
 8002a68:	d8c02017 	ldw	r3,128(sp)
 8002a6c:	da000404 	addi	r8,sp,16
 8002a70:	2885c83a 	sub	r2,r5,r2
 8002a74:	003dde06 	br	80021f0 <___vfprintf_internal_r+0x1494>
 8002a78:	01420074 	movhi	r5,2049
 8002a7c:	29400904 	addi	r5,r5,36
 8002a80:	d9403115 	stw	r5,196(sp)
 8002a84:	003f2e06 	br	8002740 <___vfprintf_internal_r+0x19e4>
 8002a88:	00800b44 	movi	r2,45
 8002a8c:	d8802785 	stb	r2,158(sp)
 8002a90:	df002b15 	stw	fp,172(sp)
 8002a94:	d8003215 	stw	zero,200(sp)
 8002a98:	df002d17 	ldw	fp,180(sp)
 8002a9c:	00800b44 	movi	r2,45
 8002aa0:	dc802d15 	stw	r18,180(sp)
 8002aa4:	003a0e06 	br	80012e0 <___vfprintf_internal_r+0x584>
 8002aa8:	d8c02617 	ldw	r3,152(sp)
 8002aac:	00bfff44 	movi	r2,-3
 8002ab0:	18801b16 	blt	r3,r2,8002b20 <___vfprintf_internal_r+0x1dc4>
 8002ab4:	48c01a16 	blt	r9,r3,8002b20 <___vfprintf_internal_r+0x1dc4>
 8002ab8:	d8c03415 	stw	r3,208(sp)
 8002abc:	040019c4 	movi	r16,103
 8002ac0:	003e8006 	br	80024c4 <___vfprintf_internal_r+0x1768>
 8002ac4:	04c00b44 	movi	r19,45
 8002ac8:	dcc02785 	stb	r19,158(sp)
 8002acc:	003af106 	br	8001694 <___vfprintf_internal_r+0x938>
 8002ad0:	d8c02d17 	ldw	r3,180(sp)
 8002ad4:	d9002f17 	ldw	r4,188(sp)
 8002ad8:	18800017 	ldw	r2,0(r3)
 8002adc:	18c00104 	addi	r3,r3,4
 8002ae0:	d8c02d15 	stw	r3,180(sp)
 8002ae4:	11000015 	stw	r4,0(r2)
 8002ae8:	0038d706 	br	8000e48 <___vfprintf_internal_r+0xec>
 8002aec:	01020074 	movhi	r4,2049
 8002af0:	21001684 	addi	r4,r4,90
 8002af4:	d9002c15 	stw	r4,176(sp)
 8002af8:	003c8e06 	br	8001d34 <___vfprintf_internal_r+0xfd8>
 8002afc:	5005883a 	mov	r2,r10
 8002b00:	003e6506 	br	8002498 <___vfprintf_internal_r+0x173c>
 8002b04:	da402b15 	stw	r9,172(sp)
 8002b08:	dcc02783 	ldbu	r19,158(sp)
 8002b0c:	4823883a 	mov	r17,r9
 8002b10:	dc802d15 	stw	r18,180(sp)
 8002b14:	d8003215 	stw	zero,200(sp)
 8002b18:	d8003415 	stw	zero,208(sp)
 8002b1c:	0039ec06 	br	80012d0 <___vfprintf_internal_r+0x574>
 8002b20:	843fff84 	addi	r16,r16,-2
 8002b24:	1d7fffc4 	addi	r21,r3,-1
 8002b28:	dd402615 	stw	r21,152(sp)
 8002b2c:	dc0022c5 	stb	r16,139(sp)
 8002b30:	a8009616 	blt	r21,zero,8002d8c <___vfprintf_internal_r+0x2030>
 8002b34:	00800ac4 	movi	r2,43
 8002b38:	d8802305 	stb	r2,140(sp)
 8002b3c:	00800244 	movi	r2,9
 8002b40:	1540610e 	bge	r2,r21,8002cc8 <___vfprintf_internal_r+0x1f6c>
 8002b44:	dcc022c4 	addi	r19,sp,139
 8002b48:	dc002c15 	stw	r16,176(sp)
 8002b4c:	4023883a 	mov	r17,r8
 8002b50:	9821883a 	mov	r16,r19
 8002b54:	a809883a 	mov	r4,r21
 8002b58:	01400284 	movi	r5,10
 8002b5c:	800acd40 	call	800acd4 <__modsi3>
 8002b60:	10800c04 	addi	r2,r2,48
 8002b64:	843fffc4 	addi	r16,r16,-1
 8002b68:	a809883a 	mov	r4,r21
 8002b6c:	01400284 	movi	r5,10
 8002b70:	80800005 	stb	r2,0(r16)
 8002b74:	800ac800 	call	800ac80 <__divsi3>
 8002b78:	01000244 	movi	r4,9
 8002b7c:	102b883a 	mov	r21,r2
 8002b80:	20bff416 	blt	r4,r2,8002b54 <___vfprintf_internal_r+0x1df8>
 8002b84:	8811883a 	mov	r8,r17
 8002b88:	10800c04 	addi	r2,r2,48
 8002b8c:	8023883a 	mov	r17,r16
 8002b90:	897fffc4 	addi	r5,r17,-1
 8002b94:	88bfffc5 	stb	r2,-1(r17)
 8002b98:	dc002c17 	ldw	r16,176(sp)
 8002b9c:	2cc07f2e 	bgeu	r5,r19,8002d9c <___vfprintf_internal_r+0x2040>
 8002ba0:	d9802384 	addi	r6,sp,142
 8002ba4:	344dc83a 	sub	r6,r6,r17
 8002ba8:	d9002344 	addi	r4,sp,141
 8002bac:	998d883a 	add	r6,r19,r6
 8002bb0:	00000106 	br	8002bb8 <___vfprintf_internal_r+0x1e5c>
 8002bb4:	28800003 	ldbu	r2,0(r5)
 8002bb8:	20800005 	stb	r2,0(r4)
 8002bbc:	21000044 	addi	r4,r4,1
 8002bc0:	29400044 	addi	r5,r5,1
 8002bc4:	21bffb1e 	bne	r4,r6,8002bb4 <___vfprintf_internal_r+0x1e58>
 8002bc8:	d8802304 	addi	r2,sp,140
 8002bcc:	1445c83a 	sub	r2,r2,r17
 8002bd0:	d9402344 	addi	r5,sp,141
 8002bd4:	2885883a 	add	r2,r5,r2
 8002bd8:	14e7c83a 	sub	r19,r2,r19
 8002bdc:	d8803317 	ldw	r2,204(sp)
 8002be0:	d8c03317 	ldw	r3,204(sp)
 8002be4:	dcc03a15 	stw	r19,232(sp)
 8002be8:	14e3883a 	add	r17,r2,r19
 8002bec:	00800044 	movi	r2,1
 8002bf0:	10c04e0e 	bge	r2,r3,8002d2c <___vfprintf_internal_r+0x1fd0>
 8002bf4:	8c400044 	addi	r17,r17,1
 8002bf8:	8839883a 	mov	fp,r17
 8002bfc:	88004916 	blt	r17,zero,8002d24 <___vfprintf_internal_r+0x1fc8>
 8002c00:	d8003415 	stw	zero,208(sp)
 8002c04:	003e3806 	br	80024e8 <___vfprintf_internal_r+0x178c>
 8002c08:	483de91e 	bne	r9,zero,80023b0 <___vfprintf_internal_r+0x1654>
 8002c0c:	8813883a 	mov	r9,r17
 8002c10:	003de706 	br	80023b0 <___vfprintf_internal_r+0x1654>
 8002c14:	b809883a 	mov	r4,r23
 8002c18:	b00b883a 	mov	r5,r22
 8002c1c:	d9801e04 	addi	r6,sp,120
 8002c20:	80077340 	call	8007734 <__sprint_r>
 8002c24:	1039421e 	bne	r2,zero,8001130 <___vfprintf_internal_r+0x3d4>
 8002c28:	dc002617 	ldw	r16,152(sp)
 8002c2c:	d8c02017 	ldw	r3,128(sp)
 8002c30:	d8801f17 	ldw	r2,124(sp)
 8002c34:	da000404 	addi	r8,sp,16
 8002c38:	003ea006 	br	80026bc <___vfprintf_internal_r+0x1960>
 8002c3c:	02400184 	movi	r9,6
 8002c40:	003ddb06 	br	80023b0 <___vfprintf_internal_r+0x1654>
 8002c44:	00c00b44 	movi	r3,45
 8002c48:	2460003c 	xorhi	r17,r4,32768
 8002c4c:	d8c02b05 	stb	r3,172(sp)
 8002c50:	003ddd06 	br	80023c8 <___vfprintf_internal_r+0x166c>
 8002c54:	d8c03417 	ldw	r3,208(sp)
 8002c58:	00c03d0e 	bge	zero,r3,8002d50 <___vfprintf_internal_r+0x1ff4>
 8002c5c:	04400044 	movi	r17,1
 8002c60:	d9003317 	ldw	r4,204(sp)
 8002c64:	8923883a 	add	r17,r17,r4
 8002c68:	8839883a 	mov	fp,r17
 8002c6c:	883e1e0e 	bge	r17,zero,80024e8 <___vfprintf_internal_r+0x178c>
 8002c70:	0039883a 	mov	fp,zero
 8002c74:	003e1c06 	br	80024e8 <___vfprintf_internal_r+0x178c>
 8002c78:	4d400044 	addi	r21,r9,1
 8002c7c:	003dd906 	br	80023e4 <___vfprintf_internal_r+0x1688>
 8002c80:	1839883a 	mov	fp,r3
 8002c84:	18004716 	blt	r3,zero,8002da4 <___vfprintf_internal_r+0x2048>
 8002c88:	dc403417 	ldw	r17,208(sp)
 8002c8c:	003e1606 	br	80024e8 <___vfprintf_internal_r+0x178c>
 8002c90:	00c0290e 	bge	zero,r3,8002d38 <___vfprintf_internal_r+0x1fdc>
 8002c94:	4800021e 	bne	r9,zero,8002ca0 <___vfprintf_internal_r+0x1f44>
 8002c98:	e080004c 	andi	r2,fp,1
 8002c9c:	103ff826 	beq	r2,zero,8002c80 <___vfprintf_internal_r+0x1f24>
 8002ca0:	d8c03417 	ldw	r3,208(sp)
 8002ca4:	4a400044 	addi	r9,r9,1
 8002ca8:	1a63883a 	add	r17,r3,r9
 8002cac:	8839883a 	mov	fp,r17
 8002cb0:	883e0d0e 	bge	r17,zero,80024e8 <___vfprintf_internal_r+0x178c>
 8002cb4:	003fee06 	br	8002c70 <___vfprintf_internal_r+0x1f14>
 8002cb8:	d8802117 	ldw	r2,132(sp)
 8002cbc:	003df606 	br	8002498 <___vfprintf_internal_r+0x173c>
 8002cc0:	0005883a 	mov	r2,zero
 8002cc4:	003f5206 	br	8002a10 <___vfprintf_internal_r+0x1cb4>
 8002cc8:	00800c04 	movi	r2,48
 8002ccc:	a8c00c04 	addi	r3,r21,48
 8002cd0:	d8802345 	stb	r2,141(sp)
 8002cd4:	d8c02385 	stb	r3,142(sp)
 8002cd8:	d88023c4 	addi	r2,sp,143
 8002cdc:	dcc022c4 	addi	r19,sp,139
 8002ce0:	003fbd06 	br	8002bd8 <___vfprintf_internal_r+0x1e7c>
 8002ce4:	d9003717 	ldw	r4,220(sp)
 8002ce8:	880b883a 	mov	r5,r17
 8002cec:	000d883a 	mov	r6,zero
 8002cf0:	000f883a 	mov	r7,zero
 8002cf4:	da003f15 	stw	r8,252(sp)
 8002cf8:	da403e15 	stw	r9,248(sp)
 8002cfc:	da803d15 	stw	r10,244(sp)
 8002d00:	800bf5c0 	call	800bf5c <__eqdf2>
 8002d04:	da003f17 	ldw	r8,252(sp)
 8002d08:	da403e17 	ldw	r9,248(sp)
 8002d0c:	da803d17 	ldw	r10,244(sp)
 8002d10:	103f1526 	beq	r2,zero,8002968 <___vfprintf_internal_r+0x1c0c>
 8002d14:	00800044 	movi	r2,1
 8002d18:	1547c83a 	sub	r3,r2,r21
 8002d1c:	d8c02615 	stw	r3,152(sp)
 8002d20:	003f1206 	br	800296c <___vfprintf_internal_r+0x1c10>
 8002d24:	0039883a 	mov	fp,zero
 8002d28:	003fb506 	br	8002c00 <___vfprintf_internal_r+0x1ea4>
 8002d2c:	e084703a 	and	r2,fp,r2
 8002d30:	103fb126 	beq	r2,zero,8002bf8 <___vfprintf_internal_r+0x1e9c>
 8002d34:	003faf06 	br	8002bf4 <___vfprintf_internal_r+0x1e98>
 8002d38:	4800081e 	bne	r9,zero,8002d5c <___vfprintf_internal_r+0x2000>
 8002d3c:	e080004c 	andi	r2,fp,1
 8002d40:	1000061e 	bne	r2,zero,8002d5c <___vfprintf_internal_r+0x2000>
 8002d44:	07000044 	movi	fp,1
 8002d48:	e023883a 	mov	r17,fp
 8002d4c:	003de606 	br	80024e8 <___vfprintf_internal_r+0x178c>
 8002d50:	04400084 	movi	r17,2
 8002d54:	88e3c83a 	sub	r17,r17,r3
 8002d58:	003fc106 	br	8002c60 <___vfprintf_internal_r+0x1f04>
 8002d5c:	4c400084 	addi	r17,r9,2
 8002d60:	8839883a 	mov	fp,r17
 8002d64:	883de00e 	bge	r17,zero,80024e8 <___vfprintf_internal_r+0x178c>
 8002d68:	003fc106 	br	8002c70 <___vfprintf_internal_r+0x1f14>
 8002d6c:	d9402d17 	ldw	r5,180(sp)
 8002d70:	2a400017 	ldw	r9,0(r5)
 8002d74:	28c00104 	addi	r3,r5,4
 8002d78:	d8c02d15 	stw	r3,180(sp)
 8002d7c:	483eb50e 	bge	r9,zero,8002854 <___vfprintf_internal_r+0x1af8>
 8002d80:	027fffc4 	movi	r9,-1
 8002d84:	e4000047 	ldb	r16,1(fp)
 8002d88:	00385a06 	br	8000ef4 <___vfprintf_internal_r+0x198>
 8002d8c:	00800b44 	movi	r2,45
 8002d90:	056bc83a 	sub	r21,zero,r21
 8002d94:	d8802305 	stb	r2,140(sp)
 8002d98:	003f6806 	br	8002b3c <___vfprintf_internal_r+0x1de0>
 8002d9c:	d8802344 	addi	r2,sp,141
 8002da0:	003f8d06 	br	8002bd8 <___vfprintf_internal_r+0x1e7c>
 8002da4:	0039883a 	mov	fp,zero
 8002da8:	003fb706 	br	8002c88 <___vfprintf_internal_r+0x1f2c>
 8002dac:	d8c02617 	ldw	r3,152(sp)
 8002db0:	003f5c06 	br	8002b24 <___vfprintf_internal_r+0x1dc8>

08002db4 <__vfprintf_internal>:
 8002db4:	2007883a 	mov	r3,r4
 8002db8:	01020074 	movhi	r4,2049
 8002dbc:	21073104 	addi	r4,r4,7364
 8002dc0:	21000017 	ldw	r4,0(r4)
 8002dc4:	2805883a 	mov	r2,r5
 8002dc8:	300f883a 	mov	r7,r6
 8002dcc:	180b883a 	mov	r5,r3
 8002dd0:	100d883a 	mov	r6,r2
 8002dd4:	8000d5c1 	jmpi	8000d5c <___vfprintf_internal_r>

08002dd8 <__sbprintf>:
 8002dd8:	2880030b 	ldhu	r2,12(r5)
 8002ddc:	2ac01917 	ldw	r11,100(r5)
 8002de0:	2a80038b 	ldhu	r10,14(r5)
 8002de4:	2a400717 	ldw	r9,28(r5)
 8002de8:	2a000917 	ldw	r8,36(r5)
 8002dec:	defee204 	addi	sp,sp,-1144
 8002df0:	00c10004 	movi	r3,1024
 8002df4:	dc011a15 	stw	r16,1128(sp)
 8002df8:	10bfff4c 	andi	r2,r2,65533
 8002dfc:	2821883a 	mov	r16,r5
 8002e00:	d8cb883a 	add	r5,sp,r3
 8002e04:	dc811c15 	stw	r18,1136(sp)
 8002e08:	dc411b15 	stw	r17,1132(sp)
 8002e0c:	dfc11d15 	stw	ra,1140(sp)
 8002e10:	2025883a 	mov	r18,r4
 8002e14:	d881030d 	sth	r2,1036(sp)
 8002e18:	dac11915 	stw	r11,1124(sp)
 8002e1c:	da81038d 	sth	r10,1038(sp)
 8002e20:	da410715 	stw	r9,1052(sp)
 8002e24:	da010915 	stw	r8,1060(sp)
 8002e28:	dec10015 	stw	sp,1024(sp)
 8002e2c:	dec10415 	stw	sp,1040(sp)
 8002e30:	d8c10215 	stw	r3,1032(sp)
 8002e34:	d8c10515 	stw	r3,1044(sp)
 8002e38:	d8010615 	stw	zero,1048(sp)
 8002e3c:	8000d5c0 	call	8000d5c <___vfprintf_internal_r>
 8002e40:	1023883a 	mov	r17,r2
 8002e44:	10000416 	blt	r2,zero,8002e58 <__sbprintf+0x80>
 8002e48:	9009883a 	mov	r4,r18
 8002e4c:	d9410004 	addi	r5,sp,1024
 8002e50:	8004b400 	call	8004b40 <_fflush_r>
 8002e54:	10000d1e 	bne	r2,zero,8002e8c <__sbprintf+0xb4>
 8002e58:	d8c1030b 	ldhu	r3,1036(sp)
 8002e5c:	18c0100c 	andi	r3,r3,64
 8002e60:	18000326 	beq	r3,zero,8002e70 <__sbprintf+0x98>
 8002e64:	8080030b 	ldhu	r2,12(r16)
 8002e68:	10801014 	ori	r2,r2,64
 8002e6c:	8080030d 	sth	r2,12(r16)
 8002e70:	8805883a 	mov	r2,r17
 8002e74:	dfc11d17 	ldw	ra,1140(sp)
 8002e78:	dc811c17 	ldw	r18,1136(sp)
 8002e7c:	dc411b17 	ldw	r17,1132(sp)
 8002e80:	dc011a17 	ldw	r16,1128(sp)
 8002e84:	dec11e04 	addi	sp,sp,1144
 8002e88:	f800283a 	ret
 8002e8c:	047fffc4 	movi	r17,-1
 8002e90:	003ff106 	br	8002e58 <__sbprintf+0x80>

08002e94 <__swsetup_r>:
 8002e94:	00820074 	movhi	r2,2049
 8002e98:	defffd04 	addi	sp,sp,-12
 8002e9c:	10873104 	addi	r2,r2,7364
 8002ea0:	dc400115 	stw	r17,4(sp)
 8002ea4:	2023883a 	mov	r17,r4
 8002ea8:	11000017 	ldw	r4,0(r2)
 8002eac:	dc000015 	stw	r16,0(sp)
 8002eb0:	dfc00215 	stw	ra,8(sp)
 8002eb4:	2821883a 	mov	r16,r5
 8002eb8:	20000226 	beq	r4,zero,8002ec4 <__swsetup_r+0x30>
 8002ebc:	20c00e17 	ldw	r3,56(r4)
 8002ec0:	18003126 	beq	r3,zero,8002f88 <__swsetup_r+0xf4>
 8002ec4:	8080030b 	ldhu	r2,12(r16)
 8002ec8:	10c0020c 	andi	r3,r2,8
 8002ecc:	100d883a 	mov	r6,r2
 8002ed0:	18000f26 	beq	r3,zero,8002f10 <__swsetup_r+0x7c>
 8002ed4:	80c00417 	ldw	r3,16(r16)
 8002ed8:	18001526 	beq	r3,zero,8002f30 <__swsetup_r+0x9c>
 8002edc:	1100004c 	andi	r4,r2,1
 8002ee0:	20001c1e 	bne	r4,zero,8002f54 <__swsetup_r+0xc0>
 8002ee4:	1080008c 	andi	r2,r2,2
 8002ee8:	1000291e 	bne	r2,zero,8002f90 <__swsetup_r+0xfc>
 8002eec:	80800517 	ldw	r2,20(r16)
 8002ef0:	80800215 	stw	r2,8(r16)
 8002ef4:	18001c26 	beq	r3,zero,8002f68 <__swsetup_r+0xd4>
 8002ef8:	0005883a 	mov	r2,zero
 8002efc:	dfc00217 	ldw	ra,8(sp)
 8002f00:	dc400117 	ldw	r17,4(sp)
 8002f04:	dc000017 	ldw	r16,0(sp)
 8002f08:	dec00304 	addi	sp,sp,12
 8002f0c:	f800283a 	ret
 8002f10:	3080040c 	andi	r2,r6,16
 8002f14:	10002e26 	beq	r2,zero,8002fd0 <__swsetup_r+0x13c>
 8002f18:	3080010c 	andi	r2,r6,4
 8002f1c:	10001e1e 	bne	r2,zero,8002f98 <__swsetup_r+0x104>
 8002f20:	80c00417 	ldw	r3,16(r16)
 8002f24:	30800214 	ori	r2,r6,8
 8002f28:	8080030d 	sth	r2,12(r16)
 8002f2c:	183feb1e 	bne	r3,zero,8002edc <__swsetup_r+0x48>
 8002f30:	1140a00c 	andi	r5,r2,640
 8002f34:	01008004 	movi	r4,512
 8002f38:	293fe826 	beq	r5,r4,8002edc <__swsetup_r+0x48>
 8002f3c:	8809883a 	mov	r4,r17
 8002f40:	800b883a 	mov	r5,r16
 8002f44:	80055f80 	call	80055f8 <__smakebuf_r>
 8002f48:	8080030b 	ldhu	r2,12(r16)
 8002f4c:	80c00417 	ldw	r3,16(r16)
 8002f50:	003fe206 	br	8002edc <__swsetup_r+0x48>
 8002f54:	80800517 	ldw	r2,20(r16)
 8002f58:	80000215 	stw	zero,8(r16)
 8002f5c:	0085c83a 	sub	r2,zero,r2
 8002f60:	80800615 	stw	r2,24(r16)
 8002f64:	183fe41e 	bne	r3,zero,8002ef8 <__swsetup_r+0x64>
 8002f68:	80c0030b 	ldhu	r3,12(r16)
 8002f6c:	0005883a 	mov	r2,zero
 8002f70:	1900200c 	andi	r4,r3,128
 8002f74:	203fe126 	beq	r4,zero,8002efc <__swsetup_r+0x68>
 8002f78:	18c01014 	ori	r3,r3,64
 8002f7c:	80c0030d 	sth	r3,12(r16)
 8002f80:	00bfffc4 	movi	r2,-1
 8002f84:	003fdd06 	br	8002efc <__swsetup_r+0x68>
 8002f88:	8004f2c0 	call	8004f2c <__sinit>
 8002f8c:	003fcd06 	br	8002ec4 <__swsetup_r+0x30>
 8002f90:	0005883a 	mov	r2,zero
 8002f94:	003fd606 	br	8002ef0 <__swsetup_r+0x5c>
 8002f98:	81400c17 	ldw	r5,48(r16)
 8002f9c:	28000626 	beq	r5,zero,8002fb8 <__swsetup_r+0x124>
 8002fa0:	80801004 	addi	r2,r16,64
 8002fa4:	28800326 	beq	r5,r2,8002fb4 <__swsetup_r+0x120>
 8002fa8:	8809883a 	mov	r4,r17
 8002fac:	80050a00 	call	80050a0 <_free_r>
 8002fb0:	8180030b 	ldhu	r6,12(r16)
 8002fb4:	80000c15 	stw	zero,48(r16)
 8002fb8:	80c00417 	ldw	r3,16(r16)
 8002fbc:	00bff6c4 	movi	r2,-37
 8002fc0:	118c703a 	and	r6,r2,r6
 8002fc4:	80000115 	stw	zero,4(r16)
 8002fc8:	80c00015 	stw	r3,0(r16)
 8002fcc:	003fd506 	br	8002f24 <__swsetup_r+0x90>
 8002fd0:	00800244 	movi	r2,9
 8002fd4:	88800015 	stw	r2,0(r17)
 8002fd8:	30801014 	ori	r2,r6,64
 8002fdc:	8080030d 	sth	r2,12(r16)
 8002fe0:	00bfffc4 	movi	r2,-1
 8002fe4:	003fc506 	br	8002efc <__swsetup_r+0x68>

08002fe8 <quorem>:
 8002fe8:	defff204 	addi	sp,sp,-56
 8002fec:	ddc00b15 	stw	r23,44(sp)
 8002ff0:	20800417 	ldw	r2,16(r4)
 8002ff4:	2dc00417 	ldw	r23,16(r5)
 8002ff8:	dfc00d15 	stw	ra,52(sp)
 8002ffc:	df000c15 	stw	fp,48(sp)
 8003000:	dd800a15 	stw	r22,40(sp)
 8003004:	dd400915 	stw	r21,36(sp)
 8003008:	dd000815 	stw	r20,32(sp)
 800300c:	dcc00715 	stw	r19,28(sp)
 8003010:	dc800615 	stw	r18,24(sp)
 8003014:	dc400515 	stw	r17,20(sp)
 8003018:	dc000415 	stw	r16,16(sp)
 800301c:	15c07a16 	blt	r2,r23,8003208 <quorem+0x220>
 8003020:	bdffffc4 	addi	r23,r23,-1
 8003024:	bde9883a 	add	r20,r23,r23
 8003028:	28c00504 	addi	r3,r5,20
 800302c:	a529883a 	add	r20,r20,r20
 8003030:	1d39883a 	add	fp,r3,r20
 8003034:	24c00504 	addi	r19,r4,20
 8003038:	d9400215 	stw	r5,8(sp)
 800303c:	9d29883a 	add	r20,r19,r20
 8003040:	e1400017 	ldw	r5,0(fp)
 8003044:	d9000015 	stw	r4,0(sp)
 8003048:	a1000017 	ldw	r4,0(r20)
 800304c:	29400044 	addi	r5,r5,1
 8003050:	d8c00115 	stw	r3,4(sp)
 8003054:	dd000315 	stw	r20,12(sp)
 8003058:	800ad300 	call	800ad30 <__udivsi3>
 800305c:	1025883a 	mov	r18,r2
 8003060:	10003026 	beq	r2,zero,8003124 <quorem+0x13c>
 8003064:	dc400117 	ldw	r17,4(sp)
 8003068:	9829883a 	mov	r20,r19
 800306c:	002d883a 	mov	r22,zero
 8003070:	0021883a 	mov	r16,zero
 8003074:	8d400017 	ldw	r21,0(r17)
 8003078:	900b883a 	mov	r5,r18
 800307c:	8c400104 	addi	r17,r17,4
 8003080:	a93fffcc 	andi	r4,r21,65535
 8003084:	80005f80 	call	80005f8 <__mulsi3>
 8003088:	a808d43a 	srli	r4,r21,16
 800308c:	900b883a 	mov	r5,r18
 8003090:	b0ad883a 	add	r22,r22,r2
 8003094:	80005f80 	call	80005f8 <__mulsi3>
 8003098:	a1000017 	ldw	r4,0(r20)
 800309c:	b00cd43a 	srli	r6,r22,16
 80030a0:	b0ffffcc 	andi	r3,r22,65535
 80030a4:	217fffcc 	andi	r5,r4,65535
 80030a8:	2c21883a 	add	r16,r5,r16
 80030ac:	80c7c83a 	sub	r3,r16,r3
 80030b0:	2008d43a 	srli	r4,r4,16
 80030b4:	3085883a 	add	r2,r6,r2
 80030b8:	1821d43a 	srai	r16,r3,16
 80030bc:	117fffcc 	andi	r5,r2,65535
 80030c0:	2149c83a 	sub	r4,r4,r5
 80030c4:	2421883a 	add	r16,r4,r16
 80030c8:	8008943a 	slli	r4,r16,16
 80030cc:	18ffffcc 	andi	r3,r3,65535
 80030d0:	102cd43a 	srli	r22,r2,16
 80030d4:	20c8b03a 	or	r4,r4,r3
 80030d8:	a1000015 	stw	r4,0(r20)
 80030dc:	8021d43a 	srai	r16,r16,16
 80030e0:	a5000104 	addi	r20,r20,4
 80030e4:	e47fe32e 	bgeu	fp,r17,8003074 <quorem+0x8c>
 80030e8:	d8c00317 	ldw	r3,12(sp)
 80030ec:	18800017 	ldw	r2,0(r3)
 80030f0:	10000c1e 	bne	r2,zero,8003124 <quorem+0x13c>
 80030f4:	18bfff04 	addi	r2,r3,-4
 80030f8:	9880082e 	bgeu	r19,r2,800311c <quorem+0x134>
 80030fc:	18ffff17 	ldw	r3,-4(r3)
 8003100:	18000326 	beq	r3,zero,8003110 <quorem+0x128>
 8003104:	00000506 	br	800311c <quorem+0x134>
 8003108:	10c00017 	ldw	r3,0(r2)
 800310c:	1800031e 	bne	r3,zero,800311c <quorem+0x134>
 8003110:	10bfff04 	addi	r2,r2,-4
 8003114:	bdffffc4 	addi	r23,r23,-1
 8003118:	98bffb36 	bltu	r19,r2,8003108 <quorem+0x120>
 800311c:	d8c00017 	ldw	r3,0(sp)
 8003120:	1dc00415 	stw	r23,16(r3)
 8003124:	d9000017 	ldw	r4,0(sp)
 8003128:	d9400217 	ldw	r5,8(sp)
 800312c:	8006c2c0 	call	8006c2c <__mcmp>
 8003130:	10002816 	blt	r2,zero,80031d4 <quorem+0x1ec>
 8003134:	dc400117 	ldw	r17,4(sp)
 8003138:	94800044 	addi	r18,r18,1
 800313c:	980d883a 	mov	r6,r19
 8003140:	0007883a 	mov	r3,zero
 8003144:	31000017 	ldw	r4,0(r6)
 8003148:	89400017 	ldw	r5,0(r17)
 800314c:	31800104 	addi	r6,r6,4
 8003150:	20bfffcc 	andi	r2,r4,65535
 8003154:	10c7883a 	add	r3,r2,r3
 8003158:	28bfffcc 	andi	r2,r5,65535
 800315c:	1885c83a 	sub	r2,r3,r2
 8003160:	280ad43a 	srli	r5,r5,16
 8003164:	2008d43a 	srli	r4,r4,16
 8003168:	1007d43a 	srai	r3,r2,16
 800316c:	10bfffcc 	andi	r2,r2,65535
 8003170:	2149c83a 	sub	r4,r4,r5
 8003174:	20c9883a 	add	r4,r4,r3
 8003178:	200a943a 	slli	r5,r4,16
 800317c:	8c400104 	addi	r17,r17,4
 8003180:	2007d43a 	srai	r3,r4,16
 8003184:	2884b03a 	or	r2,r5,r2
 8003188:	30bfff15 	stw	r2,-4(r6)
 800318c:	e47fed2e 	bgeu	fp,r17,8003144 <quorem+0x15c>
 8003190:	bdc5883a 	add	r2,r23,r23
 8003194:	1085883a 	add	r2,r2,r2
 8003198:	9887883a 	add	r3,r19,r2
 800319c:	18800017 	ldw	r2,0(r3)
 80031a0:	10000c1e 	bne	r2,zero,80031d4 <quorem+0x1ec>
 80031a4:	18bfff04 	addi	r2,r3,-4
 80031a8:	9880082e 	bgeu	r19,r2,80031cc <quorem+0x1e4>
 80031ac:	18ffff17 	ldw	r3,-4(r3)
 80031b0:	18000326 	beq	r3,zero,80031c0 <quorem+0x1d8>
 80031b4:	00000506 	br	80031cc <quorem+0x1e4>
 80031b8:	10c00017 	ldw	r3,0(r2)
 80031bc:	1800031e 	bne	r3,zero,80031cc <quorem+0x1e4>
 80031c0:	10bfff04 	addi	r2,r2,-4
 80031c4:	bdffffc4 	addi	r23,r23,-1
 80031c8:	98bffb36 	bltu	r19,r2,80031b8 <quorem+0x1d0>
 80031cc:	d8c00017 	ldw	r3,0(sp)
 80031d0:	1dc00415 	stw	r23,16(r3)
 80031d4:	9005883a 	mov	r2,r18
 80031d8:	dfc00d17 	ldw	ra,52(sp)
 80031dc:	df000c17 	ldw	fp,48(sp)
 80031e0:	ddc00b17 	ldw	r23,44(sp)
 80031e4:	dd800a17 	ldw	r22,40(sp)
 80031e8:	dd400917 	ldw	r21,36(sp)
 80031ec:	dd000817 	ldw	r20,32(sp)
 80031f0:	dcc00717 	ldw	r19,28(sp)
 80031f4:	dc800617 	ldw	r18,24(sp)
 80031f8:	dc400517 	ldw	r17,20(sp)
 80031fc:	dc000417 	ldw	r16,16(sp)
 8003200:	dec00e04 	addi	sp,sp,56
 8003204:	f800283a 	ret
 8003208:	0005883a 	mov	r2,zero
 800320c:	003ff206 	br	80031d8 <quorem+0x1f0>

08003210 <_dtoa_r>:
 8003210:	20801017 	ldw	r2,64(r4)
 8003214:	deffde04 	addi	sp,sp,-136
 8003218:	dd401d15 	stw	r21,116(sp)
 800321c:	dcc01b15 	stw	r19,108(sp)
 8003220:	dc801a15 	stw	r18,104(sp)
 8003224:	dc401915 	stw	r17,100(sp)
 8003228:	dc001815 	stw	r16,96(sp)
 800322c:	dfc02115 	stw	ra,132(sp)
 8003230:	df002015 	stw	fp,128(sp)
 8003234:	ddc01f15 	stw	r23,124(sp)
 8003238:	dd801e15 	stw	r22,120(sp)
 800323c:	dd001c15 	stw	r20,112(sp)
 8003240:	d9c00315 	stw	r7,12(sp)
 8003244:	2021883a 	mov	r16,r4
 8003248:	302b883a 	mov	r21,r6
 800324c:	2825883a 	mov	r18,r5
 8003250:	dc402417 	ldw	r17,144(sp)
 8003254:	3027883a 	mov	r19,r6
 8003258:	10000826 	beq	r2,zero,800327c <_dtoa_r+0x6c>
 800325c:	21801117 	ldw	r6,68(r4)
 8003260:	00c00044 	movi	r3,1
 8003264:	100b883a 	mov	r5,r2
 8003268:	1986983a 	sll	r3,r3,r6
 800326c:	11800115 	stw	r6,4(r2)
 8003270:	10c00215 	stw	r3,8(r2)
 8003274:	80063440 	call	8006344 <_Bfree>
 8003278:	80001015 	stw	zero,64(r16)
 800327c:	a8002d16 	blt	r21,zero,8003334 <_dtoa_r+0x124>
 8003280:	88000015 	stw	zero,0(r17)
 8003284:	a8dffc2c 	andhi	r3,r21,32752
 8003288:	009ffc34 	movhi	r2,32752
 800328c:	18801b26 	beq	r3,r2,80032fc <_dtoa_r+0xec>
 8003290:	9009883a 	mov	r4,r18
 8003294:	980b883a 	mov	r5,r19
 8003298:	000d883a 	mov	r6,zero
 800329c:	000f883a 	mov	r7,zero
 80032a0:	800bf5c0 	call	800bf5c <__eqdf2>
 80032a4:	10002a1e 	bne	r2,zero,8003350 <_dtoa_r+0x140>
 80032a8:	d8c02317 	ldw	r3,140(sp)
 80032ac:	d9002517 	ldw	r4,148(sp)
 80032b0:	00800044 	movi	r2,1
 80032b4:	18800015 	stw	r2,0(r3)
 80032b8:	2001a226 	beq	r4,zero,8003944 <_dtoa_r+0x734>
 80032bc:	00820074 	movhi	r2,2049
 80032c0:	10801644 	addi	r2,r2,89
 80032c4:	20800015 	stw	r2,0(r4)
 80032c8:	10bfffc4 	addi	r2,r2,-1
 80032cc:	dfc02117 	ldw	ra,132(sp)
 80032d0:	df002017 	ldw	fp,128(sp)
 80032d4:	ddc01f17 	ldw	r23,124(sp)
 80032d8:	dd801e17 	ldw	r22,120(sp)
 80032dc:	dd401d17 	ldw	r21,116(sp)
 80032e0:	dd001c17 	ldw	r20,112(sp)
 80032e4:	dcc01b17 	ldw	r19,108(sp)
 80032e8:	dc801a17 	ldw	r18,104(sp)
 80032ec:	dc401917 	ldw	r17,100(sp)
 80032f0:	dc001817 	ldw	r16,96(sp)
 80032f4:	dec02204 	addi	sp,sp,136
 80032f8:	f800283a 	ret
 80032fc:	d8c02317 	ldw	r3,140(sp)
 8003300:	0089c3c4 	movi	r2,9999
 8003304:	18800015 	stw	r2,0(r3)
 8003308:	90017c26 	beq	r18,zero,80038fc <_dtoa_r+0x6ec>
 800330c:	00820074 	movhi	r2,2049
 8003310:	10802204 	addi	r2,r2,136
 8003314:	d9002517 	ldw	r4,148(sp)
 8003318:	203fec26 	beq	r4,zero,80032cc <_dtoa_r+0xbc>
 800331c:	10c000c7 	ldb	r3,3(r2)
 8003320:	18017d1e 	bne	r3,zero,8003918 <_dtoa_r+0x708>
 8003324:	10c000c4 	addi	r3,r2,3
 8003328:	d9802517 	ldw	r6,148(sp)
 800332c:	30c00015 	stw	r3,0(r6)
 8003330:	003fe606 	br	80032cc <_dtoa_r+0xbc>
 8003334:	04e00034 	movhi	r19,32768
 8003338:	9cffffc4 	addi	r19,r19,-1
 800333c:	00800044 	movi	r2,1
 8003340:	ace6703a 	and	r19,r21,r19
 8003344:	88800015 	stw	r2,0(r17)
 8003348:	982b883a 	mov	r21,r19
 800334c:	003fcd06 	br	8003284 <_dtoa_r+0x74>
 8003350:	d8800204 	addi	r2,sp,8
 8003354:	a822d53a 	srli	r17,r21,20
 8003358:	d8800015 	stw	r2,0(sp)
 800335c:	8009883a 	mov	r4,r16
 8003360:	900b883a 	mov	r5,r18
 8003364:	980d883a 	mov	r6,r19
 8003368:	d9c00104 	addi	r7,sp,4
 800336c:	8006fa00 	call	8006fa0 <__d2b>
 8003370:	1039883a 	mov	fp,r2
 8003374:	88016a1e 	bne	r17,zero,8003920 <_dtoa_r+0x710>
 8003378:	dd000217 	ldw	r20,8(sp)
 800337c:	dc400117 	ldw	r17,4(sp)
 8003380:	00befbc4 	movi	r2,-1041
 8003384:	a463883a 	add	r17,r20,r17
 8003388:	8882ea16 	blt	r17,r2,8003f34 <_dtoa_r+0xd24>
 800338c:	00bf0384 	movi	r2,-1010
 8003390:	1445c83a 	sub	r2,r2,r17
 8003394:	89010484 	addi	r4,r17,1042
 8003398:	a8aa983a 	sll	r21,r21,r2
 800339c:	9108d83a 	srl	r4,r18,r4
 80033a0:	a908b03a 	or	r4,r21,r4
 80033a4:	800d4340 	call	800d434 <__floatunsidf>
 80033a8:	017f8434 	movhi	r5,65040
 80033ac:	01800044 	movi	r6,1
 80033b0:	1009883a 	mov	r4,r2
 80033b4:	194b883a 	add	r5,r3,r5
 80033b8:	8c7fffc4 	addi	r17,r17,-1
 80033bc:	d9800f15 	stw	r6,60(sp)
 80033c0:	000d883a 	mov	r6,zero
 80033c4:	01cffe34 	movhi	r7,16376
 80033c8:	800ca0c0 	call	800ca0c <__subdf3>
 80033cc:	0198dbf4 	movhi	r6,25455
 80033d0:	01cff4f4 	movhi	r7,16339
 80033d4:	1009883a 	mov	r4,r2
 80033d8:	180b883a 	mov	r5,r3
 80033dc:	3190d844 	addi	r6,r6,17249
 80033e0:	39e1e9c4 	addi	r7,r7,-30809
 80033e4:	800c1a00 	call	800c1a0 <__muldf3>
 80033e8:	01a2d874 	movhi	r6,35681
 80033ec:	01cff1f4 	movhi	r7,16327
 80033f0:	180b883a 	mov	r5,r3
 80033f4:	31b22cc4 	addi	r6,r6,-14157
 80033f8:	39e28a04 	addi	r7,r7,-30168
 80033fc:	1009883a 	mov	r4,r2
 8003400:	800ad400 	call	800ad40 <__adddf3>
 8003404:	8809883a 	mov	r4,r17
 8003408:	102d883a 	mov	r22,r2
 800340c:	182b883a 	mov	r21,r3
 8003410:	800d3640 	call	800d364 <__floatsidf>
 8003414:	019427f4 	movhi	r6,20639
 8003418:	01cff4f4 	movhi	r7,16339
 800341c:	1009883a 	mov	r4,r2
 8003420:	180b883a 	mov	r5,r3
 8003424:	319e7ec4 	addi	r6,r6,31227
 8003428:	39d104c4 	addi	r7,r7,17427
 800342c:	800c1a00 	call	800c1a0 <__muldf3>
 8003430:	b009883a 	mov	r4,r22
 8003434:	a80b883a 	mov	r5,r21
 8003438:	100d883a 	mov	r6,r2
 800343c:	180f883a 	mov	r7,r3
 8003440:	800ad400 	call	800ad40 <__adddf3>
 8003444:	1009883a 	mov	r4,r2
 8003448:	180b883a 	mov	r5,r3
 800344c:	102d883a 	mov	r22,r2
 8003450:	182b883a 	mov	r21,r3
 8003454:	800d2dc0 	call	800d2dc <__fixdfsi>
 8003458:	b009883a 	mov	r4,r22
 800345c:	a80b883a 	mov	r5,r21
 8003460:	000d883a 	mov	r6,zero
 8003464:	000f883a 	mov	r7,zero
 8003468:	d8800515 	stw	r2,20(sp)
 800346c:	800c0c00 	call	800c0c0 <__ledf2>
 8003470:	10023116 	blt	r2,zero,8003d38 <_dtoa_r+0xb28>
 8003474:	d8c00517 	ldw	r3,20(sp)
 8003478:	00800584 	movi	r2,22
 800347c:	10c21f36 	bltu	r2,r3,8003cfc <_dtoa_r+0xaec>
 8003480:	180490fa 	slli	r2,r3,3
 8003484:	00c20074 	movhi	r3,2049
 8003488:	18c03e04 	addi	r3,r3,248
 800348c:	1885883a 	add	r2,r3,r2
 8003490:	11000017 	ldw	r4,0(r2)
 8003494:	11400117 	ldw	r5,4(r2)
 8003498:	900d883a 	mov	r6,r18
 800349c:	980f883a 	mov	r7,r19
 80034a0:	800bfe00 	call	800bfe0 <__gedf2>
 80034a4:	0082a70e 	bge	zero,r2,8003f44 <_dtoa_r+0xd34>
 80034a8:	d9000517 	ldw	r4,20(sp)
 80034ac:	d8000d15 	stw	zero,52(sp)
 80034b0:	213fffc4 	addi	r4,r4,-1
 80034b4:	d9000515 	stw	r4,20(sp)
 80034b8:	a463c83a 	sub	r17,r20,r17
 80034bc:	8dbfffc4 	addi	r22,r17,-1
 80034c0:	b0021916 	blt	r22,zero,8003d28 <_dtoa_r+0xb18>
 80034c4:	d8000815 	stw	zero,32(sp)
 80034c8:	d8800517 	ldw	r2,20(sp)
 80034cc:	10020e16 	blt	r2,zero,8003d08 <_dtoa_r+0xaf8>
 80034d0:	b0ad883a 	add	r22,r22,r2
 80034d4:	d8800a15 	stw	r2,40(sp)
 80034d8:	d8000915 	stw	zero,36(sp)
 80034dc:	d8c00317 	ldw	r3,12(sp)
 80034e0:	00800244 	movi	r2,9
 80034e4:	10c11a36 	bltu	r2,r3,8003950 <_dtoa_r+0x740>
 80034e8:	00800144 	movi	r2,5
 80034ec:	10c4fc0e 	bge	r2,r3,80048e0 <_dtoa_r+0x16d0>
 80034f0:	18ffff04 	addi	r3,r3,-4
 80034f4:	d8c00315 	stw	r3,12(sp)
 80034f8:	0029883a 	mov	r20,zero
 80034fc:	d9800317 	ldw	r6,12(sp)
 8003500:	008000c4 	movi	r2,3
 8003504:	3083bd26 	beq	r6,r2,80043fc <_dtoa_r+0x11ec>
 8003508:	1183670e 	bge	r2,r6,80042a8 <_dtoa_r+0x1098>
 800350c:	d8c00317 	ldw	r3,12(sp)
 8003510:	00800104 	movi	r2,4
 8003514:	1882e726 	beq	r3,r2,80040b4 <_dtoa_r+0xea4>
 8003518:	00800144 	movi	r2,5
 800351c:	1884f21e 	bne	r3,r2,80048e8 <_dtoa_r+0x16d8>
 8003520:	00800044 	movi	r2,1
 8003524:	d8800b15 	stw	r2,44(sp)
 8003528:	d8c02217 	ldw	r3,136(sp)
 800352c:	d9000517 	ldw	r4,20(sp)
 8003530:	1907883a 	add	r3,r3,r4
 8003534:	19800044 	addi	r6,r3,1
 8003538:	d8c00c15 	stw	r3,48(sp)
 800353c:	d9800615 	stw	r6,24(sp)
 8003540:	0183c30e 	bge	zero,r6,8004450 <_dtoa_r+0x1240>
 8003544:	d9800617 	ldw	r6,24(sp)
 8003548:	3023883a 	mov	r17,r6
 800354c:	80001115 	stw	zero,68(r16)
 8003550:	008005c4 	movi	r2,23
 8003554:	1184f62e 	bgeu	r2,r6,8004930 <_dtoa_r+0x1720>
 8003558:	00c00044 	movi	r3,1
 800355c:	00800104 	movi	r2,4
 8003560:	1085883a 	add	r2,r2,r2
 8003564:	11000504 	addi	r4,r2,20
 8003568:	180b883a 	mov	r5,r3
 800356c:	18c00044 	addi	r3,r3,1
 8003570:	313ffb2e 	bgeu	r6,r4,8003560 <_dtoa_r+0x350>
 8003574:	81401115 	stw	r5,68(r16)
 8003578:	8009883a 	mov	r4,r16
 800357c:	800629c0 	call	800629c <_Balloc>
 8003580:	d8800715 	stw	r2,28(sp)
 8003584:	80801015 	stw	r2,64(r16)
 8003588:	00800384 	movi	r2,14
 800358c:	1440fd36 	bltu	r2,r17,8003984 <_dtoa_r+0x774>
 8003590:	a000fc26 	beq	r20,zero,8003984 <_dtoa_r+0x774>
 8003594:	d8800517 	ldw	r2,20(sp)
 8003598:	0083b90e 	bge	zero,r2,8004480 <_dtoa_r+0x1270>
 800359c:	d8c00517 	ldw	r3,20(sp)
 80035a0:	108003cc 	andi	r2,r2,15
 80035a4:	100490fa 	slli	r2,r2,3
 80035a8:	182fd13a 	srai	r23,r3,4
 80035ac:	00c20074 	movhi	r3,2049
 80035b0:	18c03e04 	addi	r3,r3,248
 80035b4:	1885883a 	add	r2,r3,r2
 80035b8:	b8c0040c 	andi	r3,r23,16
 80035bc:	12c00017 	ldw	r11,0(r2)
 80035c0:	12800117 	ldw	r10,4(r2)
 80035c4:	18039726 	beq	r3,zero,8004424 <_dtoa_r+0x1214>
 80035c8:	00820074 	movhi	r2,2049
 80035cc:	10803404 	addi	r2,r2,208
 80035d0:	11800817 	ldw	r6,32(r2)
 80035d4:	11c00917 	ldw	r7,36(r2)
 80035d8:	9009883a 	mov	r4,r18
 80035dc:	980b883a 	mov	r5,r19
 80035e0:	da801615 	stw	r10,88(sp)
 80035e4:	dac01515 	stw	r11,84(sp)
 80035e8:	800b5dc0 	call	800b5dc <__divdf3>
 80035ec:	da801617 	ldw	r10,88(sp)
 80035f0:	dac01517 	ldw	r11,84(sp)
 80035f4:	bdc003cc 	andi	r23,r23,15
 80035f8:	044000c4 	movi	r17,3
 80035fc:	d8800e15 	stw	r2,56(sp)
 8003600:	182b883a 	mov	r21,r3
 8003604:	b8001126 	beq	r23,zero,800364c <_dtoa_r+0x43c>
 8003608:	05020074 	movhi	r20,2049
 800360c:	a5003404 	addi	r20,r20,208
 8003610:	5805883a 	mov	r2,r11
 8003614:	5007883a 	mov	r3,r10
 8003618:	b980004c 	andi	r6,r23,1
 800361c:	1009883a 	mov	r4,r2
 8003620:	b82fd07a 	srai	r23,r23,1
 8003624:	180b883a 	mov	r5,r3
 8003628:	30000426 	beq	r6,zero,800363c <_dtoa_r+0x42c>
 800362c:	a1800017 	ldw	r6,0(r20)
 8003630:	a1c00117 	ldw	r7,4(r20)
 8003634:	8c400044 	addi	r17,r17,1
 8003638:	800c1a00 	call	800c1a0 <__muldf3>
 800363c:	a5000204 	addi	r20,r20,8
 8003640:	b83ff51e 	bne	r23,zero,8003618 <_dtoa_r+0x408>
 8003644:	1017883a 	mov	r11,r2
 8003648:	1815883a 	mov	r10,r3
 800364c:	d9000e17 	ldw	r4,56(sp)
 8003650:	a80b883a 	mov	r5,r21
 8003654:	580d883a 	mov	r6,r11
 8003658:	500f883a 	mov	r7,r10
 800365c:	800b5dc0 	call	800b5dc <__divdf3>
 8003660:	1029883a 	mov	r20,r2
 8003664:	182b883a 	mov	r21,r3
 8003668:	d9800d17 	ldw	r6,52(sp)
 800366c:	30000626 	beq	r6,zero,8003688 <_dtoa_r+0x478>
 8003670:	a009883a 	mov	r4,r20
 8003674:	a80b883a 	mov	r5,r21
 8003678:	000d883a 	mov	r6,zero
 800367c:	01cffc34 	movhi	r7,16368
 8003680:	800c0c00 	call	800c0c0 <__ledf2>
 8003684:	10043216 	blt	r2,zero,8004750 <_dtoa_r+0x1540>
 8003688:	8809883a 	mov	r4,r17
 800368c:	800d3640 	call	800d364 <__floatsidf>
 8003690:	1009883a 	mov	r4,r2
 8003694:	180b883a 	mov	r5,r3
 8003698:	a00d883a 	mov	r6,r20
 800369c:	a80f883a 	mov	r7,r21
 80036a0:	800c1a00 	call	800c1a0 <__muldf3>
 80036a4:	000d883a 	mov	r6,zero
 80036a8:	1009883a 	mov	r4,r2
 80036ac:	180b883a 	mov	r5,r3
 80036b0:	01d00734 	movhi	r7,16412
 80036b4:	800ad400 	call	800ad40 <__adddf3>
 80036b8:	1023883a 	mov	r17,r2
 80036bc:	d9800617 	ldw	r6,24(sp)
 80036c0:	00bf3034 	movhi	r2,64704
 80036c4:	1885883a 	add	r2,r3,r2
 80036c8:	d8800e15 	stw	r2,56(sp)
 80036cc:	30032e26 	beq	r6,zero,8004388 <_dtoa_r+0x1178>
 80036d0:	d8c00517 	ldw	r3,20(sp)
 80036d4:	da800617 	ldw	r10,24(sp)
 80036d8:	d8c01215 	stw	r3,72(sp)
 80036dc:	d9000b17 	ldw	r4,44(sp)
 80036e0:	2003b026 	beq	r4,zero,80045a4 <_dtoa_r+0x1394>
 80036e4:	50bfffc4 	addi	r2,r10,-1
 80036e8:	100490fa 	slli	r2,r2,3
 80036ec:	00c20074 	movhi	r3,2049
 80036f0:	18c03e04 	addi	r3,r3,248
 80036f4:	1885883a 	add	r2,r3,r2
 80036f8:	11800017 	ldw	r6,0(r2)
 80036fc:	11c00117 	ldw	r7,4(r2)
 8003700:	d8800717 	ldw	r2,28(sp)
 8003704:	0009883a 	mov	r4,zero
 8003708:	014ff834 	movhi	r5,16352
 800370c:	da801615 	stw	r10,88(sp)
 8003710:	15c00044 	addi	r23,r2,1
 8003714:	800b5dc0 	call	800b5dc <__divdf3>
 8003718:	d9c00e17 	ldw	r7,56(sp)
 800371c:	880d883a 	mov	r6,r17
 8003720:	1009883a 	mov	r4,r2
 8003724:	180b883a 	mov	r5,r3
 8003728:	800ca0c0 	call	800ca0c <__subdf3>
 800372c:	a80b883a 	mov	r5,r21
 8003730:	a009883a 	mov	r4,r20
 8003734:	d8c01015 	stw	r3,64(sp)
 8003738:	d8800e15 	stw	r2,56(sp)
 800373c:	800d2dc0 	call	800d2dc <__fixdfsi>
 8003740:	1009883a 	mov	r4,r2
 8003744:	d8801715 	stw	r2,92(sp)
 8003748:	800d3640 	call	800d364 <__floatsidf>
 800374c:	a009883a 	mov	r4,r20
 8003750:	a80b883a 	mov	r5,r21
 8003754:	100d883a 	mov	r6,r2
 8003758:	180f883a 	mov	r7,r3
 800375c:	800ca0c0 	call	800ca0c <__subdf3>
 8003760:	da001717 	ldw	r8,92(sp)
 8003764:	1829883a 	mov	r20,r3
 8003768:	d8c00717 	ldw	r3,28(sp)
 800376c:	d9000e17 	ldw	r4,56(sp)
 8003770:	d9401017 	ldw	r5,64(sp)
 8003774:	42000c04 	addi	r8,r8,48
 8003778:	1023883a 	mov	r17,r2
 800377c:	1a000005 	stb	r8,0(r3)
 8003780:	880d883a 	mov	r6,r17
 8003784:	a00f883a 	mov	r7,r20
 8003788:	402b883a 	mov	r21,r8
 800378c:	800bfe00 	call	800bfe0 <__gedf2>
 8003790:	00844516 	blt	zero,r2,80048a8 <_dtoa_r+0x1698>
 8003794:	0009883a 	mov	r4,zero
 8003798:	014ffc34 	movhi	r5,16368
 800379c:	880d883a 	mov	r6,r17
 80037a0:	a00f883a 	mov	r7,r20
 80037a4:	800ca0c0 	call	800ca0c <__subdf3>
 80037a8:	d9000e17 	ldw	r4,56(sp)
 80037ac:	d9401017 	ldw	r5,64(sp)
 80037b0:	100d883a 	mov	r6,r2
 80037b4:	180f883a 	mov	r7,r3
 80037b8:	800bfe00 	call	800bfe0 <__gedf2>
 80037bc:	da801617 	ldw	r10,88(sp)
 80037c0:	00843616 	blt	zero,r2,800489c <_dtoa_r+0x168c>
 80037c4:	00800044 	movi	r2,1
 80037c8:	12806e0e 	bge	r2,r10,8003984 <_dtoa_r+0x774>
 80037cc:	d9000717 	ldw	r4,28(sp)
 80037d0:	dd801315 	stw	r22,76(sp)
 80037d4:	dc001115 	stw	r16,68(sp)
 80037d8:	2295883a 	add	r10,r4,r10
 80037dc:	dcc01415 	stw	r19,80(sp)
 80037e0:	502d883a 	mov	r22,r10
 80037e4:	dcc01017 	ldw	r19,64(sp)
 80037e8:	b821883a 	mov	r16,r23
 80037ec:	dc801015 	stw	r18,64(sp)
 80037f0:	dc800e17 	ldw	r18,56(sp)
 80037f4:	00000906 	br	800381c <_dtoa_r+0x60c>
 80037f8:	800ca0c0 	call	800ca0c <__subdf3>
 80037fc:	1009883a 	mov	r4,r2
 8003800:	180b883a 	mov	r5,r3
 8003804:	900d883a 	mov	r6,r18
 8003808:	980f883a 	mov	r7,r19
 800380c:	800c0c00 	call	800c0c0 <__ledf2>
 8003810:	10040e16 	blt	r2,zero,800484c <_dtoa_r+0x163c>
 8003814:	b821883a 	mov	r16,r23
 8003818:	bd841026 	beq	r23,r22,800485c <_dtoa_r+0x164c>
 800381c:	9009883a 	mov	r4,r18
 8003820:	980b883a 	mov	r5,r19
 8003824:	000d883a 	mov	r6,zero
 8003828:	01d00934 	movhi	r7,16420
 800382c:	800c1a00 	call	800c1a0 <__muldf3>
 8003830:	000d883a 	mov	r6,zero
 8003834:	01d00934 	movhi	r7,16420
 8003838:	8809883a 	mov	r4,r17
 800383c:	a00b883a 	mov	r5,r20
 8003840:	1025883a 	mov	r18,r2
 8003844:	1827883a 	mov	r19,r3
 8003848:	800c1a00 	call	800c1a0 <__muldf3>
 800384c:	180b883a 	mov	r5,r3
 8003850:	1009883a 	mov	r4,r2
 8003854:	1823883a 	mov	r17,r3
 8003858:	1029883a 	mov	r20,r2
 800385c:	800d2dc0 	call	800d2dc <__fixdfsi>
 8003860:	1009883a 	mov	r4,r2
 8003864:	102b883a 	mov	r21,r2
 8003868:	800d3640 	call	800d364 <__floatsidf>
 800386c:	a009883a 	mov	r4,r20
 8003870:	880b883a 	mov	r5,r17
 8003874:	100d883a 	mov	r6,r2
 8003878:	180f883a 	mov	r7,r3
 800387c:	800ca0c0 	call	800ca0c <__subdf3>
 8003880:	ad400c04 	addi	r21,r21,48
 8003884:	1009883a 	mov	r4,r2
 8003888:	180b883a 	mov	r5,r3
 800388c:	900d883a 	mov	r6,r18
 8003890:	980f883a 	mov	r7,r19
 8003894:	85400005 	stb	r21,0(r16)
 8003898:	1023883a 	mov	r17,r2
 800389c:	1829883a 	mov	r20,r3
 80038a0:	800c0c00 	call	800c0c0 <__ledf2>
 80038a4:	bdc00044 	addi	r23,r23,1
 80038a8:	0009883a 	mov	r4,zero
 80038ac:	014ffc34 	movhi	r5,16368
 80038b0:	880d883a 	mov	r6,r17
 80038b4:	a00f883a 	mov	r7,r20
 80038b8:	103fcf0e 	bge	r2,zero,80037f8 <_dtoa_r+0x5e8>
 80038bc:	d9801217 	ldw	r6,72(sp)
 80038c0:	dc001117 	ldw	r16,68(sp)
 80038c4:	d9800515 	stw	r6,20(sp)
 80038c8:	8009883a 	mov	r4,r16
 80038cc:	e00b883a 	mov	r5,fp
 80038d0:	80063440 	call	8006344 <_Bfree>
 80038d4:	d8c00517 	ldw	r3,20(sp)
 80038d8:	d9002317 	ldw	r4,140(sp)
 80038dc:	d9802517 	ldw	r6,148(sp)
 80038e0:	b8000005 	stb	zero,0(r23)
 80038e4:	18800044 	addi	r2,r3,1
 80038e8:	20800015 	stw	r2,0(r4)
 80038ec:	30027226 	beq	r6,zero,80042b8 <_dtoa_r+0x10a8>
 80038f0:	35c00015 	stw	r23,0(r6)
 80038f4:	d8800717 	ldw	r2,28(sp)
 80038f8:	003e7406 	br	80032cc <_dtoa_r+0xbc>
 80038fc:	00800434 	movhi	r2,16
 8003900:	10bfffc4 	addi	r2,r2,-1
 8003904:	a8aa703a 	and	r21,r21,r2
 8003908:	a83e801e 	bne	r21,zero,800330c <_dtoa_r+0xfc>
 800390c:	00820074 	movhi	r2,2049
 8003910:	10801f04 	addi	r2,r2,124
 8003914:	003e7f06 	br	8003314 <_dtoa_r+0x104>
 8003918:	10c00204 	addi	r3,r2,8
 800391c:	003e8206 	br	8003328 <_dtoa_r+0x118>
 8003920:	01400434 	movhi	r5,16
 8003924:	297fffc4 	addi	r5,r5,-1
 8003928:	994a703a 	and	r5,r19,r5
 800392c:	9009883a 	mov	r4,r18
 8003930:	8c7f0044 	addi	r17,r17,-1023
 8003934:	294ffc34 	orhi	r5,r5,16368
 8003938:	dd000217 	ldw	r20,8(sp)
 800393c:	d8000f15 	stw	zero,60(sp)
 8003940:	003e9f06 	br	80033c0 <_dtoa_r+0x1b0>
 8003944:	00820074 	movhi	r2,2049
 8003948:	10801604 	addi	r2,r2,88
 800394c:	003e5f06 	br	80032cc <_dtoa_r+0xbc>
 8003950:	80001115 	stw	zero,68(r16)
 8003954:	8009883a 	mov	r4,r16
 8003958:	000b883a 	mov	r5,zero
 800395c:	800629c0 	call	800629c <_Balloc>
 8003960:	01bfffc4 	movi	r6,-1
 8003964:	d8800715 	stw	r2,28(sp)
 8003968:	80801015 	stw	r2,64(r16)
 800396c:	00800044 	movi	r2,1
 8003970:	d9800c15 	stw	r6,48(sp)
 8003974:	d8800b15 	stw	r2,44(sp)
 8003978:	d9800615 	stw	r6,24(sp)
 800397c:	d8002215 	stw	zero,136(sp)
 8003980:	d8000315 	stw	zero,12(sp)
 8003984:	d8800117 	ldw	r2,4(sp)
 8003988:	10008e16 	blt	r2,zero,8003bc4 <_dtoa_r+0x9b4>
 800398c:	d9000517 	ldw	r4,20(sp)
 8003990:	00c00384 	movi	r3,14
 8003994:	19008b16 	blt	r3,r4,8003bc4 <_dtoa_r+0x9b4>
 8003998:	200490fa 	slli	r2,r4,3
 800399c:	00c20074 	movhi	r3,2049
 80039a0:	d9802217 	ldw	r6,136(sp)
 80039a4:	18c03e04 	addi	r3,r3,248
 80039a8:	1885883a 	add	r2,r3,r2
 80039ac:	14400017 	ldw	r17,0(r2)
 80039b0:	15000117 	ldw	r20,4(r2)
 80039b4:	3001c716 	blt	r6,zero,80040d4 <_dtoa_r+0xec4>
 80039b8:	880d883a 	mov	r6,r17
 80039bc:	a00f883a 	mov	r7,r20
 80039c0:	9009883a 	mov	r4,r18
 80039c4:	980b883a 	mov	r5,r19
 80039c8:	800b5dc0 	call	800b5dc <__divdf3>
 80039cc:	180b883a 	mov	r5,r3
 80039d0:	1009883a 	mov	r4,r2
 80039d4:	800d2dc0 	call	800d2dc <__fixdfsi>
 80039d8:	1009883a 	mov	r4,r2
 80039dc:	102d883a 	mov	r22,r2
 80039e0:	800d3640 	call	800d364 <__floatsidf>
 80039e4:	1009883a 	mov	r4,r2
 80039e8:	180b883a 	mov	r5,r3
 80039ec:	880d883a 	mov	r6,r17
 80039f0:	a00f883a 	mov	r7,r20
 80039f4:	800c1a00 	call	800c1a0 <__muldf3>
 80039f8:	9009883a 	mov	r4,r18
 80039fc:	980b883a 	mov	r5,r19
 8003a00:	100d883a 	mov	r6,r2
 8003a04:	180f883a 	mov	r7,r3
 8003a08:	800ca0c0 	call	800ca0c <__subdf3>
 8003a0c:	d9000717 	ldw	r4,28(sp)
 8003a10:	d9800617 	ldw	r6,24(sp)
 8003a14:	180b883a 	mov	r5,r3
 8003a18:	b0c00c04 	addi	r3,r22,48
 8003a1c:	20c00005 	stb	r3,0(r4)
 8003a20:	25c00044 	addi	r23,r4,1
 8003a24:	01000044 	movi	r4,1
 8003a28:	1011883a 	mov	r8,r2
 8003a2c:	2807883a 	mov	r3,r5
 8003a30:	31003d26 	beq	r6,r4,8003b28 <_dtoa_r+0x918>
 8003a34:	000d883a 	mov	r6,zero
 8003a38:	01d00934 	movhi	r7,16420
 8003a3c:	1009883a 	mov	r4,r2
 8003a40:	800c1a00 	call	800c1a0 <__muldf3>
 8003a44:	1009883a 	mov	r4,r2
 8003a48:	180b883a 	mov	r5,r3
 8003a4c:	000d883a 	mov	r6,zero
 8003a50:	000f883a 	mov	r7,zero
 8003a54:	1027883a 	mov	r19,r2
 8003a58:	182b883a 	mov	r21,r3
 8003a5c:	800bf5c0 	call	800bf5c <__eqdf2>
 8003a60:	103f9926 	beq	r2,zero,80038c8 <_dtoa_r+0x6b8>
 8003a64:	d8c00617 	ldw	r3,24(sp)
 8003a68:	d9000717 	ldw	r4,28(sp)
 8003a6c:	b825883a 	mov	r18,r23
 8003a70:	18bfffc4 	addi	r2,r3,-1
 8003a74:	20ad883a 	add	r22,r4,r2
 8003a78:	dc000315 	stw	r16,12(sp)
 8003a7c:	00000a06 	br	8003aa8 <_dtoa_r+0x898>
 8003a80:	800c1a00 	call	800c1a0 <__muldf3>
 8003a84:	1009883a 	mov	r4,r2
 8003a88:	180b883a 	mov	r5,r3
 8003a8c:	000d883a 	mov	r6,zero
 8003a90:	000f883a 	mov	r7,zero
 8003a94:	1027883a 	mov	r19,r2
 8003a98:	182b883a 	mov	r21,r3
 8003a9c:	b825883a 	mov	r18,r23
 8003aa0:	800bf5c0 	call	800bf5c <__eqdf2>
 8003aa4:	10022626 	beq	r2,zero,8004340 <_dtoa_r+0x1130>
 8003aa8:	880d883a 	mov	r6,r17
 8003aac:	a00f883a 	mov	r7,r20
 8003ab0:	9809883a 	mov	r4,r19
 8003ab4:	a80b883a 	mov	r5,r21
 8003ab8:	800b5dc0 	call	800b5dc <__divdf3>
 8003abc:	180b883a 	mov	r5,r3
 8003ac0:	1009883a 	mov	r4,r2
 8003ac4:	800d2dc0 	call	800d2dc <__fixdfsi>
 8003ac8:	1009883a 	mov	r4,r2
 8003acc:	1021883a 	mov	r16,r2
 8003ad0:	800d3640 	call	800d364 <__floatsidf>
 8003ad4:	1009883a 	mov	r4,r2
 8003ad8:	180b883a 	mov	r5,r3
 8003adc:	880d883a 	mov	r6,r17
 8003ae0:	a00f883a 	mov	r7,r20
 8003ae4:	800c1a00 	call	800c1a0 <__muldf3>
 8003ae8:	9809883a 	mov	r4,r19
 8003aec:	a80b883a 	mov	r5,r21
 8003af0:	100d883a 	mov	r6,r2
 8003af4:	180f883a 	mov	r7,r3
 8003af8:	800ca0c0 	call	800ca0c <__subdf3>
 8003afc:	82000c04 	addi	r8,r16,48
 8003b00:	92000005 	stb	r8,0(r18)
 8003b04:	1009883a 	mov	r4,r2
 8003b08:	180b883a 	mov	r5,r3
 8003b0c:	000d883a 	mov	r6,zero
 8003b10:	01d00934 	movhi	r7,16420
 8003b14:	1011883a 	mov	r8,r2
 8003b18:	bdc00044 	addi	r23,r23,1
 8003b1c:	95bfd81e 	bne	r18,r22,8003a80 <_dtoa_r+0x870>
 8003b20:	802d883a 	mov	r22,r16
 8003b24:	dc000317 	ldw	r16,12(sp)
 8003b28:	4009883a 	mov	r4,r8
 8003b2c:	180b883a 	mov	r5,r3
 8003b30:	400d883a 	mov	r6,r8
 8003b34:	180f883a 	mov	r7,r3
 8003b38:	800ad400 	call	800ad40 <__adddf3>
 8003b3c:	8809883a 	mov	r4,r17
 8003b40:	a00b883a 	mov	r5,r20
 8003b44:	100d883a 	mov	r6,r2
 8003b48:	180f883a 	mov	r7,r3
 8003b4c:	1027883a 	mov	r19,r2
 8003b50:	1825883a 	mov	r18,r3
 8003b54:	800c0c00 	call	800c0c0 <__ledf2>
 8003b58:	10000816 	blt	r2,zero,8003b7c <_dtoa_r+0x96c>
 8003b5c:	8809883a 	mov	r4,r17
 8003b60:	a00b883a 	mov	r5,r20
 8003b64:	980d883a 	mov	r6,r19
 8003b68:	900f883a 	mov	r7,r18
 8003b6c:	800bf5c0 	call	800bf5c <__eqdf2>
 8003b70:	103f551e 	bne	r2,zero,80038c8 <_dtoa_r+0x6b8>
 8003b74:	b580004c 	andi	r22,r22,1
 8003b78:	b03f5326 	beq	r22,zero,80038c8 <_dtoa_r+0x6b8>
 8003b7c:	bd7fffc3 	ldbu	r21,-1(r23)
 8003b80:	b8bfffc4 	addi	r2,r23,-1
 8003b84:	1007883a 	mov	r3,r2
 8003b88:	01400e44 	movi	r5,57
 8003b8c:	d9800717 	ldw	r6,28(sp)
 8003b90:	00000506 	br	8003ba8 <_dtoa_r+0x998>
 8003b94:	18ffffc4 	addi	r3,r3,-1
 8003b98:	30825e26 	beq	r6,r2,8004514 <_dtoa_r+0x1304>
 8003b9c:	1d400003 	ldbu	r21,0(r3)
 8003ba0:	102f883a 	mov	r23,r2
 8003ba4:	10bfffc4 	addi	r2,r2,-1
 8003ba8:	a9003fcc 	andi	r4,r21,255
 8003bac:	2100201c 	xori	r4,r4,128
 8003bb0:	213fe004 	addi	r4,r4,-128
 8003bb4:	217ff726 	beq	r4,r5,8003b94 <_dtoa_r+0x984>
 8003bb8:	aa000044 	addi	r8,r21,1
 8003bbc:	12000005 	stb	r8,0(r2)
 8003bc0:	003f4106 	br	80038c8 <_dtoa_r+0x6b8>
 8003bc4:	d8c00b17 	ldw	r3,44(sp)
 8003bc8:	18006726 	beq	r3,zero,8003d68 <_dtoa_r+0xb58>
 8003bcc:	d9000317 	ldw	r4,12(sp)
 8003bd0:	00c00044 	movi	r3,1
 8003bd4:	19016a0e 	bge	r3,r4,8004180 <_dtoa_r+0xf70>
 8003bd8:	d8800617 	ldw	r2,24(sp)
 8003bdc:	d8c00917 	ldw	r3,36(sp)
 8003be0:	157fffc4 	addi	r21,r2,-1
 8003be4:	1d420716 	blt	r3,r21,8004404 <_dtoa_r+0x11f4>
 8003be8:	1d6bc83a 	sub	r21,r3,r21
 8003bec:	d8800617 	ldw	r2,24(sp)
 8003bf0:	1002c716 	blt	r2,zero,8004710 <_dtoa_r+0x1500>
 8003bf4:	dd000817 	ldw	r20,32(sp)
 8003bf8:	d8800617 	ldw	r2,24(sp)
 8003bfc:	d9800817 	ldw	r6,32(sp)
 8003c00:	8009883a 	mov	r4,r16
 8003c04:	01400044 	movi	r5,1
 8003c08:	308d883a 	add	r6,r6,r2
 8003c0c:	d9800815 	stw	r6,32(sp)
 8003c10:	b0ad883a 	add	r22,r22,r2
 8003c14:	80066d00 	call	80066d0 <__i2b>
 8003c18:	1023883a 	mov	r17,r2
 8003c1c:	a0000826 	beq	r20,zero,8003c40 <_dtoa_r+0xa30>
 8003c20:	0580070e 	bge	zero,r22,8003c40 <_dtoa_r+0xa30>
 8003c24:	b005883a 	mov	r2,r22
 8003c28:	a5812016 	blt	r20,r22,80040ac <_dtoa_r+0xe9c>
 8003c2c:	d8c00817 	ldw	r3,32(sp)
 8003c30:	a0a9c83a 	sub	r20,r20,r2
 8003c34:	b0adc83a 	sub	r22,r22,r2
 8003c38:	1887c83a 	sub	r3,r3,r2
 8003c3c:	d8c00815 	stw	r3,32(sp)
 8003c40:	d9000917 	ldw	r4,36(sp)
 8003c44:	0100140e 	bge	zero,r4,8003c98 <_dtoa_r+0xa88>
 8003c48:	d9800b17 	ldw	r6,44(sp)
 8003c4c:	3001e526 	beq	r6,zero,80043e4 <_dtoa_r+0x11d4>
 8003c50:	05400e0e 	bge	zero,r21,8003c8c <_dtoa_r+0xa7c>
 8003c54:	880b883a 	mov	r5,r17
 8003c58:	8009883a 	mov	r4,r16
 8003c5c:	a80d883a 	mov	r6,r21
 8003c60:	800699c0 	call	800699c <__pow5mult>
 8003c64:	e00d883a 	mov	r6,fp
 8003c68:	8009883a 	mov	r4,r16
 8003c6c:	100b883a 	mov	r5,r2
 8003c70:	1023883a 	mov	r17,r2
 8003c74:	800670c0 	call	800670c <__multiply>
 8003c78:	102f883a 	mov	r23,r2
 8003c7c:	e00b883a 	mov	r5,fp
 8003c80:	8009883a 	mov	r4,r16
 8003c84:	80063440 	call	8006344 <_Bfree>
 8003c88:	b839883a 	mov	fp,r23
 8003c8c:	d8800917 	ldw	r2,36(sp)
 8003c90:	154dc83a 	sub	r6,r2,r21
 8003c94:	3001281e 	bne	r6,zero,8004138 <_dtoa_r+0xf28>
 8003c98:	05c00044 	movi	r23,1
 8003c9c:	8009883a 	mov	r4,r16
 8003ca0:	b80b883a 	mov	r5,r23
 8003ca4:	80066d00 	call	80066d0 <__i2b>
 8003ca8:	d8c00a17 	ldw	r3,40(sp)
 8003cac:	102b883a 	mov	r21,r2
 8003cb0:	00c0310e 	bge	zero,r3,8003d78 <_dtoa_r+0xb68>
 8003cb4:	8009883a 	mov	r4,r16
 8003cb8:	100b883a 	mov	r5,r2
 8003cbc:	180d883a 	mov	r6,r3
 8003cc0:	800699c0 	call	800699c <__pow5mult>
 8003cc4:	d9000317 	ldw	r4,12(sp)
 8003cc8:	102b883a 	mov	r21,r2
 8003ccc:	b9011f0e 	bge	r23,r4,800414c <_dtoa_r+0xf3c>
 8003cd0:	0027883a 	mov	r19,zero
 8003cd4:	a8800417 	ldw	r2,16(r21)
 8003cd8:	10800104 	addi	r2,r2,4
 8003cdc:	1085883a 	add	r2,r2,r2
 8003ce0:	1085883a 	add	r2,r2,r2
 8003ce4:	a885883a 	add	r2,r21,r2
 8003ce8:	11000017 	ldw	r4,0(r2)
 8003cec:	80065b80 	call	80065b8 <__hi0bits>
 8003cf0:	00c00804 	movi	r3,32
 8003cf4:	1885c83a 	sub	r2,r3,r2
 8003cf8:	00002506 	br	8003d90 <_dtoa_r+0xb80>
 8003cfc:	01800044 	movi	r6,1
 8003d00:	d9800d15 	stw	r6,52(sp)
 8003d04:	003dec06 	br	80034b8 <_dtoa_r+0x2a8>
 8003d08:	d8c00817 	ldw	r3,32(sp)
 8003d0c:	d9000517 	ldw	r4,20(sp)
 8003d10:	d8000a15 	stw	zero,40(sp)
 8003d14:	1907c83a 	sub	r3,r3,r4
 8003d18:	010dc83a 	sub	r6,zero,r4
 8003d1c:	d8c00815 	stw	r3,32(sp)
 8003d20:	d9800915 	stw	r6,36(sp)
 8003d24:	003ded06 	br	80034dc <_dtoa_r+0x2cc>
 8003d28:	05adc83a 	sub	r22,zero,r22
 8003d2c:	dd800815 	stw	r22,32(sp)
 8003d30:	002d883a 	mov	r22,zero
 8003d34:	003de406 	br	80034c8 <_dtoa_r+0x2b8>
 8003d38:	d9000517 	ldw	r4,20(sp)
 8003d3c:	800d3640 	call	800d364 <__floatsidf>
 8003d40:	1009883a 	mov	r4,r2
 8003d44:	180b883a 	mov	r5,r3
 8003d48:	b00d883a 	mov	r6,r22
 8003d4c:	a80f883a 	mov	r7,r21
 8003d50:	800bf5c0 	call	800bf5c <__eqdf2>
 8003d54:	103dc726 	beq	r2,zero,8003474 <_dtoa_r+0x264>
 8003d58:	d8800517 	ldw	r2,20(sp)
 8003d5c:	10bfffc4 	addi	r2,r2,-1
 8003d60:	d8800515 	stw	r2,20(sp)
 8003d64:	003dc306 	br	8003474 <_dtoa_r+0x264>
 8003d68:	dd400917 	ldw	r21,36(sp)
 8003d6c:	dd000817 	ldw	r20,32(sp)
 8003d70:	0023883a 	mov	r17,zero
 8003d74:	003fa906 	br	8003c1c <_dtoa_r+0xa0c>
 8003d78:	d9800317 	ldw	r6,12(sp)
 8003d7c:	b981670e 	bge	r23,r6,800431c <_dtoa_r+0x110c>
 8003d80:	0027883a 	mov	r19,zero
 8003d84:	d8c00a17 	ldw	r3,40(sp)
 8003d88:	183fd21e 	bne	r3,zero,8003cd4 <_dtoa_r+0xac4>
 8003d8c:	00800044 	movi	r2,1
 8003d90:	1585883a 	add	r2,r2,r22
 8003d94:	108007cc 	andi	r2,r2,31
 8003d98:	10005f26 	beq	r2,zero,8003f18 <_dtoa_r+0xd08>
 8003d9c:	00c00804 	movi	r3,32
 8003da0:	1887c83a 	sub	r3,r3,r2
 8003da4:	01000104 	movi	r4,4
 8003da8:	20c2dd0e 	bge	r4,r3,8004920 <_dtoa_r+0x1710>
 8003dac:	d9000817 	ldw	r4,32(sp)
 8003db0:	00c00704 	movi	r3,28
 8003db4:	1885c83a 	sub	r2,r3,r2
 8003db8:	2089883a 	add	r4,r4,r2
 8003dbc:	d9000815 	stw	r4,32(sp)
 8003dc0:	a0a9883a 	add	r20,r20,r2
 8003dc4:	b0ad883a 	add	r22,r22,r2
 8003dc8:	d8800817 	ldw	r2,32(sp)
 8003dcc:	0080050e 	bge	zero,r2,8003de4 <_dtoa_r+0xbd4>
 8003dd0:	e00b883a 	mov	r5,fp
 8003dd4:	8009883a 	mov	r4,r16
 8003dd8:	100d883a 	mov	r6,r2
 8003ddc:	8006adc0 	call	8006adc <__lshift>
 8003de0:	1039883a 	mov	fp,r2
 8003de4:	0580050e 	bge	zero,r22,8003dfc <_dtoa_r+0xbec>
 8003de8:	a80b883a 	mov	r5,r21
 8003dec:	8009883a 	mov	r4,r16
 8003df0:	b00d883a 	mov	r6,r22
 8003df4:	8006adc0 	call	8006adc <__lshift>
 8003df8:	102b883a 	mov	r21,r2
 8003dfc:	d8c00d17 	ldw	r3,52(sp)
 8003e00:	1801161e 	bne	r3,zero,800425c <_dtoa_r+0x104c>
 8003e04:	d8c00617 	ldw	r3,24(sp)
 8003e08:	00c12d0e 	bge	zero,r3,80042c0 <_dtoa_r+0x10b0>
 8003e0c:	d8c00b17 	ldw	r3,44(sp)
 8003e10:	1800571e 	bne	r3,zero,8003f70 <_dtoa_r+0xd60>
 8003e14:	dc800717 	ldw	r18,28(sp)
 8003e18:	dcc00617 	ldw	r19,24(sp)
 8003e1c:	9029883a 	mov	r20,r18
 8003e20:	00000206 	br	8003e2c <_dtoa_r+0xc1c>
 8003e24:	800636c0 	call	800636c <__multadd>
 8003e28:	1039883a 	mov	fp,r2
 8003e2c:	e009883a 	mov	r4,fp
 8003e30:	a80b883a 	mov	r5,r21
 8003e34:	8002fe80 	call	8002fe8 <quorem>
 8003e38:	10800c04 	addi	r2,r2,48
 8003e3c:	90800005 	stb	r2,0(r18)
 8003e40:	94800044 	addi	r18,r18,1
 8003e44:	9507c83a 	sub	r3,r18,r20
 8003e48:	8009883a 	mov	r4,r16
 8003e4c:	e00b883a 	mov	r5,fp
 8003e50:	01800284 	movi	r6,10
 8003e54:	000f883a 	mov	r7,zero
 8003e58:	1cfff216 	blt	r3,r19,8003e24 <_dtoa_r+0xc14>
 8003e5c:	1011883a 	mov	r8,r2
 8003e60:	d8800617 	ldw	r2,24(sp)
 8003e64:	00822e0e 	bge	zero,r2,8004720 <_dtoa_r+0x1510>
 8003e68:	d9000717 	ldw	r4,28(sp)
 8003e6c:	0025883a 	mov	r18,zero
 8003e70:	20af883a 	add	r23,r4,r2
 8003e74:	e00b883a 	mov	r5,fp
 8003e78:	01800044 	movi	r6,1
 8003e7c:	8009883a 	mov	r4,r16
 8003e80:	da001715 	stw	r8,92(sp)
 8003e84:	8006adc0 	call	8006adc <__lshift>
 8003e88:	1009883a 	mov	r4,r2
 8003e8c:	a80b883a 	mov	r5,r21
 8003e90:	1039883a 	mov	fp,r2
 8003e94:	8006c2c0 	call	8006c2c <__mcmp>
 8003e98:	da001717 	ldw	r8,92(sp)
 8003e9c:	00816e0e 	bge	zero,r2,8004458 <_dtoa_r+0x1248>
 8003ea0:	b93fffc3 	ldbu	r4,-1(r23)
 8003ea4:	b8bfffc4 	addi	r2,r23,-1
 8003ea8:	1007883a 	mov	r3,r2
 8003eac:	01800e44 	movi	r6,57
 8003eb0:	d9c00717 	ldw	r7,28(sp)
 8003eb4:	00000506 	br	8003ecc <_dtoa_r+0xcbc>
 8003eb8:	18ffffc4 	addi	r3,r3,-1
 8003ebc:	38811926 	beq	r7,r2,8004324 <_dtoa_r+0x1114>
 8003ec0:	19000003 	ldbu	r4,0(r3)
 8003ec4:	102f883a 	mov	r23,r2
 8003ec8:	10bfffc4 	addi	r2,r2,-1
 8003ecc:	21403fcc 	andi	r5,r4,255
 8003ed0:	2940201c 	xori	r5,r5,128
 8003ed4:	297fe004 	addi	r5,r5,-128
 8003ed8:	29bff726 	beq	r5,r6,8003eb8 <_dtoa_r+0xca8>
 8003edc:	21000044 	addi	r4,r4,1
 8003ee0:	11000005 	stb	r4,0(r2)
 8003ee4:	8009883a 	mov	r4,r16
 8003ee8:	a80b883a 	mov	r5,r21
 8003eec:	80063440 	call	8006344 <_Bfree>
 8003ef0:	883e7526 	beq	r17,zero,80038c8 <_dtoa_r+0x6b8>
 8003ef4:	90000426 	beq	r18,zero,8003f08 <_dtoa_r+0xcf8>
 8003ef8:	94400326 	beq	r18,r17,8003f08 <_dtoa_r+0xcf8>
 8003efc:	8009883a 	mov	r4,r16
 8003f00:	900b883a 	mov	r5,r18
 8003f04:	80063440 	call	8006344 <_Bfree>
 8003f08:	8009883a 	mov	r4,r16
 8003f0c:	880b883a 	mov	r5,r17
 8003f10:	80063440 	call	8006344 <_Bfree>
 8003f14:	003e6c06 	br	80038c8 <_dtoa_r+0x6b8>
 8003f18:	00800704 	movi	r2,28
 8003f1c:	d9800817 	ldw	r6,32(sp)
 8003f20:	a0a9883a 	add	r20,r20,r2
 8003f24:	b0ad883a 	add	r22,r22,r2
 8003f28:	308d883a 	add	r6,r6,r2
 8003f2c:	d9800815 	stw	r6,32(sp)
 8003f30:	003fa506 	br	8003dc8 <_dtoa_r+0xbb8>
 8003f34:	013efb84 	movi	r4,-1042
 8003f38:	246bc83a 	sub	r21,r4,r17
 8003f3c:	9548983a 	sll	r4,r18,r21
 8003f40:	003d1806 	br	80033a4 <_dtoa_r+0x194>
 8003f44:	d8000d15 	stw	zero,52(sp)
 8003f48:	003d5b06 	br	80034b8 <_dtoa_r+0x2a8>
 8003f4c:	880b883a 	mov	r5,r17
 8003f50:	8009883a 	mov	r4,r16
 8003f54:	01800284 	movi	r6,10
 8003f58:	000f883a 	mov	r7,zero
 8003f5c:	800636c0 	call	800636c <__multadd>
 8003f60:	1023883a 	mov	r17,r2
 8003f64:	d8800c17 	ldw	r2,48(sp)
 8003f68:	0082550e 	bge	zero,r2,80048c0 <_dtoa_r+0x16b0>
 8003f6c:	d8800615 	stw	r2,24(sp)
 8003f70:	0500050e 	bge	zero,r20,8003f88 <_dtoa_r+0xd78>
 8003f74:	880b883a 	mov	r5,r17
 8003f78:	8009883a 	mov	r4,r16
 8003f7c:	a00d883a 	mov	r6,r20
 8003f80:	8006adc0 	call	8006adc <__lshift>
 8003f84:	1023883a 	mov	r17,r2
 8003f88:	98016a1e 	bne	r19,zero,8004534 <_dtoa_r+0x1324>
 8003f8c:	8829883a 	mov	r20,r17
 8003f90:	d9000617 	ldw	r4,24(sp)
 8003f94:	dcc00717 	ldw	r19,28(sp)
 8003f98:	9480004c 	andi	r18,r18,1
 8003f9c:	20bfffc4 	addi	r2,r4,-1
 8003fa0:	9885883a 	add	r2,r19,r2
 8003fa4:	d8800415 	stw	r2,16(sp)
 8003fa8:	dc800615 	stw	r18,24(sp)
 8003fac:	e009883a 	mov	r4,fp
 8003fb0:	a80b883a 	mov	r5,r21
 8003fb4:	8002fe80 	call	8002fe8 <quorem>
 8003fb8:	e009883a 	mov	r4,fp
 8003fbc:	880b883a 	mov	r5,r17
 8003fc0:	102f883a 	mov	r23,r2
 8003fc4:	8006c2c0 	call	8006c2c <__mcmp>
 8003fc8:	8009883a 	mov	r4,r16
 8003fcc:	a80b883a 	mov	r5,r21
 8003fd0:	a00d883a 	mov	r6,r20
 8003fd4:	102d883a 	mov	r22,r2
 8003fd8:	8006c8c0 	call	8006c8c <__mdiff>
 8003fdc:	1007883a 	mov	r3,r2
 8003fe0:	10800317 	ldw	r2,12(r2)
 8003fe4:	bc800c04 	addi	r18,r23,48
 8003fe8:	1000971e 	bne	r2,zero,8004248 <_dtoa_r+0x1038>
 8003fec:	180b883a 	mov	r5,r3
 8003ff0:	e009883a 	mov	r4,fp
 8003ff4:	d8c01515 	stw	r3,84(sp)
 8003ff8:	8006c2c0 	call	8006c2c <__mcmp>
 8003ffc:	d8c01517 	ldw	r3,84(sp)
 8004000:	8009883a 	mov	r4,r16
 8004004:	d8801515 	stw	r2,84(sp)
 8004008:	180b883a 	mov	r5,r3
 800400c:	80063440 	call	8006344 <_Bfree>
 8004010:	d8801517 	ldw	r2,84(sp)
 8004014:	1000041e 	bne	r2,zero,8004028 <_dtoa_r+0xe18>
 8004018:	d9800317 	ldw	r6,12(sp)
 800401c:	3000021e 	bne	r6,zero,8004028 <_dtoa_r+0xe18>
 8004020:	d8c00617 	ldw	r3,24(sp)
 8004024:	18007626 	beq	r3,zero,8004200 <_dtoa_r+0xff0>
 8004028:	b0005b16 	blt	r22,zero,8004198 <_dtoa_r+0xf88>
 800402c:	b000041e 	bne	r22,zero,8004040 <_dtoa_r+0xe30>
 8004030:	d9000317 	ldw	r4,12(sp)
 8004034:	2000021e 	bne	r4,zero,8004040 <_dtoa_r+0xe30>
 8004038:	d8c00617 	ldw	r3,24(sp)
 800403c:	18005626 	beq	r3,zero,8004198 <_dtoa_r+0xf88>
 8004040:	00814d16 	blt	zero,r2,8004578 <_dtoa_r+0x1368>
 8004044:	d8c00417 	ldw	r3,16(sp)
 8004048:	9d800044 	addi	r22,r19,1
 800404c:	9c800005 	stb	r18,0(r19)
 8004050:	b02f883a 	mov	r23,r22
 8004054:	98c14c26 	beq	r19,r3,8004588 <_dtoa_r+0x1378>
 8004058:	e00b883a 	mov	r5,fp
 800405c:	8009883a 	mov	r4,r16
 8004060:	01800284 	movi	r6,10
 8004064:	000f883a 	mov	r7,zero
 8004068:	800636c0 	call	800636c <__multadd>
 800406c:	1039883a 	mov	fp,r2
 8004070:	8d006d26 	beq	r17,r20,8004228 <_dtoa_r+0x1018>
 8004074:	880b883a 	mov	r5,r17
 8004078:	01800284 	movi	r6,10
 800407c:	000f883a 	mov	r7,zero
 8004080:	8009883a 	mov	r4,r16
 8004084:	800636c0 	call	800636c <__multadd>
 8004088:	a00b883a 	mov	r5,r20
 800408c:	8009883a 	mov	r4,r16
 8004090:	01800284 	movi	r6,10
 8004094:	000f883a 	mov	r7,zero
 8004098:	1023883a 	mov	r17,r2
 800409c:	800636c0 	call	800636c <__multadd>
 80040a0:	1029883a 	mov	r20,r2
 80040a4:	b027883a 	mov	r19,r22
 80040a8:	003fc006 	br	8003fac <_dtoa_r+0xd9c>
 80040ac:	a005883a 	mov	r2,r20
 80040b0:	003ede06 	br	8003c2c <_dtoa_r+0xa1c>
 80040b4:	01000044 	movi	r4,1
 80040b8:	d9000b15 	stw	r4,44(sp)
 80040bc:	d9802217 	ldw	r6,136(sp)
 80040c0:	0180dc0e 	bge	zero,r6,8004434 <_dtoa_r+0x1224>
 80040c4:	3023883a 	mov	r17,r6
 80040c8:	d9800c15 	stw	r6,48(sp)
 80040cc:	d9800615 	stw	r6,24(sp)
 80040d0:	003d1e06 	br	800354c <_dtoa_r+0x33c>
 80040d4:	d8800617 	ldw	r2,24(sp)
 80040d8:	00be3716 	blt	zero,r2,80039b8 <_dtoa_r+0x7a8>
 80040dc:	1000be1e 	bne	r2,zero,80043d8 <_dtoa_r+0x11c8>
 80040e0:	8809883a 	mov	r4,r17
 80040e4:	a00b883a 	mov	r5,r20
 80040e8:	000d883a 	mov	r6,zero
 80040ec:	01d00534 	movhi	r7,16404
 80040f0:	800c1a00 	call	800c1a0 <__muldf3>
 80040f4:	1009883a 	mov	r4,r2
 80040f8:	180b883a 	mov	r5,r3
 80040fc:	900d883a 	mov	r6,r18
 8004100:	980f883a 	mov	r7,r19
 8004104:	800bfe00 	call	800bfe0 <__gedf2>
 8004108:	002b883a 	mov	r21,zero
 800410c:	0023883a 	mov	r17,zero
 8004110:	10007a16 	blt	r2,zero,80042fc <_dtoa_r+0x10ec>
 8004114:	d9002217 	ldw	r4,136(sp)
 8004118:	ddc00717 	ldw	r23,28(sp)
 800411c:	0108303a 	nor	r4,zero,r4
 8004120:	d9000515 	stw	r4,20(sp)
 8004124:	8009883a 	mov	r4,r16
 8004128:	a80b883a 	mov	r5,r21
 800412c:	80063440 	call	8006344 <_Bfree>
 8004130:	883f751e 	bne	r17,zero,8003f08 <_dtoa_r+0xcf8>
 8004134:	003de406 	br	80038c8 <_dtoa_r+0x6b8>
 8004138:	e00b883a 	mov	r5,fp
 800413c:	8009883a 	mov	r4,r16
 8004140:	800699c0 	call	800699c <__pow5mult>
 8004144:	1039883a 	mov	fp,r2
 8004148:	003ed306 	br	8003c98 <_dtoa_r+0xa88>
 800414c:	903ee01e 	bne	r18,zero,8003cd0 <_dtoa_r+0xac0>
 8004150:	00800434 	movhi	r2,16
 8004154:	10bfffc4 	addi	r2,r2,-1
 8004158:	9884703a 	and	r2,r19,r2
 800415c:	103f081e 	bne	r2,zero,8003d80 <_dtoa_r+0xb70>
 8004160:	9cdffc2c 	andhi	r19,r19,32752
 8004164:	983f0626 	beq	r19,zero,8003d80 <_dtoa_r+0xb70>
 8004168:	d8800817 	ldw	r2,32(sp)
 800416c:	b5800044 	addi	r22,r22,1
 8004170:	04c00044 	movi	r19,1
 8004174:	10800044 	addi	r2,r2,1
 8004178:	d8800815 	stw	r2,32(sp)
 800417c:	003f0106 	br	8003d84 <_dtoa_r+0xb74>
 8004180:	d9800f17 	ldw	r6,60(sp)
 8004184:	30016826 	beq	r6,zero,8004728 <_dtoa_r+0x1518>
 8004188:	10810cc4 	addi	r2,r2,1075
 800418c:	dd400917 	ldw	r21,36(sp)
 8004190:	dd000817 	ldw	r20,32(sp)
 8004194:	003e9906 	br	8003bfc <_dtoa_r+0x9ec>
 8004198:	9011883a 	mov	r8,r18
 800419c:	4007883a 	mov	r3,r8
 80041a0:	e02d883a 	mov	r22,fp
 80041a4:	0080100e 	bge	zero,r2,80041e8 <_dtoa_r+0xfd8>
 80041a8:	01800044 	movi	r6,1
 80041ac:	8009883a 	mov	r4,r16
 80041b0:	e00b883a 	mov	r5,fp
 80041b4:	da001515 	stw	r8,84(sp)
 80041b8:	da001715 	stw	r8,92(sp)
 80041bc:	8006adc0 	call	8006adc <__lshift>
 80041c0:	1009883a 	mov	r4,r2
 80041c4:	a80b883a 	mov	r5,r21
 80041c8:	102d883a 	mov	r22,r2
 80041cc:	8006c2c0 	call	8006c2c <__mcmp>
 80041d0:	d8c01517 	ldw	r3,84(sp)
 80041d4:	da001717 	ldw	r8,92(sp)
 80041d8:	0081a50e 	bge	zero,r2,8004870 <_dtoa_r+0x1660>
 80041dc:	00800e44 	movi	r2,57
 80041e0:	40817b26 	beq	r8,r2,80047d0 <_dtoa_r+0x15c0>
 80041e4:	40c00044 	addi	r3,r8,1
 80041e8:	8825883a 	mov	r18,r17
 80041ec:	9dc00044 	addi	r23,r19,1
 80041f0:	98c00005 	stb	r3,0(r19)
 80041f4:	a023883a 	mov	r17,r20
 80041f8:	b039883a 	mov	fp,r22
 80041fc:	003f3906 	br	8003ee4 <_dtoa_r+0xcd4>
 8004200:	00800e44 	movi	r2,57
 8004204:	9011883a 	mov	r8,r18
 8004208:	90817226 	beq	r18,r2,80047d4 <_dtoa_r+0x15c4>
 800420c:	0580010e 	bge	zero,r22,8004214 <_dtoa_r+0x1004>
 8004210:	ba000c44 	addi	r8,r23,49
 8004214:	8825883a 	mov	r18,r17
 8004218:	9dc00044 	addi	r23,r19,1
 800421c:	9a000005 	stb	r8,0(r19)
 8004220:	a023883a 	mov	r17,r20
 8004224:	003f2f06 	br	8003ee4 <_dtoa_r+0xcd4>
 8004228:	880b883a 	mov	r5,r17
 800422c:	8009883a 	mov	r4,r16
 8004230:	01800284 	movi	r6,10
 8004234:	000f883a 	mov	r7,zero
 8004238:	800636c0 	call	800636c <__multadd>
 800423c:	1023883a 	mov	r17,r2
 8004240:	1029883a 	mov	r20,r2
 8004244:	003f9706 	br	80040a4 <_dtoa_r+0xe94>
 8004248:	8009883a 	mov	r4,r16
 800424c:	180b883a 	mov	r5,r3
 8004250:	80063440 	call	8006344 <_Bfree>
 8004254:	00800044 	movi	r2,1
 8004258:	003f7306 	br	8004028 <_dtoa_r+0xe18>
 800425c:	e009883a 	mov	r4,fp
 8004260:	a80b883a 	mov	r5,r21
 8004264:	8006c2c0 	call	8006c2c <__mcmp>
 8004268:	103ee60e 	bge	r2,zero,8003e04 <_dtoa_r+0xbf4>
 800426c:	8009883a 	mov	r4,r16
 8004270:	e00b883a 	mov	r5,fp
 8004274:	01800284 	movi	r6,10
 8004278:	000f883a 	mov	r7,zero
 800427c:	800636c0 	call	800636c <__multadd>
 8004280:	d9000517 	ldw	r4,20(sp)
 8004284:	d9800b17 	ldw	r6,44(sp)
 8004288:	1039883a 	mov	fp,r2
 800428c:	213fffc4 	addi	r4,r4,-1
 8004290:	d9000515 	stw	r4,20(sp)
 8004294:	303f2d1e 	bne	r6,zero,8003f4c <_dtoa_r+0xd3c>
 8004298:	d9000c17 	ldw	r4,48(sp)
 800429c:	0101780e 	bge	zero,r4,8004880 <_dtoa_r+0x1670>
 80042a0:	d9000615 	stw	r4,24(sp)
 80042a4:	003edb06 	br	8003e14 <_dtoa_r+0xc04>
 80042a8:	00800084 	movi	r2,2
 80042ac:	30818e1e 	bne	r6,r2,80048e8 <_dtoa_r+0x16d8>
 80042b0:	d8000b15 	stw	zero,44(sp)
 80042b4:	003f8106 	br	80040bc <_dtoa_r+0xeac>
 80042b8:	d8800717 	ldw	r2,28(sp)
 80042bc:	003c0306 	br	80032cc <_dtoa_r+0xbc>
 80042c0:	d9000317 	ldw	r4,12(sp)
 80042c4:	00800084 	movi	r2,2
 80042c8:	113ed00e 	bge	r2,r4,8003e0c <_dtoa_r+0xbfc>
 80042cc:	d8c00617 	ldw	r3,24(sp)
 80042d0:	183f901e 	bne	r3,zero,8004114 <_dtoa_r+0xf04>
 80042d4:	a80b883a 	mov	r5,r21
 80042d8:	8009883a 	mov	r4,r16
 80042dc:	01800144 	movi	r6,5
 80042e0:	000f883a 	mov	r7,zero
 80042e4:	800636c0 	call	800636c <__multadd>
 80042e8:	e009883a 	mov	r4,fp
 80042ec:	100b883a 	mov	r5,r2
 80042f0:	102b883a 	mov	r21,r2
 80042f4:	8006c2c0 	call	8006c2c <__mcmp>
 80042f8:	00bf860e 	bge	zero,r2,8004114 <_dtoa_r+0xf04>
 80042fc:	d9800717 	ldw	r6,28(sp)
 8004300:	00800c44 	movi	r2,49
 8004304:	30800005 	stb	r2,0(r6)
 8004308:	d8800517 	ldw	r2,20(sp)
 800430c:	35c00044 	addi	r23,r6,1
 8004310:	10800044 	addi	r2,r2,1
 8004314:	d8800515 	stw	r2,20(sp)
 8004318:	003f8206 	br	8004124 <_dtoa_r+0xf14>
 800431c:	903e981e 	bne	r18,zero,8003d80 <_dtoa_r+0xb70>
 8004320:	003f8b06 	br	8004150 <_dtoa_r+0xf40>
 8004324:	d9800517 	ldw	r6,20(sp)
 8004328:	d8c00717 	ldw	r3,28(sp)
 800432c:	00800c44 	movi	r2,49
 8004330:	31800044 	addi	r6,r6,1
 8004334:	d9800515 	stw	r6,20(sp)
 8004338:	18800005 	stb	r2,0(r3)
 800433c:	003ee906 	br	8003ee4 <_dtoa_r+0xcd4>
 8004340:	dc000317 	ldw	r16,12(sp)
 8004344:	003d6006 	br	80038c8 <_dtoa_r+0x6b8>
 8004348:	8809883a 	mov	r4,r17
 800434c:	800d3640 	call	800d364 <__floatsidf>
 8004350:	a009883a 	mov	r4,r20
 8004354:	a80b883a 	mov	r5,r21
 8004358:	100d883a 	mov	r6,r2
 800435c:	180f883a 	mov	r7,r3
 8004360:	800c1a00 	call	800c1a0 <__muldf3>
 8004364:	1009883a 	mov	r4,r2
 8004368:	180b883a 	mov	r5,r3
 800436c:	000d883a 	mov	r6,zero
 8004370:	01d00734 	movhi	r7,16412
 8004374:	800ad400 	call	800ad40 <__adddf3>
 8004378:	1023883a 	mov	r17,r2
 800437c:	00bf3034 	movhi	r2,64704
 8004380:	1885883a 	add	r2,r3,r2
 8004384:	d8800e15 	stw	r2,56(sp)
 8004388:	a009883a 	mov	r4,r20
 800438c:	a80b883a 	mov	r5,r21
 8004390:	000d883a 	mov	r6,zero
 8004394:	01d00534 	movhi	r7,16404
 8004398:	800ca0c0 	call	800ca0c <__subdf3>
 800439c:	d9c00e17 	ldw	r7,56(sp)
 80043a0:	1009883a 	mov	r4,r2
 80043a4:	180b883a 	mov	r5,r3
 80043a8:	880d883a 	mov	r6,r17
 80043ac:	102b883a 	mov	r21,r2
 80043b0:	1829883a 	mov	r20,r3
 80043b4:	800bfe00 	call	800bfe0 <__gedf2>
 80043b8:	00807716 	blt	zero,r2,8004598 <_dtoa_r+0x1388>
 80043bc:	d8800e17 	ldw	r2,56(sp)
 80043c0:	a809883a 	mov	r4,r21
 80043c4:	a00b883a 	mov	r5,r20
 80043c8:	11e0003c 	xorhi	r7,r2,32768
 80043cc:	880d883a 	mov	r6,r17
 80043d0:	800c0c00 	call	800c0c0 <__ledf2>
 80043d4:	103d6b0e 	bge	r2,zero,8003984 <_dtoa_r+0x774>
 80043d8:	002b883a 	mov	r21,zero
 80043dc:	0023883a 	mov	r17,zero
 80043e0:	003f4c06 	br	8004114 <_dtoa_r+0xf04>
 80043e4:	d9800917 	ldw	r6,36(sp)
 80043e8:	e00b883a 	mov	r5,fp
 80043ec:	8009883a 	mov	r4,r16
 80043f0:	800699c0 	call	800699c <__pow5mult>
 80043f4:	1039883a 	mov	fp,r2
 80043f8:	003e2706 	br	8003c98 <_dtoa_r+0xa88>
 80043fc:	d8000b15 	stw	zero,44(sp)
 8004400:	003c4906 	br	8003528 <_dtoa_r+0x318>
 8004404:	d9000917 	ldw	r4,36(sp)
 8004408:	d9800a17 	ldw	r6,40(sp)
 800440c:	dd400915 	stw	r21,36(sp)
 8004410:	a905c83a 	sub	r2,r21,r4
 8004414:	308d883a 	add	r6,r6,r2
 8004418:	d9800a15 	stw	r6,40(sp)
 800441c:	002b883a 	mov	r21,zero
 8004420:	003df206 	br	8003bec <_dtoa_r+0x9dc>
 8004424:	dc800e15 	stw	r18,56(sp)
 8004428:	982b883a 	mov	r21,r19
 800442c:	04400084 	movi	r17,2
 8004430:	003c7406 	br	8003604 <_dtoa_r+0x3f4>
 8004434:	04400044 	movi	r17,1
 8004438:	dc400c15 	stw	r17,48(sp)
 800443c:	dc400615 	stw	r17,24(sp)
 8004440:	dc402215 	stw	r17,136(sp)
 8004444:	80001115 	stw	zero,68(r16)
 8004448:	000b883a 	mov	r5,zero
 800444c:	003c4a06 	br	8003578 <_dtoa_r+0x368>
 8004450:	3023883a 	mov	r17,r6
 8004454:	003ffb06 	br	8004444 <_dtoa_r+0x1234>
 8004458:	1000021e 	bne	r2,zero,8004464 <_dtoa_r+0x1254>
 800445c:	4200004c 	andi	r8,r8,1
 8004460:	403e8f1e 	bne	r8,zero,8003ea0 <_dtoa_r+0xc90>
 8004464:	01000c04 	movi	r4,48
 8004468:	00000106 	br	8004470 <_dtoa_r+0x1260>
 800446c:	102f883a 	mov	r23,r2
 8004470:	b8bfffc4 	addi	r2,r23,-1
 8004474:	10c00007 	ldb	r3,0(r2)
 8004478:	193ffc26 	beq	r3,r4,800446c <_dtoa_r+0x125c>
 800447c:	003e9906 	br	8003ee4 <_dtoa_r+0xcd4>
 8004480:	d9000517 	ldw	r4,20(sp)
 8004484:	012fc83a 	sub	r23,zero,r4
 8004488:	b800ad26 	beq	r23,zero,8004740 <_dtoa_r+0x1530>
 800448c:	b88003cc 	andi	r2,r23,15
 8004490:	100490fa 	slli	r2,r2,3
 8004494:	00c20074 	movhi	r3,2049
 8004498:	18c03e04 	addi	r3,r3,248
 800449c:	1885883a 	add	r2,r3,r2
 80044a0:	11800017 	ldw	r6,0(r2)
 80044a4:	11c00117 	ldw	r7,4(r2)
 80044a8:	b82fd13a 	srai	r23,r23,4
 80044ac:	9009883a 	mov	r4,r18
 80044b0:	980b883a 	mov	r5,r19
 80044b4:	800c1a00 	call	800c1a0 <__muldf3>
 80044b8:	1029883a 	mov	r20,r2
 80044bc:	182b883a 	mov	r21,r3
 80044c0:	b800f426 	beq	r23,zero,8004894 <_dtoa_r+0x1684>
 80044c4:	02020074 	movhi	r8,2049
 80044c8:	42003404 	addi	r8,r8,208
 80044cc:	8029883a 	mov	r20,r16
 80044d0:	04400084 	movi	r17,2
 80044d4:	4021883a 	mov	r16,r8
 80044d8:	b980004c 	andi	r6,r23,1
 80044dc:	1009883a 	mov	r4,r2
 80044e0:	b82fd07a 	srai	r23,r23,1
 80044e4:	180b883a 	mov	r5,r3
 80044e8:	30000426 	beq	r6,zero,80044fc <_dtoa_r+0x12ec>
 80044ec:	81800017 	ldw	r6,0(r16)
 80044f0:	81c00117 	ldw	r7,4(r16)
 80044f4:	8c400044 	addi	r17,r17,1
 80044f8:	800c1a00 	call	800c1a0 <__muldf3>
 80044fc:	84000204 	addi	r16,r16,8
 8004500:	b83ff51e 	bne	r23,zero,80044d8 <_dtoa_r+0x12c8>
 8004504:	a021883a 	mov	r16,r20
 8004508:	182b883a 	mov	r21,r3
 800450c:	1029883a 	mov	r20,r2
 8004510:	003c5506 	br	8003668 <_dtoa_r+0x458>
 8004514:	d9800517 	ldw	r6,20(sp)
 8004518:	d9000717 	ldw	r4,28(sp)
 800451c:	00c00c04 	movi	r3,48
 8004520:	31800044 	addi	r6,r6,1
 8004524:	d9800515 	stw	r6,20(sp)
 8004528:	20c00005 	stb	r3,0(r4)
 800452c:	02000c44 	movi	r8,49
 8004530:	003da206 	br	8003bbc <_dtoa_r+0x9ac>
 8004534:	89400117 	ldw	r5,4(r17)
 8004538:	8009883a 	mov	r4,r16
 800453c:	800629c0 	call	800629c <_Balloc>
 8004540:	89800417 	ldw	r6,16(r17)
 8004544:	11000304 	addi	r4,r2,12
 8004548:	89400304 	addi	r5,r17,12
 800454c:	31800084 	addi	r6,r6,2
 8004550:	318d883a 	add	r6,r6,r6
 8004554:	318d883a 	add	r6,r6,r6
 8004558:	1027883a 	mov	r19,r2
 800455c:	80060400 	call	8006040 <memcpy>
 8004560:	8009883a 	mov	r4,r16
 8004564:	980b883a 	mov	r5,r19
 8004568:	01800044 	movi	r6,1
 800456c:	8006adc0 	call	8006adc <__lshift>
 8004570:	1029883a 	mov	r20,r2
 8004574:	003e8606 	br	8003f90 <_dtoa_r+0xd80>
 8004578:	00800e44 	movi	r2,57
 800457c:	90809526 	beq	r18,r2,80047d4 <_dtoa_r+0x15c4>
 8004580:	92000044 	addi	r8,r18,1
 8004584:	003f2306 	br	8004214 <_dtoa_r+0x1004>
 8004588:	9011883a 	mov	r8,r18
 800458c:	8825883a 	mov	r18,r17
 8004590:	a023883a 	mov	r17,r20
 8004594:	003e3706 	br	8003e74 <_dtoa_r+0xc64>
 8004598:	002b883a 	mov	r21,zero
 800459c:	0023883a 	mov	r17,zero
 80045a0:	003f5606 	br	80042fc <_dtoa_r+0x10ec>
 80045a4:	51bfffc4 	addi	r6,r10,-1
 80045a8:	300490fa 	slli	r2,r6,3
 80045ac:	00c20074 	movhi	r3,2049
 80045b0:	18c03e04 	addi	r3,r3,248
 80045b4:	1885883a 	add	r2,r3,r2
 80045b8:	d9c00e17 	ldw	r7,56(sp)
 80045bc:	11000017 	ldw	r4,0(r2)
 80045c0:	11400117 	ldw	r5,4(r2)
 80045c4:	d8800717 	ldw	r2,28(sp)
 80045c8:	d9801015 	stw	r6,64(sp)
 80045cc:	880d883a 	mov	r6,r17
 80045d0:	da801615 	stw	r10,88(sp)
 80045d4:	15c00044 	addi	r23,r2,1
 80045d8:	800c1a00 	call	800c1a0 <__muldf3>
 80045dc:	a80b883a 	mov	r5,r21
 80045e0:	a009883a 	mov	r4,r20
 80045e4:	d8c01115 	stw	r3,68(sp)
 80045e8:	d8800e15 	stw	r2,56(sp)
 80045ec:	800d2dc0 	call	800d2dc <__fixdfsi>
 80045f0:	1009883a 	mov	r4,r2
 80045f4:	1023883a 	mov	r17,r2
 80045f8:	800d3640 	call	800d364 <__floatsidf>
 80045fc:	a009883a 	mov	r4,r20
 8004600:	a80b883a 	mov	r5,r21
 8004604:	100d883a 	mov	r6,r2
 8004608:	180f883a 	mov	r7,r3
 800460c:	800ca0c0 	call	800ca0c <__subdf3>
 8004610:	1813883a 	mov	r9,r3
 8004614:	d8c00717 	ldw	r3,28(sp)
 8004618:	8c400c04 	addi	r17,r17,48
 800461c:	1011883a 	mov	r8,r2
 8004620:	1c400005 	stb	r17,0(r3)
 8004624:	da801617 	ldw	r10,88(sp)
 8004628:	00800044 	movi	r2,1
 800462c:	50802326 	beq	r10,r2,80046bc <_dtoa_r+0x14ac>
 8004630:	d8800717 	ldw	r2,28(sp)
 8004634:	b82b883a 	mov	r21,r23
 8004638:	dc001315 	stw	r16,76(sp)
 800463c:	12a9883a 	add	r20,r2,r10
 8004640:	4807883a 	mov	r3,r9
 8004644:	4005883a 	mov	r2,r8
 8004648:	dc801415 	stw	r18,80(sp)
 800464c:	000d883a 	mov	r6,zero
 8004650:	01d00934 	movhi	r7,16420
 8004654:	1009883a 	mov	r4,r2
 8004658:	180b883a 	mov	r5,r3
 800465c:	800c1a00 	call	800c1a0 <__muldf3>
 8004660:	180b883a 	mov	r5,r3
 8004664:	1009883a 	mov	r4,r2
 8004668:	1821883a 	mov	r16,r3
 800466c:	1025883a 	mov	r18,r2
 8004670:	800d2dc0 	call	800d2dc <__fixdfsi>
 8004674:	1009883a 	mov	r4,r2
 8004678:	1023883a 	mov	r17,r2
 800467c:	800d3640 	call	800d364 <__floatsidf>
 8004680:	9009883a 	mov	r4,r18
 8004684:	800b883a 	mov	r5,r16
 8004688:	100d883a 	mov	r6,r2
 800468c:	180f883a 	mov	r7,r3
 8004690:	8c400c04 	addi	r17,r17,48
 8004694:	800ca0c0 	call	800ca0c <__subdf3>
 8004698:	ad400044 	addi	r21,r21,1
 800469c:	ac7fffc5 	stb	r17,-1(r21)
 80046a0:	ad3fea1e 	bne	r21,r20,800464c <_dtoa_r+0x143c>
 80046a4:	1813883a 	mov	r9,r3
 80046a8:	d8c01017 	ldw	r3,64(sp)
 80046ac:	dc001317 	ldw	r16,76(sp)
 80046b0:	dc801417 	ldw	r18,80(sp)
 80046b4:	1011883a 	mov	r8,r2
 80046b8:	b8ef883a 	add	r23,r23,r3
 80046bc:	d9000e17 	ldw	r4,56(sp)
 80046c0:	d9401117 	ldw	r5,68(sp)
 80046c4:	000d883a 	mov	r6,zero
 80046c8:	01cff834 	movhi	r7,16352
 80046cc:	da001715 	stw	r8,92(sp)
 80046d0:	da401515 	stw	r9,84(sp)
 80046d4:	800ad400 	call	800ad40 <__adddf3>
 80046d8:	da001717 	ldw	r8,92(sp)
 80046dc:	da401517 	ldw	r9,84(sp)
 80046e0:	1009883a 	mov	r4,r2
 80046e4:	400d883a 	mov	r6,r8
 80046e8:	480f883a 	mov	r7,r9
 80046ec:	180b883a 	mov	r5,r3
 80046f0:	800c0c00 	call	800c0c0 <__ledf2>
 80046f4:	da001717 	ldw	r8,92(sp)
 80046f8:	da401517 	ldw	r9,84(sp)
 80046fc:	10003b0e 	bge	r2,zero,80047ec <_dtoa_r+0x15dc>
 8004700:	d9001217 	ldw	r4,72(sp)
 8004704:	bd7fffc3 	ldbu	r21,-1(r23)
 8004708:	d9000515 	stw	r4,20(sp)
 800470c:	003d1c06 	br	8003b80 <_dtoa_r+0x970>
 8004710:	d8c00817 	ldw	r3,32(sp)
 8004714:	18a9c83a 	sub	r20,r3,r2
 8004718:	0005883a 	mov	r2,zero
 800471c:	003d3706 	br	8003bfc <_dtoa_r+0x9ec>
 8004720:	00800044 	movi	r2,1
 8004724:	003dd006 	br	8003e68 <_dtoa_r+0xc58>
 8004728:	d8c00217 	ldw	r3,8(sp)
 800472c:	00800d84 	movi	r2,54
 8004730:	dd400917 	ldw	r21,36(sp)
 8004734:	10c5c83a 	sub	r2,r2,r3
 8004738:	dd000817 	ldw	r20,32(sp)
 800473c:	003d2f06 	br	8003bfc <_dtoa_r+0x9ec>
 8004740:	9029883a 	mov	r20,r18
 8004744:	982b883a 	mov	r21,r19
 8004748:	04400084 	movi	r17,2
 800474c:	003bc606 	br	8003668 <_dtoa_r+0x458>
 8004750:	d8800617 	ldw	r2,24(sp)
 8004754:	103efc26 	beq	r2,zero,8004348 <_dtoa_r+0x1138>
 8004758:	d8c00c17 	ldw	r3,48(sp)
 800475c:	00fc890e 	bge	zero,r3,8003984 <_dtoa_r+0x774>
 8004760:	a80b883a 	mov	r5,r21
 8004764:	a009883a 	mov	r4,r20
 8004768:	000d883a 	mov	r6,zero
 800476c:	01d00934 	movhi	r7,16420
 8004770:	800c1a00 	call	800c1a0 <__muldf3>
 8004774:	89000044 	addi	r4,r17,1
 8004778:	1029883a 	mov	r20,r2
 800477c:	182b883a 	mov	r21,r3
 8004780:	800d3640 	call	800d364 <__floatsidf>
 8004784:	a009883a 	mov	r4,r20
 8004788:	a80b883a 	mov	r5,r21
 800478c:	100d883a 	mov	r6,r2
 8004790:	180f883a 	mov	r7,r3
 8004794:	800c1a00 	call	800c1a0 <__muldf3>
 8004798:	1009883a 	mov	r4,r2
 800479c:	180b883a 	mov	r5,r3
 80047a0:	000d883a 	mov	r6,zero
 80047a4:	01d00734 	movhi	r7,16412
 80047a8:	800ad400 	call	800ad40 <__adddf3>
 80047ac:	d9000517 	ldw	r4,20(sp)
 80047b0:	1023883a 	mov	r17,r2
 80047b4:	00bf3034 	movhi	r2,64704
 80047b8:	213fffc4 	addi	r4,r4,-1
 80047bc:	1885883a 	add	r2,r3,r2
 80047c0:	d9001215 	stw	r4,72(sp)
 80047c4:	d8800e15 	stw	r2,56(sp)
 80047c8:	da800c17 	ldw	r10,48(sp)
 80047cc:	003bc306 	br	80036dc <_dtoa_r+0x4cc>
 80047d0:	b039883a 	mov	fp,r22
 80047d4:	01000e44 	movi	r4,57
 80047d8:	8825883a 	mov	r18,r17
 80047dc:	9dc00044 	addi	r23,r19,1
 80047e0:	99000005 	stb	r4,0(r19)
 80047e4:	a023883a 	mov	r17,r20
 80047e8:	003dae06 	br	8003ea4 <_dtoa_r+0xc94>
 80047ec:	d9800e17 	ldw	r6,56(sp)
 80047f0:	d9c01117 	ldw	r7,68(sp)
 80047f4:	0009883a 	mov	r4,zero
 80047f8:	014ff834 	movhi	r5,16352
 80047fc:	da001715 	stw	r8,92(sp)
 8004800:	da401515 	stw	r9,84(sp)
 8004804:	800ca0c0 	call	800ca0c <__subdf3>
 8004808:	da001717 	ldw	r8,92(sp)
 800480c:	da401517 	ldw	r9,84(sp)
 8004810:	1009883a 	mov	r4,r2
 8004814:	180b883a 	mov	r5,r3
 8004818:	400d883a 	mov	r6,r8
 800481c:	480f883a 	mov	r7,r9
 8004820:	800bfe00 	call	800bfe0 <__gedf2>
 8004824:	00bc570e 	bge	zero,r2,8003984 <_dtoa_r+0x774>
 8004828:	01000c04 	movi	r4,48
 800482c:	00000106 	br	8004834 <_dtoa_r+0x1624>
 8004830:	102f883a 	mov	r23,r2
 8004834:	b8bfffc4 	addi	r2,r23,-1
 8004838:	10c00007 	ldb	r3,0(r2)
 800483c:	193ffc26 	beq	r3,r4,8004830 <_dtoa_r+0x1620>
 8004840:	d9801217 	ldw	r6,72(sp)
 8004844:	d9800515 	stw	r6,20(sp)
 8004848:	003c1f06 	br	80038c8 <_dtoa_r+0x6b8>
 800484c:	d8801217 	ldw	r2,72(sp)
 8004850:	dc001117 	ldw	r16,68(sp)
 8004854:	d8800515 	stw	r2,20(sp)
 8004858:	003cc906 	br	8003b80 <_dtoa_r+0x970>
 800485c:	dd801317 	ldw	r22,76(sp)
 8004860:	dc001117 	ldw	r16,68(sp)
 8004864:	dcc01417 	ldw	r19,80(sp)
 8004868:	dc801017 	ldw	r18,64(sp)
 800486c:	003c4506 	br	8003984 <_dtoa_r+0x774>
 8004870:	103e5d1e 	bne	r2,zero,80041e8 <_dtoa_r+0xfd8>
 8004874:	4080004c 	andi	r2,r8,1
 8004878:	103e5b26 	beq	r2,zero,80041e8 <_dtoa_r+0xfd8>
 800487c:	003e5706 	br	80041dc <_dtoa_r+0xfcc>
 8004880:	d8c00317 	ldw	r3,12(sp)
 8004884:	00800084 	movi	r2,2
 8004888:	10c00a16 	blt	r2,r3,80048b4 <_dtoa_r+0x16a4>
 800488c:	d9000c17 	ldw	r4,48(sp)
 8004890:	003e8306 	br	80042a0 <_dtoa_r+0x1090>
 8004894:	04400084 	movi	r17,2
 8004898:	003b7306 	br	8003668 <_dtoa_r+0x458>
 800489c:	d9801217 	ldw	r6,72(sp)
 80048a0:	d9800515 	stw	r6,20(sp)
 80048a4:	003cb606 	br	8003b80 <_dtoa_r+0x970>
 80048a8:	d9001217 	ldw	r4,72(sp)
 80048ac:	d9000515 	stw	r4,20(sp)
 80048b0:	003c0506 	br	80038c8 <_dtoa_r+0x6b8>
 80048b4:	d9800c17 	ldw	r6,48(sp)
 80048b8:	d9800615 	stw	r6,24(sp)
 80048bc:	003e8306 	br	80042cc <_dtoa_r+0x10bc>
 80048c0:	d9800317 	ldw	r6,12(sp)
 80048c4:	00800084 	movi	r2,2
 80048c8:	11800216 	blt	r2,r6,80048d4 <_dtoa_r+0x16c4>
 80048cc:	d8800c17 	ldw	r2,48(sp)
 80048d0:	003da606 	br	8003f6c <_dtoa_r+0xd5c>
 80048d4:	d8800c17 	ldw	r2,48(sp)
 80048d8:	d8800615 	stw	r2,24(sp)
 80048dc:	003e7b06 	br	80042cc <_dtoa_r+0x10bc>
 80048e0:	05000044 	movi	r20,1
 80048e4:	003b0506 	br	80034fc <_dtoa_r+0x2ec>
 80048e8:	8009883a 	mov	r4,r16
 80048ec:	80001115 	stw	zero,68(r16)
 80048f0:	000b883a 	mov	r5,zero
 80048f4:	800629c0 	call	800629c <_Balloc>
 80048f8:	d8800715 	stw	r2,28(sp)
 80048fc:	d8c00717 	ldw	r3,28(sp)
 8004900:	00bfffc4 	movi	r2,-1
 8004904:	01000044 	movi	r4,1
 8004908:	d8800c15 	stw	r2,48(sp)
 800490c:	80c01015 	stw	r3,64(r16)
 8004910:	d9000b15 	stw	r4,44(sp)
 8004914:	d8800615 	stw	r2,24(sp)
 8004918:	d8002215 	stw	zero,136(sp)
 800491c:	003c1906 	br	8003984 <_dtoa_r+0x774>
 8004920:	193d2926 	beq	r3,r4,8003dc8 <_dtoa_r+0xbb8>
 8004924:	00c00f04 	movi	r3,60
 8004928:	1885c83a 	sub	r2,r3,r2
 800492c:	003d7b06 	br	8003f1c <_dtoa_r+0xd0c>
 8004930:	000b883a 	mov	r5,zero
 8004934:	003b1006 	br	8003578 <_dtoa_r+0x368>

08004938 <__sflush_r>:
 8004938:	2880030b 	ldhu	r2,12(r5)
 800493c:	defffb04 	addi	sp,sp,-20
 8004940:	dcc00315 	stw	r19,12(sp)
 8004944:	dc400115 	stw	r17,4(sp)
 8004948:	dfc00415 	stw	ra,16(sp)
 800494c:	dc800215 	stw	r18,8(sp)
 8004950:	dc000015 	stw	r16,0(sp)
 8004954:	10c0020c 	andi	r3,r2,8
 8004958:	2823883a 	mov	r17,r5
 800495c:	2027883a 	mov	r19,r4
 8004960:	1800311e 	bne	r3,zero,8004a28 <__sflush_r+0xf0>
 8004964:	28c00117 	ldw	r3,4(r5)
 8004968:	10820014 	ori	r2,r2,2048
 800496c:	2880030d 	sth	r2,12(r5)
 8004970:	00c04b0e 	bge	zero,r3,8004aa0 <__sflush_r+0x168>
 8004974:	8a000a17 	ldw	r8,40(r17)
 8004978:	40002326 	beq	r8,zero,8004a08 <__sflush_r+0xd0>
 800497c:	9c000017 	ldw	r16,0(r19)
 8004980:	10c4000c 	andi	r3,r2,4096
 8004984:	98000015 	stw	zero,0(r19)
 8004988:	18004826 	beq	r3,zero,8004aac <__sflush_r+0x174>
 800498c:	89801417 	ldw	r6,80(r17)
 8004990:	10c0010c 	andi	r3,r2,4
 8004994:	18000626 	beq	r3,zero,80049b0 <__sflush_r+0x78>
 8004998:	88c00117 	ldw	r3,4(r17)
 800499c:	88800c17 	ldw	r2,48(r17)
 80049a0:	30cdc83a 	sub	r6,r6,r3
 80049a4:	10000226 	beq	r2,zero,80049b0 <__sflush_r+0x78>
 80049a8:	88800f17 	ldw	r2,60(r17)
 80049ac:	308dc83a 	sub	r6,r6,r2
 80049b0:	89400717 	ldw	r5,28(r17)
 80049b4:	9809883a 	mov	r4,r19
 80049b8:	000f883a 	mov	r7,zero
 80049bc:	403ee83a 	callr	r8
 80049c0:	00ffffc4 	movi	r3,-1
 80049c4:	10c04426 	beq	r2,r3,8004ad8 <__sflush_r+0x1a0>
 80049c8:	88c0030b 	ldhu	r3,12(r17)
 80049cc:	89000417 	ldw	r4,16(r17)
 80049d0:	88000115 	stw	zero,4(r17)
 80049d4:	197dffcc 	andi	r5,r3,63487
 80049d8:	8940030d 	sth	r5,12(r17)
 80049dc:	89000015 	stw	r4,0(r17)
 80049e0:	18c4000c 	andi	r3,r3,4096
 80049e4:	18002c1e 	bne	r3,zero,8004a98 <__sflush_r+0x160>
 80049e8:	89400c17 	ldw	r5,48(r17)
 80049ec:	9c000015 	stw	r16,0(r19)
 80049f0:	28000526 	beq	r5,zero,8004a08 <__sflush_r+0xd0>
 80049f4:	88801004 	addi	r2,r17,64
 80049f8:	28800226 	beq	r5,r2,8004a04 <__sflush_r+0xcc>
 80049fc:	9809883a 	mov	r4,r19
 8004a00:	80050a00 	call	80050a0 <_free_r>
 8004a04:	88000c15 	stw	zero,48(r17)
 8004a08:	0005883a 	mov	r2,zero
 8004a0c:	dfc00417 	ldw	ra,16(sp)
 8004a10:	dcc00317 	ldw	r19,12(sp)
 8004a14:	dc800217 	ldw	r18,8(sp)
 8004a18:	dc400117 	ldw	r17,4(sp)
 8004a1c:	dc000017 	ldw	r16,0(sp)
 8004a20:	dec00504 	addi	sp,sp,20
 8004a24:	f800283a 	ret
 8004a28:	2c800417 	ldw	r18,16(r5)
 8004a2c:	903ff626 	beq	r18,zero,8004a08 <__sflush_r+0xd0>
 8004a30:	2c000017 	ldw	r16,0(r5)
 8004a34:	108000cc 	andi	r2,r2,3
 8004a38:	2c800015 	stw	r18,0(r5)
 8004a3c:	84a1c83a 	sub	r16,r16,r18
 8004a40:	1000131e 	bne	r2,zero,8004a90 <__sflush_r+0x158>
 8004a44:	28800517 	ldw	r2,20(r5)
 8004a48:	88800215 	stw	r2,8(r17)
 8004a4c:	04000316 	blt	zero,r16,8004a5c <__sflush_r+0x124>
 8004a50:	003fed06 	br	8004a08 <__sflush_r+0xd0>
 8004a54:	90a5883a 	add	r18,r18,r2
 8004a58:	043feb0e 	bge	zero,r16,8004a08 <__sflush_r+0xd0>
 8004a5c:	88800917 	ldw	r2,36(r17)
 8004a60:	89400717 	ldw	r5,28(r17)
 8004a64:	800f883a 	mov	r7,r16
 8004a68:	900d883a 	mov	r6,r18
 8004a6c:	9809883a 	mov	r4,r19
 8004a70:	103ee83a 	callr	r2
 8004a74:	80a1c83a 	sub	r16,r16,r2
 8004a78:	00bff616 	blt	zero,r2,8004a54 <__sflush_r+0x11c>
 8004a7c:	88c0030b 	ldhu	r3,12(r17)
 8004a80:	00bfffc4 	movi	r2,-1
 8004a84:	18c01014 	ori	r3,r3,64
 8004a88:	88c0030d 	sth	r3,12(r17)
 8004a8c:	003fdf06 	br	8004a0c <__sflush_r+0xd4>
 8004a90:	0005883a 	mov	r2,zero
 8004a94:	003fec06 	br	8004a48 <__sflush_r+0x110>
 8004a98:	88801415 	stw	r2,80(r17)
 8004a9c:	003fd206 	br	80049e8 <__sflush_r+0xb0>
 8004aa0:	28c00f17 	ldw	r3,60(r5)
 8004aa4:	00ffb316 	blt	zero,r3,8004974 <__sflush_r+0x3c>
 8004aa8:	003fd706 	br	8004a08 <__sflush_r+0xd0>
 8004aac:	89400717 	ldw	r5,28(r17)
 8004ab0:	000d883a 	mov	r6,zero
 8004ab4:	9809883a 	mov	r4,r19
 8004ab8:	01c00044 	movi	r7,1
 8004abc:	403ee83a 	callr	r8
 8004ac0:	100d883a 	mov	r6,r2
 8004ac4:	00bfffc4 	movi	r2,-1
 8004ac8:	30801426 	beq	r6,r2,8004b1c <__sflush_r+0x1e4>
 8004acc:	8880030b 	ldhu	r2,12(r17)
 8004ad0:	8a000a17 	ldw	r8,40(r17)
 8004ad4:	003fae06 	br	8004990 <__sflush_r+0x58>
 8004ad8:	98c00017 	ldw	r3,0(r19)
 8004adc:	183fba26 	beq	r3,zero,80049c8 <__sflush_r+0x90>
 8004ae0:	01000744 	movi	r4,29
 8004ae4:	19000626 	beq	r3,r4,8004b00 <__sflush_r+0x1c8>
 8004ae8:	01000584 	movi	r4,22
 8004aec:	19000426 	beq	r3,r4,8004b00 <__sflush_r+0x1c8>
 8004af0:	88c0030b 	ldhu	r3,12(r17)
 8004af4:	18c01014 	ori	r3,r3,64
 8004af8:	88c0030d 	sth	r3,12(r17)
 8004afc:	003fc306 	br	8004a0c <__sflush_r+0xd4>
 8004b00:	8880030b 	ldhu	r2,12(r17)
 8004b04:	88c00417 	ldw	r3,16(r17)
 8004b08:	88000115 	stw	zero,4(r17)
 8004b0c:	10bdffcc 	andi	r2,r2,63487
 8004b10:	8880030d 	sth	r2,12(r17)
 8004b14:	88c00015 	stw	r3,0(r17)
 8004b18:	003fb306 	br	80049e8 <__sflush_r+0xb0>
 8004b1c:	98800017 	ldw	r2,0(r19)
 8004b20:	103fea26 	beq	r2,zero,8004acc <__sflush_r+0x194>
 8004b24:	00c00744 	movi	r3,29
 8004b28:	10c00226 	beq	r2,r3,8004b34 <__sflush_r+0x1fc>
 8004b2c:	00c00584 	movi	r3,22
 8004b30:	10ffd21e 	bne	r2,r3,8004a7c <__sflush_r+0x144>
 8004b34:	9c000015 	stw	r16,0(r19)
 8004b38:	0005883a 	mov	r2,zero
 8004b3c:	003fb306 	br	8004a0c <__sflush_r+0xd4>

08004b40 <_fflush_r>:
 8004b40:	defffd04 	addi	sp,sp,-12
 8004b44:	dc000115 	stw	r16,4(sp)
 8004b48:	dfc00215 	stw	ra,8(sp)
 8004b4c:	2021883a 	mov	r16,r4
 8004b50:	20000226 	beq	r4,zero,8004b5c <_fflush_r+0x1c>
 8004b54:	20800e17 	ldw	r2,56(r4)
 8004b58:	10000c26 	beq	r2,zero,8004b8c <_fflush_r+0x4c>
 8004b5c:	2880030f 	ldh	r2,12(r5)
 8004b60:	1000051e 	bne	r2,zero,8004b78 <_fflush_r+0x38>
 8004b64:	0005883a 	mov	r2,zero
 8004b68:	dfc00217 	ldw	ra,8(sp)
 8004b6c:	dc000117 	ldw	r16,4(sp)
 8004b70:	dec00304 	addi	sp,sp,12
 8004b74:	f800283a 	ret
 8004b78:	8009883a 	mov	r4,r16
 8004b7c:	dfc00217 	ldw	ra,8(sp)
 8004b80:	dc000117 	ldw	r16,4(sp)
 8004b84:	dec00304 	addi	sp,sp,12
 8004b88:	80049381 	jmpi	8004938 <__sflush_r>
 8004b8c:	d9400015 	stw	r5,0(sp)
 8004b90:	8004f2c0 	call	8004f2c <__sinit>
 8004b94:	d9400017 	ldw	r5,0(sp)
 8004b98:	003ff006 	br	8004b5c <_fflush_r+0x1c>

08004b9c <fflush>:
 8004b9c:	20000526 	beq	r4,zero,8004bb4 <fflush+0x18>
 8004ba0:	00820074 	movhi	r2,2049
 8004ba4:	10873104 	addi	r2,r2,7364
 8004ba8:	200b883a 	mov	r5,r4
 8004bac:	11000017 	ldw	r4,0(r2)
 8004bb0:	8004b401 	jmpi	8004b40 <_fflush_r>
 8004bb4:	00820074 	movhi	r2,2049
 8004bb8:	10873004 	addi	r2,r2,7360
 8004bbc:	11000017 	ldw	r4,0(r2)
 8004bc0:	01420034 	movhi	r5,2048
 8004bc4:	2952d004 	addi	r5,r5,19264
 8004bc8:	80054541 	jmpi	8005454 <_fwalk_reent>

08004bcc <__fp_lock>:
 8004bcc:	0005883a 	mov	r2,zero
 8004bd0:	f800283a 	ret

08004bd4 <__fp_unlock>:
 8004bd4:	0005883a 	mov	r2,zero
 8004bd8:	f800283a 	ret

08004bdc <_cleanup_r>:
 8004bdc:	01420074 	movhi	r5,2049
 8004be0:	29632904 	addi	r5,r5,-29532
 8004be4:	80054541 	jmpi	8005454 <_fwalk_reent>

08004be8 <__sinit.part.1>:
 8004be8:	defff704 	addi	sp,sp,-36
 8004bec:	00c20034 	movhi	r3,2048
 8004bf0:	dfc00815 	stw	ra,32(sp)
 8004bf4:	ddc00715 	stw	r23,28(sp)
 8004bf8:	dd800615 	stw	r22,24(sp)
 8004bfc:	dd400515 	stw	r21,20(sp)
 8004c00:	dd000415 	stw	r20,16(sp)
 8004c04:	dcc00315 	stw	r19,12(sp)
 8004c08:	dc800215 	stw	r18,8(sp)
 8004c0c:	dc400115 	stw	r17,4(sp)
 8004c10:	dc000015 	stw	r16,0(sp)
 8004c14:	18d2f704 	addi	r3,r3,19420
 8004c18:	24000117 	ldw	r16,4(r4)
 8004c1c:	20c00f15 	stw	r3,60(r4)
 8004c20:	2080bb04 	addi	r2,r4,748
 8004c24:	00c000c4 	movi	r3,3
 8004c28:	20c0b915 	stw	r3,740(r4)
 8004c2c:	2080ba15 	stw	r2,744(r4)
 8004c30:	2000b815 	stw	zero,736(r4)
 8004c34:	05c00204 	movi	r23,8
 8004c38:	00800104 	movi	r2,4
 8004c3c:	2025883a 	mov	r18,r4
 8004c40:	b80d883a 	mov	r6,r23
 8004c44:	81001704 	addi	r4,r16,92
 8004c48:	000b883a 	mov	r5,zero
 8004c4c:	80000015 	stw	zero,0(r16)
 8004c50:	80000115 	stw	zero,4(r16)
 8004c54:	80000215 	stw	zero,8(r16)
 8004c58:	8080030d 	sth	r2,12(r16)
 8004c5c:	80001915 	stw	zero,100(r16)
 8004c60:	8000038d 	sth	zero,14(r16)
 8004c64:	80000415 	stw	zero,16(r16)
 8004c68:	80000515 	stw	zero,20(r16)
 8004c6c:	80000615 	stw	zero,24(r16)
 8004c70:	80061780 	call	8006178 <memset>
 8004c74:	05820034 	movhi	r22,2048
 8004c78:	94400217 	ldw	r17,8(r18)
 8004c7c:	05420034 	movhi	r21,2048
 8004c80:	05020034 	movhi	r20,2048
 8004c84:	04c20034 	movhi	r19,2048
 8004c88:	b59cf004 	addi	r22,r22,29632
 8004c8c:	ad5d0704 	addi	r21,r21,29724
 8004c90:	a51d2604 	addi	r20,r20,29848
 8004c94:	9cdd3d04 	addi	r19,r19,29940
 8004c98:	85800815 	stw	r22,32(r16)
 8004c9c:	85400915 	stw	r21,36(r16)
 8004ca0:	85000a15 	stw	r20,40(r16)
 8004ca4:	84c00b15 	stw	r19,44(r16)
 8004ca8:	84000715 	stw	r16,28(r16)
 8004cac:	00800284 	movi	r2,10
 8004cb0:	8880030d 	sth	r2,12(r17)
 8004cb4:	00800044 	movi	r2,1
 8004cb8:	89001704 	addi	r4,r17,92
 8004cbc:	b80d883a 	mov	r6,r23
 8004cc0:	000b883a 	mov	r5,zero
 8004cc4:	88000015 	stw	zero,0(r17)
 8004cc8:	88000115 	stw	zero,4(r17)
 8004ccc:	88000215 	stw	zero,8(r17)
 8004cd0:	88001915 	stw	zero,100(r17)
 8004cd4:	8880038d 	sth	r2,14(r17)
 8004cd8:	88000415 	stw	zero,16(r17)
 8004cdc:	88000515 	stw	zero,20(r17)
 8004ce0:	88000615 	stw	zero,24(r17)
 8004ce4:	80061780 	call	8006178 <memset>
 8004ce8:	94000317 	ldw	r16,12(r18)
 8004cec:	00800484 	movi	r2,18
 8004cf0:	8c400715 	stw	r17,28(r17)
 8004cf4:	8d800815 	stw	r22,32(r17)
 8004cf8:	8d400915 	stw	r21,36(r17)
 8004cfc:	8d000a15 	stw	r20,40(r17)
 8004d00:	8cc00b15 	stw	r19,44(r17)
 8004d04:	8080030d 	sth	r2,12(r16)
 8004d08:	00800084 	movi	r2,2
 8004d0c:	80000015 	stw	zero,0(r16)
 8004d10:	80000115 	stw	zero,4(r16)
 8004d14:	80000215 	stw	zero,8(r16)
 8004d18:	80001915 	stw	zero,100(r16)
 8004d1c:	8080038d 	sth	r2,14(r16)
 8004d20:	80000415 	stw	zero,16(r16)
 8004d24:	80000515 	stw	zero,20(r16)
 8004d28:	80000615 	stw	zero,24(r16)
 8004d2c:	81001704 	addi	r4,r16,92
 8004d30:	000b883a 	mov	r5,zero
 8004d34:	b80d883a 	mov	r6,r23
 8004d38:	80061780 	call	8006178 <memset>
 8004d3c:	00800044 	movi	r2,1
 8004d40:	84000715 	stw	r16,28(r16)
 8004d44:	85800815 	stw	r22,32(r16)
 8004d48:	85400915 	stw	r21,36(r16)
 8004d4c:	85000a15 	stw	r20,40(r16)
 8004d50:	84c00b15 	stw	r19,44(r16)
 8004d54:	90800e15 	stw	r2,56(r18)
 8004d58:	dfc00817 	ldw	ra,32(sp)
 8004d5c:	ddc00717 	ldw	r23,28(sp)
 8004d60:	dd800617 	ldw	r22,24(sp)
 8004d64:	dd400517 	ldw	r21,20(sp)
 8004d68:	dd000417 	ldw	r20,16(sp)
 8004d6c:	dcc00317 	ldw	r19,12(sp)
 8004d70:	dc800217 	ldw	r18,8(sp)
 8004d74:	dc400117 	ldw	r17,4(sp)
 8004d78:	dc000017 	ldw	r16,0(sp)
 8004d7c:	dec00904 	addi	sp,sp,36
 8004d80:	f800283a 	ret

08004d84 <__sfmoreglue>:
 8004d84:	defffc04 	addi	sp,sp,-16
 8004d88:	dc800215 	stw	r18,8(sp)
 8004d8c:	2825883a 	mov	r18,r5
 8004d90:	dc000015 	stw	r16,0(sp)
 8004d94:	01401a04 	movi	r5,104
 8004d98:	2021883a 	mov	r16,r4
 8004d9c:	913fffc4 	addi	r4,r18,-1
 8004da0:	dfc00315 	stw	ra,12(sp)
 8004da4:	dc400115 	stw	r17,4(sp)
 8004da8:	80005f80 	call	80005f8 <__mulsi3>
 8004dac:	8009883a 	mov	r4,r16
 8004db0:	11401d04 	addi	r5,r2,116
 8004db4:	1023883a 	mov	r17,r2
 8004db8:	80057b00 	call	80057b0 <_malloc_r>
 8004dbc:	1021883a 	mov	r16,r2
 8004dc0:	10000726 	beq	r2,zero,8004de0 <__sfmoreglue+0x5c>
 8004dc4:	11000304 	addi	r4,r2,12
 8004dc8:	10000015 	stw	zero,0(r2)
 8004dcc:	14800115 	stw	r18,4(r2)
 8004dd0:	11000215 	stw	r4,8(r2)
 8004dd4:	000b883a 	mov	r5,zero
 8004dd8:	89801a04 	addi	r6,r17,104
 8004ddc:	80061780 	call	8006178 <memset>
 8004de0:	8005883a 	mov	r2,r16
 8004de4:	dfc00317 	ldw	ra,12(sp)
 8004de8:	dc800217 	ldw	r18,8(sp)
 8004dec:	dc400117 	ldw	r17,4(sp)
 8004df0:	dc000017 	ldw	r16,0(sp)
 8004df4:	dec00404 	addi	sp,sp,16
 8004df8:	f800283a 	ret

08004dfc <__sfp>:
 8004dfc:	00820074 	movhi	r2,2049
 8004e00:	defffb04 	addi	sp,sp,-20
 8004e04:	10873004 	addi	r2,r2,7360
 8004e08:	dc800215 	stw	r18,8(sp)
 8004e0c:	14800017 	ldw	r18,0(r2)
 8004e10:	dcc00315 	stw	r19,12(sp)
 8004e14:	dfc00415 	stw	ra,16(sp)
 8004e18:	90800e17 	ldw	r2,56(r18)
 8004e1c:	dc400115 	stw	r17,4(sp)
 8004e20:	dc000015 	stw	r16,0(sp)
 8004e24:	2027883a 	mov	r19,r4
 8004e28:	1000021e 	bne	r2,zero,8004e34 <__sfp+0x38>
 8004e2c:	9009883a 	mov	r4,r18
 8004e30:	8004be80 	call	8004be8 <__sinit.part.1>
 8004e34:	9480b804 	addi	r18,r18,736
 8004e38:	047fffc4 	movi	r17,-1
 8004e3c:	91400117 	ldw	r5,4(r18)
 8004e40:	94000217 	ldw	r16,8(r18)
 8004e44:	297fffc4 	addi	r5,r5,-1
 8004e48:	28000a16 	blt	r5,zero,8004e74 <__sfp+0x78>
 8004e4c:	8080030f 	ldh	r2,12(r16)
 8004e50:	10000c26 	beq	r2,zero,8004e84 <__sfp+0x88>
 8004e54:	80c01d04 	addi	r3,r16,116
 8004e58:	00000206 	br	8004e64 <__sfp+0x68>
 8004e5c:	18bfe60f 	ldh	r2,-104(r3)
 8004e60:	10000826 	beq	r2,zero,8004e84 <__sfp+0x88>
 8004e64:	297fffc4 	addi	r5,r5,-1
 8004e68:	1c3ffd04 	addi	r16,r3,-12
 8004e6c:	18c01a04 	addi	r3,r3,104
 8004e70:	2c7ffa1e 	bne	r5,r17,8004e5c <__sfp+0x60>
 8004e74:	90800017 	ldw	r2,0(r18)
 8004e78:	10001d26 	beq	r2,zero,8004ef0 <__sfp+0xf4>
 8004e7c:	1025883a 	mov	r18,r2
 8004e80:	003fee06 	br	8004e3c <__sfp+0x40>
 8004e84:	00bfffc4 	movi	r2,-1
 8004e88:	8080038d 	sth	r2,14(r16)
 8004e8c:	00800044 	movi	r2,1
 8004e90:	8080030d 	sth	r2,12(r16)
 8004e94:	80001915 	stw	zero,100(r16)
 8004e98:	80000015 	stw	zero,0(r16)
 8004e9c:	80000215 	stw	zero,8(r16)
 8004ea0:	80000115 	stw	zero,4(r16)
 8004ea4:	80000415 	stw	zero,16(r16)
 8004ea8:	80000515 	stw	zero,20(r16)
 8004eac:	80000615 	stw	zero,24(r16)
 8004eb0:	81001704 	addi	r4,r16,92
 8004eb4:	000b883a 	mov	r5,zero
 8004eb8:	01800204 	movi	r6,8
 8004ebc:	80061780 	call	8006178 <memset>
 8004ec0:	8005883a 	mov	r2,r16
 8004ec4:	80000c15 	stw	zero,48(r16)
 8004ec8:	80000d15 	stw	zero,52(r16)
 8004ecc:	80001115 	stw	zero,68(r16)
 8004ed0:	80001215 	stw	zero,72(r16)
 8004ed4:	dfc00417 	ldw	ra,16(sp)
 8004ed8:	dcc00317 	ldw	r19,12(sp)
 8004edc:	dc800217 	ldw	r18,8(sp)
 8004ee0:	dc400117 	ldw	r17,4(sp)
 8004ee4:	dc000017 	ldw	r16,0(sp)
 8004ee8:	dec00504 	addi	sp,sp,20
 8004eec:	f800283a 	ret
 8004ef0:	9809883a 	mov	r4,r19
 8004ef4:	01400104 	movi	r5,4
 8004ef8:	8004d840 	call	8004d84 <__sfmoreglue>
 8004efc:	90800015 	stw	r2,0(r18)
 8004f00:	103fde1e 	bne	r2,zero,8004e7c <__sfp+0x80>
 8004f04:	00800304 	movi	r2,12
 8004f08:	98800015 	stw	r2,0(r19)
 8004f0c:	0005883a 	mov	r2,zero
 8004f10:	003ff006 	br	8004ed4 <__sfp+0xd8>

08004f14 <_cleanup>:
 8004f14:	00820074 	movhi	r2,2049
 8004f18:	10873004 	addi	r2,r2,7360
 8004f1c:	11000017 	ldw	r4,0(r2)
 8004f20:	01420074 	movhi	r5,2049
 8004f24:	29632904 	addi	r5,r5,-29532
 8004f28:	80054541 	jmpi	8005454 <_fwalk_reent>

08004f2c <__sinit>:
 8004f2c:	20800e17 	ldw	r2,56(r4)
 8004f30:	10000126 	beq	r2,zero,8004f38 <__sinit+0xc>
 8004f34:	f800283a 	ret
 8004f38:	8004be81 	jmpi	8004be8 <__sinit.part.1>

08004f3c <__sfp_lock_acquire>:
 8004f3c:	f800283a 	ret

08004f40 <__sfp_lock_release>:
 8004f40:	f800283a 	ret

08004f44 <__sinit_lock_acquire>:
 8004f44:	f800283a 	ret

08004f48 <__sinit_lock_release>:
 8004f48:	f800283a 	ret

08004f4c <__fp_lock_all>:
 8004f4c:	00820074 	movhi	r2,2049
 8004f50:	10873104 	addi	r2,r2,7364
 8004f54:	11000017 	ldw	r4,0(r2)
 8004f58:	01420034 	movhi	r5,2048
 8004f5c:	2952f304 	addi	r5,r5,19404
 8004f60:	80053901 	jmpi	8005390 <_fwalk>

08004f64 <__fp_unlock_all>:
 8004f64:	00820074 	movhi	r2,2049
 8004f68:	10873104 	addi	r2,r2,7364
 8004f6c:	11000017 	ldw	r4,0(r2)
 8004f70:	01420034 	movhi	r5,2048
 8004f74:	2952f504 	addi	r5,r5,19412
 8004f78:	80053901 	jmpi	8005390 <_fwalk>

08004f7c <_malloc_trim_r>:
 8004f7c:	defffb04 	addi	sp,sp,-20
 8004f80:	dcc00315 	stw	r19,12(sp)
 8004f84:	04c20074 	movhi	r19,2049
 8004f88:	dc800215 	stw	r18,8(sp)
 8004f8c:	dc400115 	stw	r17,4(sp)
 8004f90:	dc000015 	stw	r16,0(sp)
 8004f94:	dfc00415 	stw	ra,16(sp)
 8004f98:	2821883a 	mov	r16,r5
 8004f9c:	9cc1ac04 	addi	r19,r19,1712
 8004fa0:	2025883a 	mov	r18,r4
 8004fa4:	800dab80 	call	800dab8 <__malloc_lock>
 8004fa8:	98800217 	ldw	r2,8(r19)
 8004fac:	14400117 	ldw	r17,4(r2)
 8004fb0:	00bfff04 	movi	r2,-4
 8004fb4:	88a2703a 	and	r17,r17,r2
 8004fb8:	8c21c83a 	sub	r16,r17,r16
 8004fbc:	8403fbc4 	addi	r16,r16,4079
 8004fc0:	8020d33a 	srli	r16,r16,12
 8004fc4:	0083ffc4 	movi	r2,4095
 8004fc8:	843fffc4 	addi	r16,r16,-1
 8004fcc:	8020933a 	slli	r16,r16,12
 8004fd0:	1400060e 	bge	r2,r16,8004fec <_malloc_trim_r+0x70>
 8004fd4:	9009883a 	mov	r4,r18
 8004fd8:	000b883a 	mov	r5,zero
 8004fdc:	800736c0 	call	800736c <_sbrk_r>
 8004fe0:	98c00217 	ldw	r3,8(r19)
 8004fe4:	1c47883a 	add	r3,r3,r17
 8004fe8:	10c00a26 	beq	r2,r3,8005014 <_malloc_trim_r+0x98>
 8004fec:	9009883a 	mov	r4,r18
 8004ff0:	800dad80 	call	800dad8 <__malloc_unlock>
 8004ff4:	0005883a 	mov	r2,zero
 8004ff8:	dfc00417 	ldw	ra,16(sp)
 8004ffc:	dcc00317 	ldw	r19,12(sp)
 8005000:	dc800217 	ldw	r18,8(sp)
 8005004:	dc400117 	ldw	r17,4(sp)
 8005008:	dc000017 	ldw	r16,0(sp)
 800500c:	dec00504 	addi	sp,sp,20
 8005010:	f800283a 	ret
 8005014:	9009883a 	mov	r4,r18
 8005018:	040bc83a 	sub	r5,zero,r16
 800501c:	800736c0 	call	800736c <_sbrk_r>
 8005020:	00ffffc4 	movi	r3,-1
 8005024:	10c00d26 	beq	r2,r3,800505c <_malloc_trim_r+0xe0>
 8005028:	00c20074 	movhi	r3,2049
 800502c:	18ce0a04 	addi	r3,r3,14376
 8005030:	18800017 	ldw	r2,0(r3)
 8005034:	99000217 	ldw	r4,8(r19)
 8005038:	8c23c83a 	sub	r17,r17,r16
 800503c:	8c400054 	ori	r17,r17,1
 8005040:	1421c83a 	sub	r16,r2,r16
 8005044:	24400115 	stw	r17,4(r4)
 8005048:	9009883a 	mov	r4,r18
 800504c:	1c000015 	stw	r16,0(r3)
 8005050:	800dad80 	call	800dad8 <__malloc_unlock>
 8005054:	00800044 	movi	r2,1
 8005058:	003fe706 	br	8004ff8 <_malloc_trim_r+0x7c>
 800505c:	9009883a 	mov	r4,r18
 8005060:	000b883a 	mov	r5,zero
 8005064:	800736c0 	call	800736c <_sbrk_r>
 8005068:	99000217 	ldw	r4,8(r19)
 800506c:	014003c4 	movi	r5,15
 8005070:	1107c83a 	sub	r3,r2,r4
 8005074:	28ffdd0e 	bge	r5,r3,8004fec <_malloc_trim_r+0x70>
 8005078:	01420074 	movhi	r5,2049
 800507c:	29473304 	addi	r5,r5,7372
 8005080:	29400017 	ldw	r5,0(r5)
 8005084:	18c00054 	ori	r3,r3,1
 8005088:	20c00115 	stw	r3,4(r4)
 800508c:	00c20074 	movhi	r3,2049
 8005090:	1145c83a 	sub	r2,r2,r5
 8005094:	18ce0a04 	addi	r3,r3,14376
 8005098:	18800015 	stw	r2,0(r3)
 800509c:	003fd306 	br	8004fec <_malloc_trim_r+0x70>

080050a0 <_free_r>:
 80050a0:	28004c26 	beq	r5,zero,80051d4 <_free_r+0x134>
 80050a4:	defffd04 	addi	sp,sp,-12
 80050a8:	dc400115 	stw	r17,4(sp)
 80050ac:	dc000015 	stw	r16,0(sp)
 80050b0:	2023883a 	mov	r17,r4
 80050b4:	2821883a 	mov	r16,r5
 80050b8:	dfc00215 	stw	ra,8(sp)
 80050bc:	800dab80 	call	800dab8 <__malloc_lock>
 80050c0:	813fff17 	ldw	r4,-4(r16)
 80050c4:	00bfff84 	movi	r2,-2
 80050c8:	02420074 	movhi	r9,2049
 80050cc:	81bffe04 	addi	r6,r16,-8
 80050d0:	2084703a 	and	r2,r4,r2
 80050d4:	4a41ac04 	addi	r9,r9,1712
 80050d8:	308b883a 	add	r5,r6,r2
 80050dc:	2a000117 	ldw	r8,4(r5)
 80050e0:	49c00217 	ldw	r7,8(r9)
 80050e4:	00ffff04 	movi	r3,-4
 80050e8:	40c6703a 	and	r3,r8,r3
 80050ec:	39405326 	beq	r7,r5,800523c <_free_r+0x19c>
 80050f0:	28c00115 	stw	r3,4(r5)
 80050f4:	2100004c 	andi	r4,r4,1
 80050f8:	2000091e 	bne	r4,zero,8005120 <_free_r+0x80>
 80050fc:	81fffe17 	ldw	r7,-8(r16)
 8005100:	4a000204 	addi	r8,r9,8
 8005104:	31cdc83a 	sub	r6,r6,r7
 8005108:	31000217 	ldw	r4,8(r6)
 800510c:	11c5883a 	add	r2,r2,r7
 8005110:	22006126 	beq	r4,r8,8005298 <_free_r+0x1f8>
 8005114:	31c00317 	ldw	r7,12(r6)
 8005118:	21c00315 	stw	r7,12(r4)
 800511c:	39000215 	stw	r4,8(r7)
 8005120:	28c9883a 	add	r4,r5,r3
 8005124:	21c00117 	ldw	r7,4(r4)
 8005128:	39c0004c 	andi	r7,r7,1
 800512c:	38000d1e 	bne	r7,zero,8005164 <_free_r+0xc4>
 8005130:	29000217 	ldw	r4,8(r5)
 8005134:	10c5883a 	add	r2,r2,r3
 8005138:	00c20074 	movhi	r3,2049
 800513c:	18c1ae04 	addi	r3,r3,1720
 8005140:	20c07526 	beq	r4,r3,8005318 <_free_r+0x278>
 8005144:	29c00317 	ldw	r7,12(r5)
 8005148:	11400054 	ori	r5,r2,1
 800514c:	3087883a 	add	r3,r6,r2
 8005150:	21c00315 	stw	r7,12(r4)
 8005154:	39000215 	stw	r4,8(r7)
 8005158:	31400115 	stw	r5,4(r6)
 800515c:	18800015 	stw	r2,0(r3)
 8005160:	00000406 	br	8005174 <_free_r+0xd4>
 8005164:	10c00054 	ori	r3,r2,1
 8005168:	30c00115 	stw	r3,4(r6)
 800516c:	3087883a 	add	r3,r6,r2
 8005170:	18800015 	stw	r2,0(r3)
 8005174:	00c07fc4 	movi	r3,511
 8005178:	18801736 	bltu	r3,r2,80051d8 <_free_r+0x138>
 800517c:	1004d0fa 	srli	r2,r2,3
 8005180:	01400044 	movi	r5,1
 8005184:	49000117 	ldw	r4,4(r9)
 8005188:	1087883a 	add	r3,r2,r2
 800518c:	18c7883a 	add	r3,r3,r3
 8005190:	1005d0ba 	srai	r2,r2,2
 8005194:	18c7883a 	add	r3,r3,r3
 8005198:	1a47883a 	add	r3,r3,r9
 800519c:	19c00217 	ldw	r7,8(r3)
 80051a0:	2884983a 	sll	r2,r5,r2
 80051a4:	30c00315 	stw	r3,12(r6)
 80051a8:	31c00215 	stw	r7,8(r6)
 80051ac:	1104b03a 	or	r2,r2,r4
 80051b0:	19800215 	stw	r6,8(r3)
 80051b4:	48800115 	stw	r2,4(r9)
 80051b8:	39800315 	stw	r6,12(r7)
 80051bc:	8809883a 	mov	r4,r17
 80051c0:	dfc00217 	ldw	ra,8(sp)
 80051c4:	dc400117 	ldw	r17,4(sp)
 80051c8:	dc000017 	ldw	r16,0(sp)
 80051cc:	dec00304 	addi	sp,sp,12
 80051d0:	800dad81 	jmpi	800dad8 <__malloc_unlock>
 80051d4:	f800283a 	ret
 80051d8:	1006d27a 	srli	r3,r2,9
 80051dc:	01000104 	movi	r4,4
 80051e0:	20c04036 	bltu	r4,r3,80052e4 <_free_r+0x244>
 80051e4:	1006d1ba 	srli	r3,r2,6
 80051e8:	19400e04 	addi	r5,r3,56
 80051ec:	2947883a 	add	r3,r5,r5
 80051f0:	18c7883a 	add	r3,r3,r3
 80051f4:	18c7883a 	add	r3,r3,r3
 80051f8:	1a49883a 	add	r4,r3,r9
 80051fc:	20c00217 	ldw	r3,8(r4)
 8005200:	01c20074 	movhi	r7,2049
 8005204:	39c1ac04 	addi	r7,r7,1712
 8005208:	19003b26 	beq	r3,r4,80052f8 <_free_r+0x258>
 800520c:	01ffff04 	movi	r7,-4
 8005210:	19400117 	ldw	r5,4(r3)
 8005214:	29ca703a 	and	r5,r5,r7
 8005218:	1140022e 	bgeu	r2,r5,8005224 <_free_r+0x184>
 800521c:	18c00217 	ldw	r3,8(r3)
 8005220:	20fffb1e 	bne	r4,r3,8005210 <_free_r+0x170>
 8005224:	18800317 	ldw	r2,12(r3)
 8005228:	30800315 	stw	r2,12(r6)
 800522c:	30c00215 	stw	r3,8(r6)
 8005230:	11800215 	stw	r6,8(r2)
 8005234:	19800315 	stw	r6,12(r3)
 8005238:	003fe006 	br	80051bc <_free_r+0x11c>
 800523c:	2100004c 	andi	r4,r4,1
 8005240:	1885883a 	add	r2,r3,r2
 8005244:	2000071e 	bne	r4,zero,8005264 <_free_r+0x1c4>
 8005248:	817ffe17 	ldw	r5,-8(r16)
 800524c:	314dc83a 	sub	r6,r6,r5
 8005250:	30c00317 	ldw	r3,12(r6)
 8005254:	31000217 	ldw	r4,8(r6)
 8005258:	1145883a 	add	r2,r2,r5
 800525c:	20c00315 	stw	r3,12(r4)
 8005260:	19000215 	stw	r4,8(r3)
 8005264:	10c00054 	ori	r3,r2,1
 8005268:	30c00115 	stw	r3,4(r6)
 800526c:	00c20074 	movhi	r3,2049
 8005270:	18c73404 	addi	r3,r3,7376
 8005274:	18c00017 	ldw	r3,0(r3)
 8005278:	49800215 	stw	r6,8(r9)
 800527c:	10ffcf36 	bltu	r2,r3,80051bc <_free_r+0x11c>
 8005280:	00820074 	movhi	r2,2049
 8005284:	108e0004 	addi	r2,r2,14336
 8005288:	11400017 	ldw	r5,0(r2)
 800528c:	8809883a 	mov	r4,r17
 8005290:	8004f7c0 	call	8004f7c <_malloc_trim_r>
 8005294:	003fc906 	br	80051bc <_free_r+0x11c>
 8005298:	28c9883a 	add	r4,r5,r3
 800529c:	21000117 	ldw	r4,4(r4)
 80052a0:	2100004c 	andi	r4,r4,1
 80052a4:	20000a1e 	bne	r4,zero,80052d0 <_free_r+0x230>
 80052a8:	29000317 	ldw	r4,12(r5)
 80052ac:	29400217 	ldw	r5,8(r5)
 80052b0:	10c5883a 	add	r2,r2,r3
 80052b4:	10c00054 	ori	r3,r2,1
 80052b8:	29000315 	stw	r4,12(r5)
 80052bc:	21400215 	stw	r5,8(r4)
 80052c0:	30c00115 	stw	r3,4(r6)
 80052c4:	308d883a 	add	r6,r6,r2
 80052c8:	30800015 	stw	r2,0(r6)
 80052cc:	003fbb06 	br	80051bc <_free_r+0x11c>
 80052d0:	10c00054 	ori	r3,r2,1
 80052d4:	30c00115 	stw	r3,4(r6)
 80052d8:	308d883a 	add	r6,r6,r2
 80052dc:	30800015 	stw	r2,0(r6)
 80052e0:	003fb606 	br	80051bc <_free_r+0x11c>
 80052e4:	01000504 	movi	r4,20
 80052e8:	20c01436 	bltu	r4,r3,800533c <_free_r+0x29c>
 80052ec:	194016c4 	addi	r5,r3,91
 80052f0:	2947883a 	add	r3,r5,r5
 80052f4:	003fbe06 	br	80051f0 <_free_r+0x150>
 80052f8:	280bd0ba 	srai	r5,r5,2
 80052fc:	00800044 	movi	r2,1
 8005300:	39000117 	ldw	r4,4(r7)
 8005304:	114a983a 	sll	r5,r2,r5
 8005308:	1805883a 	mov	r2,r3
 800530c:	2908b03a 	or	r4,r5,r4
 8005310:	39000115 	stw	r4,4(r7)
 8005314:	003fc406 	br	8005228 <_free_r+0x188>
 8005318:	49800515 	stw	r6,20(r9)
 800531c:	49800415 	stw	r6,16(r9)
 8005320:	10c00054 	ori	r3,r2,1
 8005324:	31000315 	stw	r4,12(r6)
 8005328:	31000215 	stw	r4,8(r6)
 800532c:	30c00115 	stw	r3,4(r6)
 8005330:	308d883a 	add	r6,r6,r2
 8005334:	30800015 	stw	r2,0(r6)
 8005338:	003fa006 	br	80051bc <_free_r+0x11c>
 800533c:	01001504 	movi	r4,84
 8005340:	20c00436 	bltu	r4,r3,8005354 <_free_r+0x2b4>
 8005344:	1006d33a 	srli	r3,r2,12
 8005348:	19401b84 	addi	r5,r3,110
 800534c:	2947883a 	add	r3,r5,r5
 8005350:	003fa706 	br	80051f0 <_free_r+0x150>
 8005354:	01005504 	movi	r4,340
 8005358:	20c00436 	bltu	r4,r3,800536c <_free_r+0x2cc>
 800535c:	1006d3fa 	srli	r3,r2,15
 8005360:	19401dc4 	addi	r5,r3,119
 8005364:	2947883a 	add	r3,r5,r5
 8005368:	003fa106 	br	80051f0 <_free_r+0x150>
 800536c:	01015504 	movi	r4,1364
 8005370:	20c00436 	bltu	r4,r3,8005384 <_free_r+0x2e4>
 8005374:	1006d4ba 	srli	r3,r2,18
 8005378:	19401f04 	addi	r5,r3,124
 800537c:	2947883a 	add	r3,r5,r5
 8005380:	003f9b06 	br	80051f0 <_free_r+0x150>
 8005384:	00c03f04 	movi	r3,252
 8005388:	01401f84 	movi	r5,126
 800538c:	003f9806 	br	80051f0 <_free_r+0x150>

08005390 <_fwalk>:
 8005390:	defff704 	addi	sp,sp,-36
 8005394:	dd000415 	stw	r20,16(sp)
 8005398:	dfc00815 	stw	ra,32(sp)
 800539c:	ddc00715 	stw	r23,28(sp)
 80053a0:	dd800615 	stw	r22,24(sp)
 80053a4:	dd400515 	stw	r21,20(sp)
 80053a8:	dcc00315 	stw	r19,12(sp)
 80053ac:	dc800215 	stw	r18,8(sp)
 80053b0:	dc400115 	stw	r17,4(sp)
 80053b4:	dc000015 	stw	r16,0(sp)
 80053b8:	2500b804 	addi	r20,r4,736
 80053bc:	a0002326 	beq	r20,zero,800544c <_fwalk+0xbc>
 80053c0:	282b883a 	mov	r21,r5
 80053c4:	002f883a 	mov	r23,zero
 80053c8:	05800044 	movi	r22,1
 80053cc:	04ffffc4 	movi	r19,-1
 80053d0:	a4400117 	ldw	r17,4(r20)
 80053d4:	a4800217 	ldw	r18,8(r20)
 80053d8:	8c7fffc4 	addi	r17,r17,-1
 80053dc:	88000d16 	blt	r17,zero,8005414 <_fwalk+0x84>
 80053e0:	94000304 	addi	r16,r18,12
 80053e4:	94800384 	addi	r18,r18,14
 80053e8:	80c0000b 	ldhu	r3,0(r16)
 80053ec:	8c7fffc4 	addi	r17,r17,-1
 80053f0:	813ffd04 	addi	r4,r16,-12
 80053f4:	b0c0042e 	bgeu	r22,r3,8005408 <_fwalk+0x78>
 80053f8:	90c0000f 	ldh	r3,0(r18)
 80053fc:	1cc00226 	beq	r3,r19,8005408 <_fwalk+0x78>
 8005400:	a83ee83a 	callr	r21
 8005404:	b8aeb03a 	or	r23,r23,r2
 8005408:	84001a04 	addi	r16,r16,104
 800540c:	94801a04 	addi	r18,r18,104
 8005410:	8cfff51e 	bne	r17,r19,80053e8 <_fwalk+0x58>
 8005414:	a5000017 	ldw	r20,0(r20)
 8005418:	a03fed1e 	bne	r20,zero,80053d0 <_fwalk+0x40>
 800541c:	b805883a 	mov	r2,r23
 8005420:	dfc00817 	ldw	ra,32(sp)
 8005424:	ddc00717 	ldw	r23,28(sp)
 8005428:	dd800617 	ldw	r22,24(sp)
 800542c:	dd400517 	ldw	r21,20(sp)
 8005430:	dd000417 	ldw	r20,16(sp)
 8005434:	dcc00317 	ldw	r19,12(sp)
 8005438:	dc800217 	ldw	r18,8(sp)
 800543c:	dc400117 	ldw	r17,4(sp)
 8005440:	dc000017 	ldw	r16,0(sp)
 8005444:	dec00904 	addi	sp,sp,36
 8005448:	f800283a 	ret
 800544c:	002f883a 	mov	r23,zero
 8005450:	003ff206 	br	800541c <_fwalk+0x8c>

08005454 <_fwalk_reent>:
 8005454:	defff704 	addi	sp,sp,-36
 8005458:	dd400515 	stw	r21,20(sp)
 800545c:	dfc00815 	stw	ra,32(sp)
 8005460:	ddc00715 	stw	r23,28(sp)
 8005464:	dd800615 	stw	r22,24(sp)
 8005468:	dd000415 	stw	r20,16(sp)
 800546c:	dcc00315 	stw	r19,12(sp)
 8005470:	dc800215 	stw	r18,8(sp)
 8005474:	dc400115 	stw	r17,4(sp)
 8005478:	dc000015 	stw	r16,0(sp)
 800547c:	2540b804 	addi	r21,r4,736
 8005480:	a8002326 	beq	r21,zero,8005510 <_fwalk_reent+0xbc>
 8005484:	2829883a 	mov	r20,r5
 8005488:	202d883a 	mov	r22,r4
 800548c:	002f883a 	mov	r23,zero
 8005490:	04c00044 	movi	r19,1
 8005494:	04bfffc4 	movi	r18,-1
 8005498:	ac400117 	ldw	r17,4(r21)
 800549c:	ac000217 	ldw	r16,8(r21)
 80054a0:	8c7fffc4 	addi	r17,r17,-1
 80054a4:	88000c16 	blt	r17,zero,80054d8 <_fwalk_reent+0x84>
 80054a8:	84000304 	addi	r16,r16,12
 80054ac:	80c0000b 	ldhu	r3,0(r16)
 80054b0:	8c7fffc4 	addi	r17,r17,-1
 80054b4:	817ffd04 	addi	r5,r16,-12
 80054b8:	98c0052e 	bgeu	r19,r3,80054d0 <_fwalk_reent+0x7c>
 80054bc:	80c0008f 	ldh	r3,2(r16)
 80054c0:	b009883a 	mov	r4,r22
 80054c4:	1c800226 	beq	r3,r18,80054d0 <_fwalk_reent+0x7c>
 80054c8:	a03ee83a 	callr	r20
 80054cc:	b8aeb03a 	or	r23,r23,r2
 80054d0:	84001a04 	addi	r16,r16,104
 80054d4:	8cbff51e 	bne	r17,r18,80054ac <_fwalk_reent+0x58>
 80054d8:	ad400017 	ldw	r21,0(r21)
 80054dc:	a83fee1e 	bne	r21,zero,8005498 <_fwalk_reent+0x44>
 80054e0:	b805883a 	mov	r2,r23
 80054e4:	dfc00817 	ldw	ra,32(sp)
 80054e8:	ddc00717 	ldw	r23,28(sp)
 80054ec:	dd800617 	ldw	r22,24(sp)
 80054f0:	dd400517 	ldw	r21,20(sp)
 80054f4:	dd000417 	ldw	r20,16(sp)
 80054f8:	dcc00317 	ldw	r19,12(sp)
 80054fc:	dc800217 	ldw	r18,8(sp)
 8005500:	dc400117 	ldw	r17,4(sp)
 8005504:	dc000017 	ldw	r16,0(sp)
 8005508:	dec00904 	addi	sp,sp,36
 800550c:	f800283a 	ret
 8005510:	002f883a 	mov	r23,zero
 8005514:	003ff206 	br	80054e0 <_fwalk_reent+0x8c>

08005518 <_setlocale_r>:
 8005518:	30001b26 	beq	r6,zero,8005588 <_setlocale_r+0x70>
 800551c:	01420074 	movhi	r5,2049
 8005520:	defffe04 	addi	sp,sp,-8
 8005524:	29402404 	addi	r5,r5,144
 8005528:	3009883a 	mov	r4,r6
 800552c:	dc000015 	stw	r16,0(sp)
 8005530:	dfc00115 	stw	ra,4(sp)
 8005534:	3021883a 	mov	r16,r6
 8005538:	80074fc0 	call	80074fc <strcmp>
 800553c:	1000061e 	bne	r2,zero,8005558 <_setlocale_r+0x40>
 8005540:	00820074 	movhi	r2,2049
 8005544:	10802304 	addi	r2,r2,140
 8005548:	dfc00117 	ldw	ra,4(sp)
 800554c:	dc000017 	ldw	r16,0(sp)
 8005550:	dec00204 	addi	sp,sp,8
 8005554:	f800283a 	ret
 8005558:	01420074 	movhi	r5,2049
 800555c:	29402304 	addi	r5,r5,140
 8005560:	8009883a 	mov	r4,r16
 8005564:	80074fc0 	call	80074fc <strcmp>
 8005568:	103ff526 	beq	r2,zero,8005540 <_setlocale_r+0x28>
 800556c:	01420074 	movhi	r5,2049
 8005570:	29400e04 	addi	r5,r5,56
 8005574:	8009883a 	mov	r4,r16
 8005578:	80074fc0 	call	80074fc <strcmp>
 800557c:	103ff026 	beq	r2,zero,8005540 <_setlocale_r+0x28>
 8005580:	0005883a 	mov	r2,zero
 8005584:	003ff006 	br	8005548 <_setlocale_r+0x30>
 8005588:	00820074 	movhi	r2,2049
 800558c:	10802304 	addi	r2,r2,140
 8005590:	f800283a 	ret

08005594 <__locale_charset>:
 8005594:	00820074 	movhi	r2,2049
 8005598:	10819604 	addi	r2,r2,1624
 800559c:	f800283a 	ret

080055a0 <__locale_mb_cur_max>:
 80055a0:	00820074 	movhi	r2,2049
 80055a4:	10873204 	addi	r2,r2,7368
 80055a8:	10800017 	ldw	r2,0(r2)
 80055ac:	f800283a 	ret

080055b0 <__locale_msgcharset>:
 80055b0:	00820074 	movhi	r2,2049
 80055b4:	10818e04 	addi	r2,r2,1592
 80055b8:	f800283a 	ret

080055bc <__locale_cjk_lang>:
 80055bc:	0005883a 	mov	r2,zero
 80055c0:	f800283a 	ret

080055c4 <_localeconv_r>:
 80055c4:	00820074 	movhi	r2,2049
 80055c8:	10819e04 	addi	r2,r2,1656
 80055cc:	f800283a 	ret

080055d0 <setlocale>:
 80055d0:	00c20074 	movhi	r3,2049
 80055d4:	18c73104 	addi	r3,r3,7364
 80055d8:	2005883a 	mov	r2,r4
 80055dc:	19000017 	ldw	r4,0(r3)
 80055e0:	280d883a 	mov	r6,r5
 80055e4:	100b883a 	mov	r5,r2
 80055e8:	80055181 	jmpi	8005518 <_setlocale_r>

080055ec <localeconv>:
 80055ec:	00820074 	movhi	r2,2049
 80055f0:	10819e04 	addi	r2,r2,1656
 80055f4:	f800283a 	ret

080055f8 <__smakebuf_r>:
 80055f8:	2880030b 	ldhu	r2,12(r5)
 80055fc:	10c0008c 	andi	r3,r2,2
 8005600:	1800401e 	bne	r3,zero,8005704 <__smakebuf_r+0x10c>
 8005604:	deffec04 	addi	sp,sp,-80
 8005608:	dc000f15 	stw	r16,60(sp)
 800560c:	2821883a 	mov	r16,r5
 8005610:	2940038f 	ldh	r5,14(r5)
 8005614:	dc401015 	stw	r17,64(sp)
 8005618:	dfc01315 	stw	ra,76(sp)
 800561c:	dcc01215 	stw	r19,72(sp)
 8005620:	dc801115 	stw	r18,68(sp)
 8005624:	2023883a 	mov	r17,r4
 8005628:	28001b16 	blt	r5,zero,8005698 <__smakebuf_r+0xa0>
 800562c:	d80d883a 	mov	r6,sp
 8005630:	8008f880 	call	8008f88 <_fstat_r>
 8005634:	10001716 	blt	r2,zero,8005694 <__smakebuf_r+0x9c>
 8005638:	d8800117 	ldw	r2,4(sp)
 800563c:	00e00014 	movui	r3,32768
 8005640:	10bc000c 	andi	r2,r2,61440
 8005644:	10c03726 	beq	r2,r3,8005724 <__smakebuf_r+0x12c>
 8005648:	80c0030b 	ldhu	r3,12(r16)
 800564c:	18c20014 	ori	r3,r3,2048
 8005650:	80c0030d 	sth	r3,12(r16)
 8005654:	00c80004 	movi	r3,8192
 8005658:	10c03c1e 	bne	r2,r3,800574c <__smakebuf_r+0x154>
 800565c:	8140038f 	ldh	r5,14(r16)
 8005660:	8809883a 	mov	r4,r17
 8005664:	80094ac0 	call	80094ac <_isatty_r>
 8005668:	10004e26 	beq	r2,zero,80057a4 <__smakebuf_r+0x1ac>
 800566c:	8080030b 	ldhu	r2,12(r16)
 8005670:	04c00044 	movi	r19,1
 8005674:	80c010c4 	addi	r3,r16,67
 8005678:	14c4b03a 	or	r2,r2,r19
 800567c:	8080030d 	sth	r2,12(r16)
 8005680:	80c00015 	stw	r3,0(r16)
 8005684:	80c00415 	stw	r3,16(r16)
 8005688:	84c00515 	stw	r19,20(r16)
 800568c:	04810004 	movi	r18,1024
 8005690:	00000706 	br	80056b0 <__smakebuf_r+0xb8>
 8005694:	8080030b 	ldhu	r2,12(r16)
 8005698:	10c0200c 	andi	r3,r2,128
 800569c:	18001f1e 	bne	r3,zero,800571c <__smakebuf_r+0x124>
 80056a0:	04810004 	movi	r18,1024
 80056a4:	10820014 	ori	r2,r2,2048
 80056a8:	8080030d 	sth	r2,12(r16)
 80056ac:	0027883a 	mov	r19,zero
 80056b0:	8809883a 	mov	r4,r17
 80056b4:	900b883a 	mov	r5,r18
 80056b8:	80057b00 	call	80057b0 <_malloc_r>
 80056bc:	10002e26 	beq	r2,zero,8005778 <__smakebuf_r+0x180>
 80056c0:	80c0030b 	ldhu	r3,12(r16)
 80056c4:	01020034 	movhi	r4,2048
 80056c8:	2112f704 	addi	r4,r4,19420
 80056cc:	89000f15 	stw	r4,60(r17)
 80056d0:	18c02014 	ori	r3,r3,128
 80056d4:	80c0030d 	sth	r3,12(r16)
 80056d8:	80800015 	stw	r2,0(r16)
 80056dc:	80800415 	stw	r2,16(r16)
 80056e0:	84800515 	stw	r18,20(r16)
 80056e4:	98001c1e 	bne	r19,zero,8005758 <__smakebuf_r+0x160>
 80056e8:	dfc01317 	ldw	ra,76(sp)
 80056ec:	dcc01217 	ldw	r19,72(sp)
 80056f0:	dc801117 	ldw	r18,68(sp)
 80056f4:	dc401017 	ldw	r17,64(sp)
 80056f8:	dc000f17 	ldw	r16,60(sp)
 80056fc:	dec01404 	addi	sp,sp,80
 8005700:	f800283a 	ret
 8005704:	288010c4 	addi	r2,r5,67
 8005708:	28800015 	stw	r2,0(r5)
 800570c:	28800415 	stw	r2,16(r5)
 8005710:	00800044 	movi	r2,1
 8005714:	28800515 	stw	r2,20(r5)
 8005718:	f800283a 	ret
 800571c:	04801004 	movi	r18,64
 8005720:	003fe006 	br	80056a4 <__smakebuf_r+0xac>
 8005724:	81000a17 	ldw	r4,40(r16)
 8005728:	00c20034 	movhi	r3,2048
 800572c:	18dd2604 	addi	r3,r3,29848
 8005730:	20ffc51e 	bne	r4,r3,8005648 <__smakebuf_r+0x50>
 8005734:	80c0030b 	ldhu	r3,12(r16)
 8005738:	01010004 	movi	r4,1024
 800573c:	81001315 	stw	r4,76(r16)
 8005740:	1906b03a 	or	r3,r3,r4
 8005744:	80c0030d 	sth	r3,12(r16)
 8005748:	003fc206 	br	8005654 <__smakebuf_r+0x5c>
 800574c:	0027883a 	mov	r19,zero
 8005750:	04810004 	movi	r18,1024
 8005754:	003fd606 	br	80056b0 <__smakebuf_r+0xb8>
 8005758:	8140038f 	ldh	r5,14(r16)
 800575c:	8809883a 	mov	r4,r17
 8005760:	80094ac0 	call	80094ac <_isatty_r>
 8005764:	103fe026 	beq	r2,zero,80056e8 <__smakebuf_r+0xf0>
 8005768:	8080030b 	ldhu	r2,12(r16)
 800576c:	10800054 	ori	r2,r2,1
 8005770:	8080030d 	sth	r2,12(r16)
 8005774:	003fdc06 	br	80056e8 <__smakebuf_r+0xf0>
 8005778:	8080030b 	ldhu	r2,12(r16)
 800577c:	10c0800c 	andi	r3,r2,512
 8005780:	183fd91e 	bne	r3,zero,80056e8 <__smakebuf_r+0xf0>
 8005784:	10800094 	ori	r2,r2,2
 8005788:	80c010c4 	addi	r3,r16,67
 800578c:	8080030d 	sth	r2,12(r16)
 8005790:	00800044 	movi	r2,1
 8005794:	80c00015 	stw	r3,0(r16)
 8005798:	80c00415 	stw	r3,16(r16)
 800579c:	80800515 	stw	r2,20(r16)
 80057a0:	003fd106 	br	80056e8 <__smakebuf_r+0xf0>
 80057a4:	04c00044 	movi	r19,1
 80057a8:	04810004 	movi	r18,1024
 80057ac:	003fc006 	br	80056b0 <__smakebuf_r+0xb8>

080057b0 <_malloc_r>:
 80057b0:	defff504 	addi	sp,sp,-44
 80057b4:	dc800315 	stw	r18,12(sp)
 80057b8:	dfc00a15 	stw	ra,40(sp)
 80057bc:	df000915 	stw	fp,36(sp)
 80057c0:	ddc00815 	stw	r23,32(sp)
 80057c4:	dd800715 	stw	r22,28(sp)
 80057c8:	dd400615 	stw	r21,24(sp)
 80057cc:	dd000515 	stw	r20,20(sp)
 80057d0:	dcc00415 	stw	r19,16(sp)
 80057d4:	dc400215 	stw	r17,8(sp)
 80057d8:	dc000115 	stw	r16,4(sp)
 80057dc:	288002c4 	addi	r2,r5,11
 80057e0:	00c00584 	movi	r3,22
 80057e4:	2025883a 	mov	r18,r4
 80057e8:	18802a2e 	bgeu	r3,r2,8005894 <_malloc_r+0xe4>
 80057ec:	047ffe04 	movi	r17,-8
 80057f0:	1462703a 	and	r17,r2,r17
 80057f4:	88009e16 	blt	r17,zero,8005a70 <_malloc_r+0x2c0>
 80057f8:	89409d36 	bltu	r17,r5,8005a70 <_malloc_r+0x2c0>
 80057fc:	800dab80 	call	800dab8 <__malloc_lock>
 8005800:	00807dc4 	movi	r2,503
 8005804:	14402736 	bltu	r2,r17,80058a4 <_malloc_r+0xf4>
 8005808:	8806d0fa 	srli	r3,r17,3
 800580c:	04c20074 	movhi	r19,2049
 8005810:	9cc1ac04 	addi	r19,r19,1712
 8005814:	18c5883a 	add	r2,r3,r3
 8005818:	1085883a 	add	r2,r2,r2
 800581c:	1085883a 	add	r2,r2,r2
 8005820:	9885883a 	add	r2,r19,r2
 8005824:	14000317 	ldw	r16,12(r2)
 8005828:	80814a26 	beq	r16,r2,8005d54 <_malloc_r+0x5a4>
 800582c:	80c00117 	ldw	r3,4(r16)
 8005830:	81000317 	ldw	r4,12(r16)
 8005834:	00bfff04 	movi	r2,-4
 8005838:	1884703a 	and	r2,r3,r2
 800583c:	81400217 	ldw	r5,8(r16)
 8005840:	8085883a 	add	r2,r16,r2
 8005844:	10c00117 	ldw	r3,4(r2)
 8005848:	29000315 	stw	r4,12(r5)
 800584c:	21400215 	stw	r5,8(r4)
 8005850:	18c00054 	ori	r3,r3,1
 8005854:	10c00115 	stw	r3,4(r2)
 8005858:	9009883a 	mov	r4,r18
 800585c:	800dad80 	call	800dad8 <__malloc_unlock>
 8005860:	80800204 	addi	r2,r16,8
 8005864:	dfc00a17 	ldw	ra,40(sp)
 8005868:	df000917 	ldw	fp,36(sp)
 800586c:	ddc00817 	ldw	r23,32(sp)
 8005870:	dd800717 	ldw	r22,28(sp)
 8005874:	dd400617 	ldw	r21,24(sp)
 8005878:	dd000517 	ldw	r20,20(sp)
 800587c:	dcc00417 	ldw	r19,16(sp)
 8005880:	dc800317 	ldw	r18,12(sp)
 8005884:	dc400217 	ldw	r17,8(sp)
 8005888:	dc000117 	ldw	r16,4(sp)
 800588c:	dec00b04 	addi	sp,sp,44
 8005890:	f800283a 	ret
 8005894:	04400404 	movi	r17,16
 8005898:	89407536 	bltu	r17,r5,8005a70 <_malloc_r+0x2c0>
 800589c:	800dab80 	call	800dab8 <__malloc_lock>
 80058a0:	003fd906 	br	8005808 <_malloc_r+0x58>
 80058a4:	8806d27a 	srli	r3,r17,9
 80058a8:	18007526 	beq	r3,zero,8005a80 <_malloc_r+0x2d0>
 80058ac:	00800104 	movi	r2,4
 80058b0:	10c0ef36 	bltu	r2,r3,8005c70 <_malloc_r+0x4c0>
 80058b4:	8806d1ba 	srli	r3,r17,6
 80058b8:	19c00e04 	addi	r7,r3,56
 80058bc:	39cb883a 	add	r5,r7,r7
 80058c0:	04c20074 	movhi	r19,2049
 80058c4:	294b883a 	add	r5,r5,r5
 80058c8:	9cc1ac04 	addi	r19,r19,1712
 80058cc:	294b883a 	add	r5,r5,r5
 80058d0:	994b883a 	add	r5,r19,r5
 80058d4:	2c000317 	ldw	r16,12(r5)
 80058d8:	2c000e26 	beq	r5,r16,8005914 <_malloc_r+0x164>
 80058dc:	80800117 	ldw	r2,4(r16)
 80058e0:	01bfff04 	movi	r6,-4
 80058e4:	010003c4 	movi	r4,15
 80058e8:	1184703a 	and	r2,r2,r6
 80058ec:	1447c83a 	sub	r3,r2,r17
 80058f0:	20c00716 	blt	r4,r3,8005910 <_malloc_r+0x160>
 80058f4:	1800650e 	bge	r3,zero,8005a8c <_malloc_r+0x2dc>
 80058f8:	84000317 	ldw	r16,12(r16)
 80058fc:	2c000526 	beq	r5,r16,8005914 <_malloc_r+0x164>
 8005900:	80800117 	ldw	r2,4(r16)
 8005904:	1184703a 	and	r2,r2,r6
 8005908:	1447c83a 	sub	r3,r2,r17
 800590c:	20fff90e 	bge	r4,r3,80058f4 <_malloc_r+0x144>
 8005910:	39ffffc4 	addi	r7,r7,-1
 8005914:	38c00044 	addi	r3,r7,1
 8005918:	01820074 	movhi	r6,2049
 800591c:	9c000417 	ldw	r16,16(r19)
 8005920:	3181ac04 	addi	r6,r6,1712
 8005924:	32400204 	addi	r9,r6,8
 8005928:	82410326 	beq	r16,r9,8005d38 <_malloc_r+0x588>
 800592c:	81000117 	ldw	r4,4(r16)
 8005930:	00bfff04 	movi	r2,-4
 8005934:	208e703a 	and	r7,r4,r2
 8005938:	3c45c83a 	sub	r2,r7,r17
 800593c:	010003c4 	movi	r4,15
 8005940:	2080ee16 	blt	r4,r2,8005cfc <_malloc_r+0x54c>
 8005944:	32400515 	stw	r9,20(r6)
 8005948:	32400415 	stw	r9,16(r6)
 800594c:	1000510e 	bge	r2,zero,8005a94 <_malloc_r+0x2e4>
 8005950:	00807fc4 	movi	r2,511
 8005954:	11c0ce36 	bltu	r2,r7,8005c90 <_malloc_r+0x4e0>
 8005958:	3808d0fa 	srli	r4,r7,3
 800595c:	01c00044 	movi	r7,1
 8005960:	30800117 	ldw	r2,4(r6)
 8005964:	210b883a 	add	r5,r4,r4
 8005968:	294b883a 	add	r5,r5,r5
 800596c:	2009d0ba 	srai	r4,r4,2
 8005970:	294b883a 	add	r5,r5,r5
 8005974:	298b883a 	add	r5,r5,r6
 8005978:	2a000217 	ldw	r8,8(r5)
 800597c:	3908983a 	sll	r4,r7,r4
 8005980:	81400315 	stw	r5,12(r16)
 8005984:	82000215 	stw	r8,8(r16)
 8005988:	2088b03a 	or	r4,r4,r2
 800598c:	2c000215 	stw	r16,8(r5)
 8005990:	31000115 	stw	r4,4(r6)
 8005994:	44000315 	stw	r16,12(r8)
 8005998:	1805d0ba 	srai	r2,r3,2
 800599c:	01400044 	movi	r5,1
 80059a0:	288a983a 	sll	r5,r5,r2
 80059a4:	21404336 	bltu	r4,r5,8005ab4 <_malloc_r+0x304>
 80059a8:	2144703a 	and	r2,r4,r5
 80059ac:	10000a1e 	bne	r2,zero,80059d8 <_malloc_r+0x228>
 80059b0:	00bfff04 	movi	r2,-4
 80059b4:	294b883a 	add	r5,r5,r5
 80059b8:	1886703a 	and	r3,r3,r2
 80059bc:	2144703a 	and	r2,r4,r5
 80059c0:	18c00104 	addi	r3,r3,4
 80059c4:	1000041e 	bne	r2,zero,80059d8 <_malloc_r+0x228>
 80059c8:	294b883a 	add	r5,r5,r5
 80059cc:	2144703a 	and	r2,r4,r5
 80059d0:	18c00104 	addi	r3,r3,4
 80059d4:	103ffc26 	beq	r2,zero,80059c8 <_malloc_r+0x218>
 80059d8:	023fff04 	movi	r8,-4
 80059dc:	01c003c4 	movi	r7,15
 80059e0:	18c5883a 	add	r2,r3,r3
 80059e4:	1085883a 	add	r2,r2,r2
 80059e8:	1085883a 	add	r2,r2,r2
 80059ec:	9895883a 	add	r10,r19,r2
 80059f0:	52c00304 	addi	r11,r10,12
 80059f4:	1819883a 	mov	r12,r3
 80059f8:	5c000017 	ldw	r16,0(r11)
 80059fc:	59bffd04 	addi	r6,r11,-12
 8005a00:	8180041e 	bne	r16,r6,8005a14 <_malloc_r+0x264>
 8005a04:	0000ce06 	br	8005d40 <_malloc_r+0x590>
 8005a08:	2000d70e 	bge	r4,zero,8005d68 <_malloc_r+0x5b8>
 8005a0c:	84000317 	ldw	r16,12(r16)
 8005a10:	8180cb26 	beq	r16,r6,8005d40 <_malloc_r+0x590>
 8005a14:	80800117 	ldw	r2,4(r16)
 8005a18:	1204703a 	and	r2,r2,r8
 8005a1c:	1449c83a 	sub	r4,r2,r17
 8005a20:	393ff90e 	bge	r7,r4,8005a08 <_malloc_r+0x258>
 8005a24:	80800317 	ldw	r2,12(r16)
 8005a28:	80c00217 	ldw	r3,8(r16)
 8005a2c:	89400054 	ori	r5,r17,1
 8005a30:	81400115 	stw	r5,4(r16)
 8005a34:	18800315 	stw	r2,12(r3)
 8005a38:	10c00215 	stw	r3,8(r2)
 8005a3c:	8463883a 	add	r17,r16,r17
 8005a40:	9c400515 	stw	r17,20(r19)
 8005a44:	9c400415 	stw	r17,16(r19)
 8005a48:	20800054 	ori	r2,r4,1
 8005a4c:	88800115 	stw	r2,4(r17)
 8005a50:	8a400315 	stw	r9,12(r17)
 8005a54:	8a400215 	stw	r9,8(r17)
 8005a58:	8923883a 	add	r17,r17,r4
 8005a5c:	89000015 	stw	r4,0(r17)
 8005a60:	9009883a 	mov	r4,r18
 8005a64:	800dad80 	call	800dad8 <__malloc_unlock>
 8005a68:	80800204 	addi	r2,r16,8
 8005a6c:	003f7d06 	br	8005864 <_malloc_r+0xb4>
 8005a70:	00800304 	movi	r2,12
 8005a74:	90800015 	stw	r2,0(r18)
 8005a78:	0005883a 	mov	r2,zero
 8005a7c:	003f7906 	br	8005864 <_malloc_r+0xb4>
 8005a80:	01401f84 	movi	r5,126
 8005a84:	01c00fc4 	movi	r7,63
 8005a88:	003f8d06 	br	80058c0 <_malloc_r+0x110>
 8005a8c:	81000317 	ldw	r4,12(r16)
 8005a90:	003f6a06 	br	800583c <_malloc_r+0x8c>
 8005a94:	81c5883a 	add	r2,r16,r7
 8005a98:	10c00117 	ldw	r3,4(r2)
 8005a9c:	9009883a 	mov	r4,r18
 8005aa0:	18c00054 	ori	r3,r3,1
 8005aa4:	10c00115 	stw	r3,4(r2)
 8005aa8:	800dad80 	call	800dad8 <__malloc_unlock>
 8005aac:	80800204 	addi	r2,r16,8
 8005ab0:	003f6c06 	br	8005864 <_malloc_r+0xb4>
 8005ab4:	9c000217 	ldw	r16,8(r19)
 8005ab8:	00bfff04 	movi	r2,-4
 8005abc:	85800117 	ldw	r22,4(r16)
 8005ac0:	b0ac703a 	and	r22,r22,r2
 8005ac4:	b4400336 	bltu	r22,r17,8005ad4 <_malloc_r+0x324>
 8005ac8:	b445c83a 	sub	r2,r22,r17
 8005acc:	00c003c4 	movi	r3,15
 8005ad0:	18805d16 	blt	r3,r2,8005c48 <_malloc_r+0x498>
 8005ad4:	05c20074 	movhi	r23,2049
 8005ad8:	00820074 	movhi	r2,2049
 8005adc:	bdc73304 	addi	r23,r23,7372
 8005ae0:	108e0004 	addi	r2,r2,14336
 8005ae4:	15400017 	ldw	r21,0(r2)
 8005ae8:	b9000017 	ldw	r4,0(r23)
 8005aec:	00ffffc4 	movi	r3,-1
 8005af0:	858d883a 	add	r6,r16,r22
 8005af4:	8d6b883a 	add	r21,r17,r21
 8005af8:	20c0e426 	beq	r4,r3,8005e8c <_malloc_r+0x6dc>
 8005afc:	ad4403c4 	addi	r21,r21,4111
 8005b00:	00fc0004 	movi	r3,-4096
 8005b04:	a8ea703a 	and	r21,r21,r3
 8005b08:	9009883a 	mov	r4,r18
 8005b0c:	a80b883a 	mov	r5,r21
 8005b10:	d9800015 	stw	r6,0(sp)
 8005b14:	800736c0 	call	800736c <_sbrk_r>
 8005b18:	00ffffc4 	movi	r3,-1
 8005b1c:	1029883a 	mov	r20,r2
 8005b20:	d9800017 	ldw	r6,0(sp)
 8005b24:	10c0a426 	beq	r2,r3,8005db8 <_malloc_r+0x608>
 8005b28:	1180a236 	bltu	r2,r6,8005db4 <_malloc_r+0x604>
 8005b2c:	07020074 	movhi	fp,2049
 8005b30:	e70e0a04 	addi	fp,fp,14376
 8005b34:	e0c00017 	ldw	r3,0(fp)
 8005b38:	a8c7883a 	add	r3,r21,r3
 8005b3c:	e0c00015 	stw	r3,0(fp)
 8005b40:	3500da26 	beq	r6,r20,8005eac <_malloc_r+0x6fc>
 8005b44:	b9000017 	ldw	r4,0(r23)
 8005b48:	00bfffc4 	movi	r2,-1
 8005b4c:	2080e426 	beq	r4,r2,8005ee0 <_malloc_r+0x730>
 8005b50:	a185c83a 	sub	r2,r20,r6
 8005b54:	1885883a 	add	r2,r3,r2
 8005b58:	e0800015 	stw	r2,0(fp)
 8005b5c:	a0c001cc 	andi	r3,r20,7
 8005b60:	1800b526 	beq	r3,zero,8005e38 <_malloc_r+0x688>
 8005b64:	a0e9c83a 	sub	r20,r20,r3
 8005b68:	00840204 	movi	r2,4104
 8005b6c:	a5000204 	addi	r20,r20,8
 8005b70:	10c7c83a 	sub	r3,r2,r3
 8005b74:	a545883a 	add	r2,r20,r21
 8005b78:	1083ffcc 	andi	r2,r2,4095
 8005b7c:	18abc83a 	sub	r21,r3,r2
 8005b80:	9009883a 	mov	r4,r18
 8005b84:	a80b883a 	mov	r5,r21
 8005b88:	800736c0 	call	800736c <_sbrk_r>
 8005b8c:	00ffffc4 	movi	r3,-1
 8005b90:	10c0d026 	beq	r2,r3,8005ed4 <_malloc_r+0x724>
 8005b94:	1507c83a 	sub	r3,r2,r20
 8005b98:	a8c7883a 	add	r3,r21,r3
 8005b9c:	18c00054 	ori	r3,r3,1
 8005ba0:	e0800017 	ldw	r2,0(fp)
 8005ba4:	9d000215 	stw	r20,8(r19)
 8005ba8:	a0c00115 	stw	r3,4(r20)
 8005bac:	a887883a 	add	r3,r21,r2
 8005bb0:	e0c00015 	stw	r3,0(fp)
 8005bb4:	84c00e26 	beq	r16,r19,8005bf0 <_malloc_r+0x440>
 8005bb8:	018003c4 	movi	r6,15
 8005bbc:	3580a02e 	bgeu	r6,r22,8005e40 <_malloc_r+0x690>
 8005bc0:	81400117 	ldw	r5,4(r16)
 8005bc4:	013ffe04 	movi	r4,-8
 8005bc8:	b0bffd04 	addi	r2,r22,-12
 8005bcc:	1104703a 	and	r2,r2,r4
 8005bd0:	2900004c 	andi	r4,r5,1
 8005bd4:	1108b03a 	or	r4,r2,r4
 8005bd8:	81000115 	stw	r4,4(r16)
 8005bdc:	01400144 	movi	r5,5
 8005be0:	8089883a 	add	r4,r16,r2
 8005be4:	21400115 	stw	r5,4(r4)
 8005be8:	21400215 	stw	r5,8(r4)
 8005bec:	3080c036 	bltu	r6,r2,8005ef0 <_malloc_r+0x740>
 8005bf0:	00820074 	movhi	r2,2049
 8005bf4:	108dff04 	addi	r2,r2,14332
 8005bf8:	11000017 	ldw	r4,0(r2)
 8005bfc:	20c0012e 	bgeu	r4,r3,8005c04 <_malloc_r+0x454>
 8005c00:	10c00015 	stw	r3,0(r2)
 8005c04:	00820074 	movhi	r2,2049
 8005c08:	108dfe04 	addi	r2,r2,14328
 8005c0c:	11000017 	ldw	r4,0(r2)
 8005c10:	9c000217 	ldw	r16,8(r19)
 8005c14:	20c0012e 	bgeu	r4,r3,8005c1c <_malloc_r+0x46c>
 8005c18:	10c00015 	stw	r3,0(r2)
 8005c1c:	80c00117 	ldw	r3,4(r16)
 8005c20:	00bfff04 	movi	r2,-4
 8005c24:	1886703a 	and	r3,r3,r2
 8005c28:	1c45c83a 	sub	r2,r3,r17
 8005c2c:	1c400236 	bltu	r3,r17,8005c38 <_malloc_r+0x488>
 8005c30:	00c003c4 	movi	r3,15
 8005c34:	18800416 	blt	r3,r2,8005c48 <_malloc_r+0x498>
 8005c38:	9009883a 	mov	r4,r18
 8005c3c:	800dad80 	call	800dad8 <__malloc_unlock>
 8005c40:	0005883a 	mov	r2,zero
 8005c44:	003f0706 	br	8005864 <_malloc_r+0xb4>
 8005c48:	88c00054 	ori	r3,r17,1
 8005c4c:	80c00115 	stw	r3,4(r16)
 8005c50:	8463883a 	add	r17,r16,r17
 8005c54:	10800054 	ori	r2,r2,1
 8005c58:	9c400215 	stw	r17,8(r19)
 8005c5c:	88800115 	stw	r2,4(r17)
 8005c60:	9009883a 	mov	r4,r18
 8005c64:	800dad80 	call	800dad8 <__malloc_unlock>
 8005c68:	80800204 	addi	r2,r16,8
 8005c6c:	003efd06 	br	8005864 <_malloc_r+0xb4>
 8005c70:	00800504 	movi	r2,20
 8005c74:	10c0482e 	bgeu	r2,r3,8005d98 <_malloc_r+0x5e8>
 8005c78:	00801504 	movi	r2,84
 8005c7c:	10c06836 	bltu	r2,r3,8005e20 <_malloc_r+0x670>
 8005c80:	8806d33a 	srli	r3,r17,12
 8005c84:	19c01b84 	addi	r7,r3,110
 8005c88:	39cb883a 	add	r5,r7,r7
 8005c8c:	003f0c06 	br	80058c0 <_malloc_r+0x110>
 8005c90:	3804d27a 	srli	r2,r7,9
 8005c94:	01000104 	movi	r4,4
 8005c98:	2080422e 	bgeu	r4,r2,8005da4 <_malloc_r+0x5f4>
 8005c9c:	01000504 	movi	r4,20
 8005ca0:	20807c36 	bltu	r4,r2,8005e94 <_malloc_r+0x6e4>
 8005ca4:	110016c4 	addi	r4,r2,91
 8005ca8:	210b883a 	add	r5,r4,r4
 8005cac:	294b883a 	add	r5,r5,r5
 8005cb0:	294b883a 	add	r5,r5,r5
 8005cb4:	994b883a 	add	r5,r19,r5
 8005cb8:	28800217 	ldw	r2,8(r5)
 8005cbc:	02020074 	movhi	r8,2049
 8005cc0:	4201ac04 	addi	r8,r8,1712
 8005cc4:	11406326 	beq	r2,r5,8005e54 <_malloc_r+0x6a4>
 8005cc8:	01bfff04 	movi	r6,-4
 8005ccc:	11000117 	ldw	r4,4(r2)
 8005cd0:	2188703a 	and	r4,r4,r6
 8005cd4:	3900022e 	bgeu	r7,r4,8005ce0 <_malloc_r+0x530>
 8005cd8:	10800217 	ldw	r2,8(r2)
 8005cdc:	28bffb1e 	bne	r5,r2,8005ccc <_malloc_r+0x51c>
 8005ce0:	11800317 	ldw	r6,12(r2)
 8005ce4:	99000117 	ldw	r4,4(r19)
 8005ce8:	81800315 	stw	r6,12(r16)
 8005cec:	80800215 	stw	r2,8(r16)
 8005cf0:	34000215 	stw	r16,8(r6)
 8005cf4:	14000315 	stw	r16,12(r2)
 8005cf8:	003f2706 	br	8005998 <_malloc_r+0x1e8>
 8005cfc:	88c00054 	ori	r3,r17,1
 8005d00:	80c00115 	stw	r3,4(r16)
 8005d04:	8463883a 	add	r17,r16,r17
 8005d08:	34400515 	stw	r17,20(r6)
 8005d0c:	34400415 	stw	r17,16(r6)
 8005d10:	10c00054 	ori	r3,r2,1
 8005d14:	8a400315 	stw	r9,12(r17)
 8005d18:	8a400215 	stw	r9,8(r17)
 8005d1c:	88c00115 	stw	r3,4(r17)
 8005d20:	88a3883a 	add	r17,r17,r2
 8005d24:	88800015 	stw	r2,0(r17)
 8005d28:	9009883a 	mov	r4,r18
 8005d2c:	800dad80 	call	800dad8 <__malloc_unlock>
 8005d30:	80800204 	addi	r2,r16,8
 8005d34:	003ecb06 	br	8005864 <_malloc_r+0xb4>
 8005d38:	31000117 	ldw	r4,4(r6)
 8005d3c:	003f1606 	br	8005998 <_malloc_r+0x1e8>
 8005d40:	63000044 	addi	r12,r12,1
 8005d44:	608000cc 	andi	r2,r12,3
 8005d48:	5ac00204 	addi	r11,r11,8
 8005d4c:	103f2a1e 	bne	r2,zero,80059f8 <_malloc_r+0x248>
 8005d50:	00002106 	br	8005dd8 <_malloc_r+0x628>
 8005d54:	80800204 	addi	r2,r16,8
 8005d58:	84000517 	ldw	r16,20(r16)
 8005d5c:	143eb31e 	bne	r2,r16,800582c <_malloc_r+0x7c>
 8005d60:	18c00084 	addi	r3,r3,2
 8005d64:	003eec06 	br	8005918 <_malloc_r+0x168>
 8005d68:	8085883a 	add	r2,r16,r2
 8005d6c:	10c00117 	ldw	r3,4(r2)
 8005d70:	81000317 	ldw	r4,12(r16)
 8005d74:	81400217 	ldw	r5,8(r16)
 8005d78:	18c00054 	ori	r3,r3,1
 8005d7c:	10c00115 	stw	r3,4(r2)
 8005d80:	29000315 	stw	r4,12(r5)
 8005d84:	21400215 	stw	r5,8(r4)
 8005d88:	9009883a 	mov	r4,r18
 8005d8c:	800dad80 	call	800dad8 <__malloc_unlock>
 8005d90:	80800204 	addi	r2,r16,8
 8005d94:	003eb306 	br	8005864 <_malloc_r+0xb4>
 8005d98:	19c016c4 	addi	r7,r3,91
 8005d9c:	39cb883a 	add	r5,r7,r7
 8005da0:	003ec706 	br	80058c0 <_malloc_r+0x110>
 8005da4:	3804d1ba 	srli	r2,r7,6
 8005da8:	11000e04 	addi	r4,r2,56
 8005dac:	210b883a 	add	r5,r4,r4
 8005db0:	003fbe06 	br	8005cac <_malloc_r+0x4fc>
 8005db4:	84ff5d26 	beq	r16,r19,8005b2c <_malloc_r+0x37c>
 8005db8:	9c000217 	ldw	r16,8(r19)
 8005dbc:	00bfff04 	movi	r2,-4
 8005dc0:	80c00117 	ldw	r3,4(r16)
 8005dc4:	1886703a 	and	r3,r3,r2
 8005dc8:	003f9706 	br	8005c28 <_malloc_r+0x478>
 8005dcc:	52800017 	ldw	r10,0(r10)
 8005dd0:	18ffffc4 	addi	r3,r3,-1
 8005dd4:	50805c1e 	bne	r10,r2,8005f48 <_malloc_r+0x798>
 8005dd8:	190000cc 	andi	r4,r3,3
 8005ddc:	50bffe04 	addi	r2,r10,-8
 8005de0:	203ffa1e 	bne	r4,zero,8005dcc <_malloc_r+0x61c>
 8005de4:	98800117 	ldw	r2,4(r19)
 8005de8:	0146303a 	nor	r3,zero,r5
 8005dec:	1884703a 	and	r2,r3,r2
 8005df0:	98800115 	stw	r2,4(r19)
 8005df4:	294b883a 	add	r5,r5,r5
 8005df8:	117f2e36 	bltu	r2,r5,8005ab4 <_malloc_r+0x304>
 8005dfc:	283f2d26 	beq	r5,zero,8005ab4 <_malloc_r+0x304>
 8005e00:	1146703a 	and	r3,r2,r5
 8005e04:	1800521e 	bne	r3,zero,8005f50 <_malloc_r+0x7a0>
 8005e08:	6007883a 	mov	r3,r12
 8005e0c:	294b883a 	add	r5,r5,r5
 8005e10:	1148703a 	and	r4,r2,r5
 8005e14:	18c00104 	addi	r3,r3,4
 8005e18:	203ffc26 	beq	r4,zero,8005e0c <_malloc_r+0x65c>
 8005e1c:	003ef006 	br	80059e0 <_malloc_r+0x230>
 8005e20:	00805504 	movi	r2,340
 8005e24:	10c01336 	bltu	r2,r3,8005e74 <_malloc_r+0x6c4>
 8005e28:	8806d3fa 	srli	r3,r17,15
 8005e2c:	19c01dc4 	addi	r7,r3,119
 8005e30:	39cb883a 	add	r5,r7,r7
 8005e34:	003ea206 	br	80058c0 <_malloc_r+0x110>
 8005e38:	00c40004 	movi	r3,4096
 8005e3c:	003f4d06 	br	8005b74 <_malloc_r+0x3c4>
 8005e40:	00800044 	movi	r2,1
 8005e44:	a0800115 	stw	r2,4(r20)
 8005e48:	a021883a 	mov	r16,r20
 8005e4c:	0007883a 	mov	r3,zero
 8005e50:	003f7506 	br	8005c28 <_malloc_r+0x478>
 8005e54:	200bd0ba 	srai	r5,r4,2
 8005e58:	01800044 	movi	r6,1
 8005e5c:	41000117 	ldw	r4,4(r8)
 8005e60:	314a983a 	sll	r5,r6,r5
 8005e64:	100d883a 	mov	r6,r2
 8005e68:	2908b03a 	or	r4,r5,r4
 8005e6c:	41000115 	stw	r4,4(r8)
 8005e70:	003f9d06 	br	8005ce8 <_malloc_r+0x538>
 8005e74:	00815504 	movi	r2,1364
 8005e78:	10c01336 	bltu	r2,r3,8005ec8 <_malloc_r+0x718>
 8005e7c:	8806d4ba 	srli	r3,r17,18
 8005e80:	19c01f04 	addi	r7,r3,124
 8005e84:	39cb883a 	add	r5,r7,r7
 8005e88:	003e8d06 	br	80058c0 <_malloc_r+0x110>
 8005e8c:	ad400404 	addi	r21,r21,16
 8005e90:	003f1d06 	br	8005b08 <_malloc_r+0x358>
 8005e94:	01001504 	movi	r4,84
 8005e98:	20801c36 	bltu	r4,r2,8005f0c <_malloc_r+0x75c>
 8005e9c:	3804d33a 	srli	r2,r7,12
 8005ea0:	11001b84 	addi	r4,r2,110
 8005ea4:	210b883a 	add	r5,r4,r4
 8005ea8:	003f8006 	br	8005cac <_malloc_r+0x4fc>
 8005eac:	3083ffcc 	andi	r2,r6,4095
 8005eb0:	103f241e 	bne	r2,zero,8005b44 <_malloc_r+0x394>
 8005eb4:	99000217 	ldw	r4,8(r19)
 8005eb8:	ad85883a 	add	r2,r21,r22
 8005ebc:	10800054 	ori	r2,r2,1
 8005ec0:	20800115 	stw	r2,4(r4)
 8005ec4:	003f4a06 	br	8005bf0 <_malloc_r+0x440>
 8005ec8:	01403f04 	movi	r5,252
 8005ecc:	01c01f84 	movi	r7,126
 8005ed0:	003e7b06 	br	80058c0 <_malloc_r+0x110>
 8005ed4:	00c00044 	movi	r3,1
 8005ed8:	002b883a 	mov	r21,zero
 8005edc:	003f3006 	br	8005ba0 <_malloc_r+0x3f0>
 8005ee0:	00820074 	movhi	r2,2049
 8005ee4:	10873304 	addi	r2,r2,7372
 8005ee8:	15000015 	stw	r20,0(r2)
 8005eec:	003f1b06 	br	8005b5c <_malloc_r+0x3ac>
 8005ef0:	9009883a 	mov	r4,r18
 8005ef4:	81400204 	addi	r5,r16,8
 8005ef8:	80050a00 	call	80050a0 <_free_r>
 8005efc:	00820074 	movhi	r2,2049
 8005f00:	108e0a04 	addi	r2,r2,14376
 8005f04:	10c00017 	ldw	r3,0(r2)
 8005f08:	003f3906 	br	8005bf0 <_malloc_r+0x440>
 8005f0c:	01005504 	movi	r4,340
 8005f10:	20800436 	bltu	r4,r2,8005f24 <_malloc_r+0x774>
 8005f14:	3804d3fa 	srli	r2,r7,15
 8005f18:	11001dc4 	addi	r4,r2,119
 8005f1c:	210b883a 	add	r5,r4,r4
 8005f20:	003f6206 	br	8005cac <_malloc_r+0x4fc>
 8005f24:	01015504 	movi	r4,1364
 8005f28:	20800436 	bltu	r4,r2,8005f3c <_malloc_r+0x78c>
 8005f2c:	3804d4ba 	srli	r2,r7,18
 8005f30:	11001f04 	addi	r4,r2,124
 8005f34:	210b883a 	add	r5,r4,r4
 8005f38:	003f5c06 	br	8005cac <_malloc_r+0x4fc>
 8005f3c:	01403f04 	movi	r5,252
 8005f40:	01001f84 	movi	r4,126
 8005f44:	003f5906 	br	8005cac <_malloc_r+0x4fc>
 8005f48:	98800117 	ldw	r2,4(r19)
 8005f4c:	003fa906 	br	8005df4 <_malloc_r+0x644>
 8005f50:	6007883a 	mov	r3,r12
 8005f54:	003ea206 	br	80059e0 <_malloc_r+0x230>

08005f58 <memchr>:
 8005f58:	208000cc 	andi	r2,r4,3
 8005f5c:	280f883a 	mov	r7,r5
 8005f60:	10003526 	beq	r2,zero,8006038 <memchr+0xe0>
 8005f64:	30bfffc4 	addi	r2,r6,-1
 8005f68:	30001b26 	beq	r6,zero,8005fd8 <memchr+0x80>
 8005f6c:	21800003 	ldbu	r6,0(r4)
 8005f70:	28c03fcc 	andi	r3,r5,255
 8005f74:	30c01a26 	beq	r6,r3,8005fe0 <memchr+0x88>
 8005f78:	180d883a 	mov	r6,r3
 8005f7c:	00000406 	br	8005f90 <memchr+0x38>
 8005f80:	10001526 	beq	r2,zero,8005fd8 <memchr+0x80>
 8005f84:	20c00003 	ldbu	r3,0(r4)
 8005f88:	10bfffc4 	addi	r2,r2,-1
 8005f8c:	19801426 	beq	r3,r6,8005fe0 <memchr+0x88>
 8005f90:	21000044 	addi	r4,r4,1
 8005f94:	20c000cc 	andi	r3,r4,3
 8005f98:	183ff91e 	bne	r3,zero,8005f80 <memchr+0x28>
 8005f9c:	024000c4 	movi	r9,3
 8005fa0:	48801136 	bltu	r9,r2,8005fe8 <memchr+0x90>
 8005fa4:	10000c26 	beq	r2,zero,8005fd8 <memchr+0x80>
 8005fa8:	20c00003 	ldbu	r3,0(r4)
 8005fac:	29403fcc 	andi	r5,r5,255
 8005fb0:	19400b26 	beq	r3,r5,8005fe0 <memchr+0x88>
 8005fb4:	20c00044 	addi	r3,r4,1
 8005fb8:	2085883a 	add	r2,r4,r2
 8005fbc:	39803fcc 	andi	r6,r7,255
 8005fc0:	00000306 	br	8005fd0 <memchr+0x78>
 8005fc4:	18c00044 	addi	r3,r3,1
 8005fc8:	197fffc3 	ldbu	r5,-1(r3)
 8005fcc:	29800426 	beq	r5,r6,8005fe0 <memchr+0x88>
 8005fd0:	1809883a 	mov	r4,r3
 8005fd4:	18bffb1e 	bne	r3,r2,8005fc4 <memchr+0x6c>
 8005fd8:	0005883a 	mov	r2,zero
 8005fdc:	f800283a 	ret
 8005fe0:	2005883a 	mov	r2,r4
 8005fe4:	f800283a 	ret
 8005fe8:	28c03fcc 	andi	r3,r5,255
 8005fec:	1810923a 	slli	r8,r3,8
 8005ff0:	02ffbff4 	movhi	r11,65279
 8005ff4:	02a02074 	movhi	r10,32897
 8005ff8:	40c6b03a 	or	r3,r8,r3
 8005ffc:	1810943a 	slli	r8,r3,16
 8006000:	5affbfc4 	addi	r11,r11,-257
 8006004:	52a02004 	addi	r10,r10,-32640
 8006008:	40d0b03a 	or	r8,r8,r3
 800600c:	20c00017 	ldw	r3,0(r4)
 8006010:	40c6f03a 	xor	r3,r8,r3
 8006014:	1acd883a 	add	r6,r3,r11
 8006018:	00c6303a 	nor	r3,zero,r3
 800601c:	30c6703a 	and	r3,r6,r3
 8006020:	1a86703a 	and	r3,r3,r10
 8006024:	183fdf1e 	bne	r3,zero,8005fa4 <memchr+0x4c>
 8006028:	10bfff04 	addi	r2,r2,-4
 800602c:	21000104 	addi	r4,r4,4
 8006030:	48bff636 	bltu	r9,r2,800600c <memchr+0xb4>
 8006034:	003fdb06 	br	8005fa4 <memchr+0x4c>
 8006038:	3005883a 	mov	r2,r6
 800603c:	003fd706 	br	8005f9c <memchr+0x44>

08006040 <memcpy>:
 8006040:	deffff04 	addi	sp,sp,-4
 8006044:	dc000015 	stw	r16,0(sp)
 8006048:	00c003c4 	movi	r3,15
 800604c:	2005883a 	mov	r2,r4
 8006050:	1980432e 	bgeu	r3,r6,8006160 <memcpy+0x120>
 8006054:	2146b03a 	or	r3,r4,r5
 8006058:	18c000cc 	andi	r3,r3,3
 800605c:	1800421e 	bne	r3,zero,8006168 <memcpy+0x128>
 8006060:	343ffc04 	addi	r16,r6,-16
 8006064:	8020d13a 	srli	r16,r16,4
 8006068:	28c00104 	addi	r3,r5,4
 800606c:	23400104 	addi	r13,r4,4
 8006070:	801e913a 	slli	r15,r16,4
 8006074:	2b000204 	addi	r12,r5,8
 8006078:	22c00204 	addi	r11,r4,8
 800607c:	7bc00504 	addi	r15,r15,20
 8006080:	2a800304 	addi	r10,r5,12
 8006084:	22400304 	addi	r9,r4,12
 8006088:	2bdf883a 	add	r15,r5,r15
 800608c:	2811883a 	mov	r8,r5
 8006090:	200f883a 	mov	r7,r4
 8006094:	41000017 	ldw	r4,0(r8)
 8006098:	39c00404 	addi	r7,r7,16
 800609c:	18c00404 	addi	r3,r3,16
 80060a0:	393ffc15 	stw	r4,-16(r7)
 80060a4:	1bbffc17 	ldw	r14,-16(r3)
 80060a8:	6b400404 	addi	r13,r13,16
 80060ac:	5ac00404 	addi	r11,r11,16
 80060b0:	6bbffc15 	stw	r14,-16(r13)
 80060b4:	63800017 	ldw	r14,0(r12)
 80060b8:	4a400404 	addi	r9,r9,16
 80060bc:	42000404 	addi	r8,r8,16
 80060c0:	5bbffc15 	stw	r14,-16(r11)
 80060c4:	53800017 	ldw	r14,0(r10)
 80060c8:	63000404 	addi	r12,r12,16
 80060cc:	52800404 	addi	r10,r10,16
 80060d0:	4bbffc15 	stw	r14,-16(r9)
 80060d4:	1bffef1e 	bne	r3,r15,8006094 <memcpy+0x54>
 80060d8:	81c00044 	addi	r7,r16,1
 80060dc:	380e913a 	slli	r7,r7,4
 80060e0:	310003cc 	andi	r4,r6,15
 80060e4:	02c000c4 	movi	r11,3
 80060e8:	11c7883a 	add	r3,r2,r7
 80060ec:	29cb883a 	add	r5,r5,r7
 80060f0:	59001f2e 	bgeu	r11,r4,8006170 <memcpy+0x130>
 80060f4:	1813883a 	mov	r9,r3
 80060f8:	2811883a 	mov	r8,r5
 80060fc:	200f883a 	mov	r7,r4
 8006100:	42800017 	ldw	r10,0(r8)
 8006104:	4a400104 	addi	r9,r9,4
 8006108:	39ffff04 	addi	r7,r7,-4
 800610c:	4abfff15 	stw	r10,-4(r9)
 8006110:	42000104 	addi	r8,r8,4
 8006114:	59fffa36 	bltu	r11,r7,8006100 <memcpy+0xc0>
 8006118:	213fff04 	addi	r4,r4,-4
 800611c:	2008d0ba 	srli	r4,r4,2
 8006120:	318000cc 	andi	r6,r6,3
 8006124:	21000044 	addi	r4,r4,1
 8006128:	2109883a 	add	r4,r4,r4
 800612c:	2109883a 	add	r4,r4,r4
 8006130:	1907883a 	add	r3,r3,r4
 8006134:	290b883a 	add	r5,r5,r4
 8006138:	30000626 	beq	r6,zero,8006154 <memcpy+0x114>
 800613c:	198d883a 	add	r6,r3,r6
 8006140:	29c00003 	ldbu	r7,0(r5)
 8006144:	18c00044 	addi	r3,r3,1
 8006148:	29400044 	addi	r5,r5,1
 800614c:	19ffffc5 	stb	r7,-1(r3)
 8006150:	19bffb1e 	bne	r3,r6,8006140 <memcpy+0x100>
 8006154:	dc000017 	ldw	r16,0(sp)
 8006158:	dec00104 	addi	sp,sp,4
 800615c:	f800283a 	ret
 8006160:	2007883a 	mov	r3,r4
 8006164:	003ff406 	br	8006138 <memcpy+0xf8>
 8006168:	2007883a 	mov	r3,r4
 800616c:	003ff306 	br	800613c <memcpy+0xfc>
 8006170:	200d883a 	mov	r6,r4
 8006174:	003ff006 	br	8006138 <memcpy+0xf8>

08006178 <memset>:
 8006178:	20c000cc 	andi	r3,r4,3
 800617c:	2005883a 	mov	r2,r4
 8006180:	18004326 	beq	r3,zero,8006290 <memset+0x118>
 8006184:	31ffffc4 	addi	r7,r6,-1
 8006188:	30004026 	beq	r6,zero,800628c <memset+0x114>
 800618c:	2813883a 	mov	r9,r5
 8006190:	200d883a 	mov	r6,r4
 8006194:	2007883a 	mov	r3,r4
 8006198:	00000406 	br	80061ac <memset+0x34>
 800619c:	3a3fffc4 	addi	r8,r7,-1
 80061a0:	31800044 	addi	r6,r6,1
 80061a4:	38003926 	beq	r7,zero,800628c <memset+0x114>
 80061a8:	400f883a 	mov	r7,r8
 80061ac:	18c00044 	addi	r3,r3,1
 80061b0:	32400005 	stb	r9,0(r6)
 80061b4:	1a0000cc 	andi	r8,r3,3
 80061b8:	403ff81e 	bne	r8,zero,800619c <memset+0x24>
 80061bc:	010000c4 	movi	r4,3
 80061c0:	21c02d2e 	bgeu	r4,r7,8006278 <memset+0x100>
 80061c4:	29803fcc 	andi	r6,r5,255
 80061c8:	3008923a 	slli	r4,r6,8
 80061cc:	218cb03a 	or	r6,r4,r6
 80061d0:	3008943a 	slli	r4,r6,16
 80061d4:	218cb03a 	or	r6,r4,r6
 80061d8:	010003c4 	movi	r4,15
 80061dc:	21c0182e 	bgeu	r4,r7,8006240 <memset+0xc8>
 80061e0:	3b3ffc04 	addi	r12,r7,-16
 80061e4:	6018d13a 	srli	r12,r12,4
 80061e8:	1a000104 	addi	r8,r3,4
 80061ec:	1ac00204 	addi	r11,r3,8
 80061f0:	6008913a 	slli	r4,r12,4
 80061f4:	1a800304 	addi	r10,r3,12
 80061f8:	1813883a 	mov	r9,r3
 80061fc:	21000504 	addi	r4,r4,20
 8006200:	1909883a 	add	r4,r3,r4
 8006204:	49800015 	stw	r6,0(r9)
 8006208:	41800015 	stw	r6,0(r8)
 800620c:	59800015 	stw	r6,0(r11)
 8006210:	51800015 	stw	r6,0(r10)
 8006214:	42000404 	addi	r8,r8,16
 8006218:	4a400404 	addi	r9,r9,16
 800621c:	5ac00404 	addi	r11,r11,16
 8006220:	52800404 	addi	r10,r10,16
 8006224:	413ff71e 	bne	r8,r4,8006204 <memset+0x8c>
 8006228:	63000044 	addi	r12,r12,1
 800622c:	6018913a 	slli	r12,r12,4
 8006230:	39c003cc 	andi	r7,r7,15
 8006234:	010000c4 	movi	r4,3
 8006238:	1b07883a 	add	r3,r3,r12
 800623c:	21c00e2e 	bgeu	r4,r7,8006278 <memset+0x100>
 8006240:	1813883a 	mov	r9,r3
 8006244:	3811883a 	mov	r8,r7
 8006248:	010000c4 	movi	r4,3
 800624c:	49800015 	stw	r6,0(r9)
 8006250:	423fff04 	addi	r8,r8,-4
 8006254:	4a400104 	addi	r9,r9,4
 8006258:	223ffc36 	bltu	r4,r8,800624c <memset+0xd4>
 800625c:	393fff04 	addi	r4,r7,-4
 8006260:	2008d0ba 	srli	r4,r4,2
 8006264:	39c000cc 	andi	r7,r7,3
 8006268:	21000044 	addi	r4,r4,1
 800626c:	2109883a 	add	r4,r4,r4
 8006270:	2109883a 	add	r4,r4,r4
 8006274:	1907883a 	add	r3,r3,r4
 8006278:	38000426 	beq	r7,zero,800628c <memset+0x114>
 800627c:	19cf883a 	add	r7,r3,r7
 8006280:	19400005 	stb	r5,0(r3)
 8006284:	18c00044 	addi	r3,r3,1
 8006288:	19fffd1e 	bne	r3,r7,8006280 <memset+0x108>
 800628c:	f800283a 	ret
 8006290:	2007883a 	mov	r3,r4
 8006294:	300f883a 	mov	r7,r6
 8006298:	003fc806 	br	80061bc <memset+0x44>

0800629c <_Balloc>:
 800629c:	20801317 	ldw	r2,76(r4)
 80062a0:	defffc04 	addi	sp,sp,-16
 80062a4:	dc400115 	stw	r17,4(sp)
 80062a8:	dc000015 	stw	r16,0(sp)
 80062ac:	dfc00315 	stw	ra,12(sp)
 80062b0:	dc800215 	stw	r18,8(sp)
 80062b4:	2023883a 	mov	r17,r4
 80062b8:	2821883a 	mov	r16,r5
 80062bc:	10000f26 	beq	r2,zero,80062fc <_Balloc+0x60>
 80062c0:	8407883a 	add	r3,r16,r16
 80062c4:	18c7883a 	add	r3,r3,r3
 80062c8:	10c7883a 	add	r3,r2,r3
 80062cc:	18800017 	ldw	r2,0(r3)
 80062d0:	10001126 	beq	r2,zero,8006318 <_Balloc+0x7c>
 80062d4:	11000017 	ldw	r4,0(r2)
 80062d8:	19000015 	stw	r4,0(r3)
 80062dc:	10000415 	stw	zero,16(r2)
 80062e0:	10000315 	stw	zero,12(r2)
 80062e4:	dfc00317 	ldw	ra,12(sp)
 80062e8:	dc800217 	ldw	r18,8(sp)
 80062ec:	dc400117 	ldw	r17,4(sp)
 80062f0:	dc000017 	ldw	r16,0(sp)
 80062f4:	dec00404 	addi	sp,sp,16
 80062f8:	f800283a 	ret
 80062fc:	01400104 	movi	r5,4
 8006300:	01800844 	movi	r6,33
 8006304:	8008bcc0 	call	8008bcc <_calloc_r>
 8006308:	88801315 	stw	r2,76(r17)
 800630c:	103fec1e 	bne	r2,zero,80062c0 <_Balloc+0x24>
 8006310:	0005883a 	mov	r2,zero
 8006314:	003ff306 	br	80062e4 <_Balloc+0x48>
 8006318:	01400044 	movi	r5,1
 800631c:	2c24983a 	sll	r18,r5,r16
 8006320:	8809883a 	mov	r4,r17
 8006324:	91800144 	addi	r6,r18,5
 8006328:	318d883a 	add	r6,r6,r6
 800632c:	318d883a 	add	r6,r6,r6
 8006330:	8008bcc0 	call	8008bcc <_calloc_r>
 8006334:	103ff626 	beq	r2,zero,8006310 <_Balloc+0x74>
 8006338:	14000115 	stw	r16,4(r2)
 800633c:	14800215 	stw	r18,8(r2)
 8006340:	003fe606 	br	80062dc <_Balloc+0x40>

08006344 <_Bfree>:
 8006344:	28000826 	beq	r5,zero,8006368 <_Bfree+0x24>
 8006348:	28c00117 	ldw	r3,4(r5)
 800634c:	20801317 	ldw	r2,76(r4)
 8006350:	18c7883a 	add	r3,r3,r3
 8006354:	18c7883a 	add	r3,r3,r3
 8006358:	10c5883a 	add	r2,r2,r3
 800635c:	10c00017 	ldw	r3,0(r2)
 8006360:	28c00015 	stw	r3,0(r5)
 8006364:	11400015 	stw	r5,0(r2)
 8006368:	f800283a 	ret

0800636c <__multadd>:
 800636c:	defff704 	addi	sp,sp,-36
 8006370:	dc800215 	stw	r18,8(sp)
 8006374:	2c800417 	ldw	r18,16(r5)
 8006378:	ddc00715 	stw	r23,28(sp)
 800637c:	dd800615 	stw	r22,24(sp)
 8006380:	dd000415 	stw	r20,16(sp)
 8006384:	dcc00315 	stw	r19,12(sp)
 8006388:	dc400115 	stw	r17,4(sp)
 800638c:	dc000015 	stw	r16,0(sp)
 8006390:	dfc00815 	stw	ra,32(sp)
 8006394:	dd400515 	stw	r21,20(sp)
 8006398:	2827883a 	mov	r19,r5
 800639c:	2029883a 	mov	r20,r4
 80063a0:	3023883a 	mov	r17,r6
 80063a4:	3821883a 	mov	r16,r7
 80063a8:	2d800504 	addi	r22,r5,20
 80063ac:	002f883a 	mov	r23,zero
 80063b0:	b5400017 	ldw	r21,0(r22)
 80063b4:	880b883a 	mov	r5,r17
 80063b8:	bdc00044 	addi	r23,r23,1
 80063bc:	a93fffcc 	andi	r4,r21,65535
 80063c0:	80005f80 	call	80005f8 <__mulsi3>
 80063c4:	1421883a 	add	r16,r2,r16
 80063c8:	a808d43a 	srli	r4,r21,16
 80063cc:	802ad43a 	srli	r21,r16,16
 80063d0:	880b883a 	mov	r5,r17
 80063d4:	80005f80 	call	80005f8 <__mulsi3>
 80063d8:	a88f883a 	add	r7,r21,r2
 80063dc:	3804943a 	slli	r2,r7,16
 80063e0:	80ffffcc 	andi	r3,r16,65535
 80063e4:	b5800104 	addi	r22,r22,4
 80063e8:	10c7883a 	add	r3,r2,r3
 80063ec:	b0ffff15 	stw	r3,-4(r22)
 80063f0:	3820d43a 	srli	r16,r7,16
 80063f4:	bcbfee16 	blt	r23,r18,80063b0 <__multadd+0x44>
 80063f8:	80000926 	beq	r16,zero,8006420 <__multadd+0xb4>
 80063fc:	98800217 	ldw	r2,8(r19)
 8006400:	9080130e 	bge	r18,r2,8006450 <__multadd+0xe4>
 8006404:	90800144 	addi	r2,r18,5
 8006408:	1085883a 	add	r2,r2,r2
 800640c:	1085883a 	add	r2,r2,r2
 8006410:	9885883a 	add	r2,r19,r2
 8006414:	14000015 	stw	r16,0(r2)
 8006418:	94800044 	addi	r18,r18,1
 800641c:	9c800415 	stw	r18,16(r19)
 8006420:	9805883a 	mov	r2,r19
 8006424:	dfc00817 	ldw	ra,32(sp)
 8006428:	ddc00717 	ldw	r23,28(sp)
 800642c:	dd800617 	ldw	r22,24(sp)
 8006430:	dd400517 	ldw	r21,20(sp)
 8006434:	dd000417 	ldw	r20,16(sp)
 8006438:	dcc00317 	ldw	r19,12(sp)
 800643c:	dc800217 	ldw	r18,8(sp)
 8006440:	dc400117 	ldw	r17,4(sp)
 8006444:	dc000017 	ldw	r16,0(sp)
 8006448:	dec00904 	addi	sp,sp,36
 800644c:	f800283a 	ret
 8006450:	99400117 	ldw	r5,4(r19)
 8006454:	a009883a 	mov	r4,r20
 8006458:	29400044 	addi	r5,r5,1
 800645c:	800629c0 	call	800629c <_Balloc>
 8006460:	99800417 	ldw	r6,16(r19)
 8006464:	11000304 	addi	r4,r2,12
 8006468:	99400304 	addi	r5,r19,12
 800646c:	31800084 	addi	r6,r6,2
 8006470:	318d883a 	add	r6,r6,r6
 8006474:	318d883a 	add	r6,r6,r6
 8006478:	1023883a 	mov	r17,r2
 800647c:	80060400 	call	8006040 <memcpy>
 8006480:	98000a26 	beq	r19,zero,80064ac <__multadd+0x140>
 8006484:	99000117 	ldw	r4,4(r19)
 8006488:	a0c01317 	ldw	r3,76(r20)
 800648c:	2109883a 	add	r4,r4,r4
 8006490:	2109883a 	add	r4,r4,r4
 8006494:	1907883a 	add	r3,r3,r4
 8006498:	18800017 	ldw	r2,0(r3)
 800649c:	98800015 	stw	r2,0(r19)
 80064a0:	1cc00015 	stw	r19,0(r3)
 80064a4:	8827883a 	mov	r19,r17
 80064a8:	003fd606 	br	8006404 <__multadd+0x98>
 80064ac:	8827883a 	mov	r19,r17
 80064b0:	003fd406 	br	8006404 <__multadd+0x98>

080064b4 <__s2b>:
 80064b4:	defff904 	addi	sp,sp,-28
 80064b8:	dc400115 	stw	r17,4(sp)
 80064bc:	dc000015 	stw	r16,0(sp)
 80064c0:	2023883a 	mov	r17,r4
 80064c4:	2821883a 	mov	r16,r5
 80064c8:	39000204 	addi	r4,r7,8
 80064cc:	01400244 	movi	r5,9
 80064d0:	dcc00315 	stw	r19,12(sp)
 80064d4:	dc800215 	stw	r18,8(sp)
 80064d8:	dfc00615 	stw	ra,24(sp)
 80064dc:	dd400515 	stw	r21,20(sp)
 80064e0:	dd000415 	stw	r20,16(sp)
 80064e4:	3825883a 	mov	r18,r7
 80064e8:	3027883a 	mov	r19,r6
 80064ec:	800ac800 	call	800ac80 <__divsi3>
 80064f0:	00c00044 	movi	r3,1
 80064f4:	000b883a 	mov	r5,zero
 80064f8:	1880030e 	bge	r3,r2,8006508 <__s2b+0x54>
 80064fc:	18c7883a 	add	r3,r3,r3
 8006500:	29400044 	addi	r5,r5,1
 8006504:	18bffd16 	blt	r3,r2,80064fc <__s2b+0x48>
 8006508:	8809883a 	mov	r4,r17
 800650c:	800629c0 	call	800629c <_Balloc>
 8006510:	d8c00717 	ldw	r3,28(sp)
 8006514:	10c00515 	stw	r3,20(r2)
 8006518:	00c00044 	movi	r3,1
 800651c:	10c00415 	stw	r3,16(r2)
 8006520:	00c00244 	movi	r3,9
 8006524:	1cc0210e 	bge	r3,r19,80065ac <__s2b+0xf8>
 8006528:	80eb883a 	add	r21,r16,r3
 800652c:	a829883a 	mov	r20,r21
 8006530:	84e1883a 	add	r16,r16,r19
 8006534:	a1c00007 	ldb	r7,0(r20)
 8006538:	8809883a 	mov	r4,r17
 800653c:	a5000044 	addi	r20,r20,1
 8006540:	100b883a 	mov	r5,r2
 8006544:	01800284 	movi	r6,10
 8006548:	39fff404 	addi	r7,r7,-48
 800654c:	800636c0 	call	800636c <__multadd>
 8006550:	a43ff81e 	bne	r20,r16,8006534 <__s2b+0x80>
 8006554:	ace1883a 	add	r16,r21,r19
 8006558:	843ffe04 	addi	r16,r16,-8
 800655c:	9c800a0e 	bge	r19,r18,8006588 <__s2b+0xd4>
 8006560:	94e5c83a 	sub	r18,r18,r19
 8006564:	84a5883a 	add	r18,r16,r18
 8006568:	81c00007 	ldb	r7,0(r16)
 800656c:	8809883a 	mov	r4,r17
 8006570:	84000044 	addi	r16,r16,1
 8006574:	100b883a 	mov	r5,r2
 8006578:	01800284 	movi	r6,10
 800657c:	39fff404 	addi	r7,r7,-48
 8006580:	800636c0 	call	800636c <__multadd>
 8006584:	84bff81e 	bne	r16,r18,8006568 <__s2b+0xb4>
 8006588:	dfc00617 	ldw	ra,24(sp)
 800658c:	dd400517 	ldw	r21,20(sp)
 8006590:	dd000417 	ldw	r20,16(sp)
 8006594:	dcc00317 	ldw	r19,12(sp)
 8006598:	dc800217 	ldw	r18,8(sp)
 800659c:	dc400117 	ldw	r17,4(sp)
 80065a0:	dc000017 	ldw	r16,0(sp)
 80065a4:	dec00704 	addi	sp,sp,28
 80065a8:	f800283a 	ret
 80065ac:	84000284 	addi	r16,r16,10
 80065b0:	1827883a 	mov	r19,r3
 80065b4:	003fe906 	br	800655c <__s2b+0xa8>

080065b8 <__hi0bits>:
 80065b8:	20bfffec 	andhi	r2,r4,65535
 80065bc:	1000141e 	bne	r2,zero,8006610 <__hi0bits+0x58>
 80065c0:	2008943a 	slli	r4,r4,16
 80065c4:	00800404 	movi	r2,16
 80065c8:	20ffc02c 	andhi	r3,r4,65280
 80065cc:	1800021e 	bne	r3,zero,80065d8 <__hi0bits+0x20>
 80065d0:	2008923a 	slli	r4,r4,8
 80065d4:	10800204 	addi	r2,r2,8
 80065d8:	20fc002c 	andhi	r3,r4,61440
 80065dc:	1800021e 	bne	r3,zero,80065e8 <__hi0bits+0x30>
 80065e0:	2008913a 	slli	r4,r4,4
 80065e4:	10800104 	addi	r2,r2,4
 80065e8:	20f0002c 	andhi	r3,r4,49152
 80065ec:	1800031e 	bne	r3,zero,80065fc <__hi0bits+0x44>
 80065f0:	2109883a 	add	r4,r4,r4
 80065f4:	10800084 	addi	r2,r2,2
 80065f8:	2109883a 	add	r4,r4,r4
 80065fc:	20000316 	blt	r4,zero,800660c <__hi0bits+0x54>
 8006600:	2110002c 	andhi	r4,r4,16384
 8006604:	2000041e 	bne	r4,zero,8006618 <__hi0bits+0x60>
 8006608:	00800804 	movi	r2,32
 800660c:	f800283a 	ret
 8006610:	0005883a 	mov	r2,zero
 8006614:	003fec06 	br	80065c8 <__hi0bits+0x10>
 8006618:	10800044 	addi	r2,r2,1
 800661c:	f800283a 	ret

08006620 <__lo0bits>:
 8006620:	20c00017 	ldw	r3,0(r4)
 8006624:	188001cc 	andi	r2,r3,7
 8006628:	10000826 	beq	r2,zero,800664c <__lo0bits+0x2c>
 800662c:	1880004c 	andi	r2,r3,1
 8006630:	1000211e 	bne	r2,zero,80066b8 <__lo0bits+0x98>
 8006634:	1880008c 	andi	r2,r3,2
 8006638:	1000211e 	bne	r2,zero,80066c0 <__lo0bits+0xa0>
 800663c:	1806d0ba 	srli	r3,r3,2
 8006640:	00800084 	movi	r2,2
 8006644:	20c00015 	stw	r3,0(r4)
 8006648:	f800283a 	ret
 800664c:	18bfffcc 	andi	r2,r3,65535
 8006650:	10001326 	beq	r2,zero,80066a0 <__lo0bits+0x80>
 8006654:	0005883a 	mov	r2,zero
 8006658:	19403fcc 	andi	r5,r3,255
 800665c:	2800021e 	bne	r5,zero,8006668 <__lo0bits+0x48>
 8006660:	1806d23a 	srli	r3,r3,8
 8006664:	10800204 	addi	r2,r2,8
 8006668:	194003cc 	andi	r5,r3,15
 800666c:	2800021e 	bne	r5,zero,8006678 <__lo0bits+0x58>
 8006670:	1806d13a 	srli	r3,r3,4
 8006674:	10800104 	addi	r2,r2,4
 8006678:	194000cc 	andi	r5,r3,3
 800667c:	2800021e 	bne	r5,zero,8006688 <__lo0bits+0x68>
 8006680:	1806d0ba 	srli	r3,r3,2
 8006684:	10800084 	addi	r2,r2,2
 8006688:	1940004c 	andi	r5,r3,1
 800668c:	2800081e 	bne	r5,zero,80066b0 <__lo0bits+0x90>
 8006690:	1806d07a 	srli	r3,r3,1
 8006694:	1800051e 	bne	r3,zero,80066ac <__lo0bits+0x8c>
 8006698:	00800804 	movi	r2,32
 800669c:	f800283a 	ret
 80066a0:	1806d43a 	srli	r3,r3,16
 80066a4:	00800404 	movi	r2,16
 80066a8:	003feb06 	br	8006658 <__lo0bits+0x38>
 80066ac:	10800044 	addi	r2,r2,1
 80066b0:	20c00015 	stw	r3,0(r4)
 80066b4:	f800283a 	ret
 80066b8:	0005883a 	mov	r2,zero
 80066bc:	f800283a 	ret
 80066c0:	1806d07a 	srli	r3,r3,1
 80066c4:	00800044 	movi	r2,1
 80066c8:	20c00015 	stw	r3,0(r4)
 80066cc:	f800283a 	ret

080066d0 <__i2b>:
 80066d0:	defffd04 	addi	sp,sp,-12
 80066d4:	dc000015 	stw	r16,0(sp)
 80066d8:	04000044 	movi	r16,1
 80066dc:	dc400115 	stw	r17,4(sp)
 80066e0:	2823883a 	mov	r17,r5
 80066e4:	800b883a 	mov	r5,r16
 80066e8:	dfc00215 	stw	ra,8(sp)
 80066ec:	800629c0 	call	800629c <_Balloc>
 80066f0:	14400515 	stw	r17,20(r2)
 80066f4:	14000415 	stw	r16,16(r2)
 80066f8:	dfc00217 	ldw	ra,8(sp)
 80066fc:	dc400117 	ldw	r17,4(sp)
 8006700:	dc000017 	ldw	r16,0(sp)
 8006704:	dec00304 	addi	sp,sp,12
 8006708:	f800283a 	ret

0800670c <__multiply>:
 800670c:	deffef04 	addi	sp,sp,-68
 8006710:	dc400815 	stw	r17,32(sp)
 8006714:	dc000715 	stw	r16,28(sp)
 8006718:	2c400417 	ldw	r17,16(r5)
 800671c:	34000417 	ldw	r16,16(r6)
 8006720:	dd800d15 	stw	r22,52(sp)
 8006724:	dc800915 	stw	r18,36(sp)
 8006728:	dfc01015 	stw	ra,64(sp)
 800672c:	df000f15 	stw	fp,60(sp)
 8006730:	ddc00e15 	stw	r23,56(sp)
 8006734:	dd400c15 	stw	r21,48(sp)
 8006738:	dd000b15 	stw	r20,44(sp)
 800673c:	dcc00a15 	stw	r19,40(sp)
 8006740:	2825883a 	mov	r18,r5
 8006744:	302d883a 	mov	r22,r6
 8006748:	8c009116 	blt	r17,r16,8006990 <__multiply+0x284>
 800674c:	8005883a 	mov	r2,r16
 8006750:	8821883a 	mov	r16,r17
 8006754:	1023883a 	mov	r17,r2
 8006758:	90800217 	ldw	r2,8(r18)
 800675c:	8447883a 	add	r3,r16,r17
 8006760:	d8c00215 	stw	r3,8(sp)
 8006764:	91400117 	ldw	r5,4(r18)
 8006768:	10c0010e 	bge	r2,r3,8006770 <__multiply+0x64>
 800676c:	29400044 	addi	r5,r5,1
 8006770:	800629c0 	call	800629c <_Balloc>
 8006774:	d8c00217 	ldw	r3,8(sp)
 8006778:	d8800615 	stw	r2,24(sp)
 800677c:	18eb883a 	add	r21,r3,r3
 8006780:	ad6b883a 	add	r21,r21,r21
 8006784:	10c00504 	addi	r3,r2,20
 8006788:	1d6b883a 	add	r21,r3,r21
 800678c:	d8c00115 	stw	r3,4(sp)
 8006790:	dd400315 	stw	r21,12(sp)
 8006794:	1805883a 	mov	r2,r3
 8006798:	1d40042e 	bgeu	r3,r21,80067ac <__multiply+0xa0>
 800679c:	d8c00317 	ldw	r3,12(sp)
 80067a0:	10000015 	stw	zero,0(r2)
 80067a4:	10800104 	addi	r2,r2,4
 80067a8:	10fffc36 	bltu	r2,r3,800679c <__multiply+0x90>
 80067ac:	8c63883a 	add	r17,r17,r17
 80067b0:	b5800504 	addi	r22,r22,20
 80067b4:	8c63883a 	add	r17,r17,r17
 80067b8:	94800504 	addi	r18,r18,20
 80067bc:	8421883a 	add	r16,r16,r16
 80067c0:	b463883a 	add	r17,r22,r17
 80067c4:	8421883a 	add	r16,r16,r16
 80067c8:	dd800015 	stw	r22,0(sp)
 80067cc:	dc800415 	stw	r18,16(sp)
 80067d0:	dc400515 	stw	r17,20(sp)
 80067d4:	9429883a 	add	r20,r18,r16
 80067d8:	b4404f2e 	bgeu	r22,r17,8006918 <__multiply+0x20c>
 80067dc:	d8c00017 	ldw	r3,0(sp)
 80067e0:	1c800017 	ldw	r18,0(r3)
 80067e4:	943fffcc 	andi	r16,r18,65535
 80067e8:	80001e26 	beq	r16,zero,8006864 <__multiply+0x158>
 80067ec:	dd800117 	ldw	r22,4(sp)
 80067f0:	dd400417 	ldw	r21,16(sp)
 80067f4:	0025883a 	mov	r18,zero
 80067f8:	adc00017 	ldw	r23,0(r21)
 80067fc:	b4c00017 	ldw	r19,0(r22)
 8006800:	800b883a 	mov	r5,r16
 8006804:	b93fffcc 	andi	r4,r23,65535
 8006808:	80005f80 	call	80005f8 <__mulsi3>
 800680c:	9c7fffcc 	andi	r17,r19,65535
 8006810:	8885883a 	add	r2,r17,r2
 8006814:	b808d43a 	srli	r4,r23,16
 8006818:	14a3883a 	add	r17,r2,r18
 800681c:	9826d43a 	srli	r19,r19,16
 8006820:	8824d43a 	srli	r18,r17,16
 8006824:	800b883a 	mov	r5,r16
 8006828:	80005f80 	call	80005f8 <__mulsi3>
 800682c:	9885883a 	add	r2,r19,r2
 8006830:	14a7883a 	add	r19,r2,r18
 8006834:	88ffffcc 	andi	r3,r17,65535
 8006838:	9822943a 	slli	r17,r19,16
 800683c:	ad400104 	addi	r21,r21,4
 8006840:	b005883a 	mov	r2,r22
 8006844:	88c6b03a 	or	r3,r17,r3
 8006848:	b0c00015 	stw	r3,0(r22)
 800684c:	9824d43a 	srli	r18,r19,16
 8006850:	b5800104 	addi	r22,r22,4
 8006854:	ad3fe836 	bltu	r21,r20,80067f8 <__multiply+0xec>
 8006858:	d8c00017 	ldw	r3,0(sp)
 800685c:	14800115 	stw	r18,4(r2)
 8006860:	1c800017 	ldw	r18,0(r3)
 8006864:	9024d43a 	srli	r18,r18,16
 8006868:	90002226 	beq	r18,zero,80068f4 <__multiply+0x1e8>
 800686c:	d8c00117 	ldw	r3,4(sp)
 8006870:	dd800417 	ldw	r22,16(sp)
 8006874:	002f883a 	mov	r23,zero
 8006878:	1f000017 	ldw	fp,0(r3)
 800687c:	1823883a 	mov	r17,r3
 8006880:	182b883a 	mov	r21,r3
 8006884:	e021883a 	mov	r16,fp
 8006888:	00000106 	br	8006890 <__multiply+0x184>
 800688c:	982b883a 	mov	r21,r19
 8006890:	b100000b 	ldhu	r4,0(r22)
 8006894:	8020d43a 	srli	r16,r16,16
 8006898:	900b883a 	mov	r5,r18
 800689c:	80005f80 	call	80005f8 <__mulsi3>
 80068a0:	1405883a 	add	r2,r2,r16
 80068a4:	15ef883a 	add	r23,r2,r23
 80068a8:	b804943a 	slli	r2,r23,16
 80068ac:	e0ffffcc 	andi	r3,fp,65535
 80068b0:	8c400104 	addi	r17,r17,4
 80068b4:	10c6b03a 	or	r3,r2,r3
 80068b8:	88ffff15 	stw	r3,-4(r17)
 80068bc:	b5800104 	addi	r22,r22,4
 80068c0:	b13fff17 	ldw	r4,-4(r22)
 80068c4:	acc00104 	addi	r19,r21,4
 80068c8:	900b883a 	mov	r5,r18
 80068cc:	2008d43a 	srli	r4,r4,16
 80068d0:	9c000017 	ldw	r16,0(r19)
 80068d4:	80005f80 	call	80005f8 <__mulsi3>
 80068d8:	b806d43a 	srli	r3,r23,16
 80068dc:	813fffcc 	andi	r4,r16,65535
 80068e0:	1105883a 	add	r2,r2,r4
 80068e4:	10f9883a 	add	fp,r2,r3
 80068e8:	e02ed43a 	srli	r23,fp,16
 80068ec:	b53fe736 	bltu	r22,r20,800688c <__multiply+0x180>
 80068f0:	af000115 	stw	fp,4(r21)
 80068f4:	d8c00017 	ldw	r3,0(sp)
 80068f8:	d9000517 	ldw	r4,20(sp)
 80068fc:	18c00104 	addi	r3,r3,4
 8006900:	d8c00015 	stw	r3,0(sp)
 8006904:	d8c00117 	ldw	r3,4(sp)
 8006908:	18c00104 	addi	r3,r3,4
 800690c:	d8c00115 	stw	r3,4(sp)
 8006910:	d8c00017 	ldw	r3,0(sp)
 8006914:	193fb136 	bltu	r3,r4,80067dc <__multiply+0xd0>
 8006918:	d8c00217 	ldw	r3,8(sp)
 800691c:	00c00c0e 	bge	zero,r3,8006950 <__multiply+0x244>
 8006920:	d8c00317 	ldw	r3,12(sp)
 8006924:	18bfff17 	ldw	r2,-4(r3)
 8006928:	1d7fff04 	addi	r21,r3,-4
 800692c:	10000326 	beq	r2,zero,800693c <__multiply+0x230>
 8006930:	00000706 	br	8006950 <__multiply+0x244>
 8006934:	a8800017 	ldw	r2,0(r21)
 8006938:	1000051e 	bne	r2,zero,8006950 <__multiply+0x244>
 800693c:	d8c00217 	ldw	r3,8(sp)
 8006940:	ad7fff04 	addi	r21,r21,-4
 8006944:	18ffffc4 	addi	r3,r3,-1
 8006948:	d8c00215 	stw	r3,8(sp)
 800694c:	183ff91e 	bne	r3,zero,8006934 <__multiply+0x228>
 8006950:	d8c00617 	ldw	r3,24(sp)
 8006954:	d9000217 	ldw	r4,8(sp)
 8006958:	1805883a 	mov	r2,r3
 800695c:	19000415 	stw	r4,16(r3)
 8006960:	dfc01017 	ldw	ra,64(sp)
 8006964:	df000f17 	ldw	fp,60(sp)
 8006968:	ddc00e17 	ldw	r23,56(sp)
 800696c:	dd800d17 	ldw	r22,52(sp)
 8006970:	dd400c17 	ldw	r21,48(sp)
 8006974:	dd000b17 	ldw	r20,44(sp)
 8006978:	dcc00a17 	ldw	r19,40(sp)
 800697c:	dc800917 	ldw	r18,36(sp)
 8006980:	dc400817 	ldw	r17,32(sp)
 8006984:	dc000717 	ldw	r16,28(sp)
 8006988:	dec01104 	addi	sp,sp,68
 800698c:	f800283a 	ret
 8006990:	3025883a 	mov	r18,r6
 8006994:	282d883a 	mov	r22,r5
 8006998:	003f6f06 	br	8006758 <__multiply+0x4c>

0800699c <__pow5mult>:
 800699c:	defffa04 	addi	sp,sp,-24
 80069a0:	dcc00315 	stw	r19,12(sp)
 80069a4:	dc800215 	stw	r18,8(sp)
 80069a8:	dc000015 	stw	r16,0(sp)
 80069ac:	dfc00515 	stw	ra,20(sp)
 80069b0:	dd000415 	stw	r20,16(sp)
 80069b4:	dc400115 	stw	r17,4(sp)
 80069b8:	308000cc 	andi	r2,r6,3
 80069bc:	3021883a 	mov	r16,r6
 80069c0:	2027883a 	mov	r19,r4
 80069c4:	2825883a 	mov	r18,r5
 80069c8:	10002e1e 	bne	r2,zero,8006a84 <__pow5mult+0xe8>
 80069cc:	8021d0ba 	srai	r16,r16,2
 80069d0:	80001a26 	beq	r16,zero,8006a3c <__pow5mult+0xa0>
 80069d4:	9c401217 	ldw	r17,72(r19)
 80069d8:	8800061e 	bne	r17,zero,80069f4 <__pow5mult+0x58>
 80069dc:	00003406 	br	8006ab0 <__pow5mult+0x114>
 80069e0:	8021d07a 	srai	r16,r16,1
 80069e4:	80001526 	beq	r16,zero,8006a3c <__pow5mult+0xa0>
 80069e8:	88800017 	ldw	r2,0(r17)
 80069ec:	10001c26 	beq	r2,zero,8006a60 <__pow5mult+0xc4>
 80069f0:	1023883a 	mov	r17,r2
 80069f4:	80c0004c 	andi	r3,r16,1
 80069f8:	183ff926 	beq	r3,zero,80069e0 <__pow5mult+0x44>
 80069fc:	900b883a 	mov	r5,r18
 8006a00:	880d883a 	mov	r6,r17
 8006a04:	9809883a 	mov	r4,r19
 8006a08:	800670c0 	call	800670c <__multiply>
 8006a0c:	90001b26 	beq	r18,zero,8006a7c <__pow5mult+0xe0>
 8006a10:	91c00117 	ldw	r7,4(r18)
 8006a14:	98c01317 	ldw	r3,76(r19)
 8006a18:	8021d07a 	srai	r16,r16,1
 8006a1c:	39cf883a 	add	r7,r7,r7
 8006a20:	39cf883a 	add	r7,r7,r7
 8006a24:	19c7883a 	add	r3,r3,r7
 8006a28:	19000017 	ldw	r4,0(r3)
 8006a2c:	91000015 	stw	r4,0(r18)
 8006a30:	1c800015 	stw	r18,0(r3)
 8006a34:	1025883a 	mov	r18,r2
 8006a38:	803feb1e 	bne	r16,zero,80069e8 <__pow5mult+0x4c>
 8006a3c:	9005883a 	mov	r2,r18
 8006a40:	dfc00517 	ldw	ra,20(sp)
 8006a44:	dd000417 	ldw	r20,16(sp)
 8006a48:	dcc00317 	ldw	r19,12(sp)
 8006a4c:	dc800217 	ldw	r18,8(sp)
 8006a50:	dc400117 	ldw	r17,4(sp)
 8006a54:	dc000017 	ldw	r16,0(sp)
 8006a58:	dec00604 	addi	sp,sp,24
 8006a5c:	f800283a 	ret
 8006a60:	9809883a 	mov	r4,r19
 8006a64:	880b883a 	mov	r5,r17
 8006a68:	880d883a 	mov	r6,r17
 8006a6c:	800670c0 	call	800670c <__multiply>
 8006a70:	88800015 	stw	r2,0(r17)
 8006a74:	10000015 	stw	zero,0(r2)
 8006a78:	003fdd06 	br	80069f0 <__pow5mult+0x54>
 8006a7c:	1025883a 	mov	r18,r2
 8006a80:	003fd706 	br	80069e0 <__pow5mult+0x44>
 8006a84:	10bfffc4 	addi	r2,r2,-1
 8006a88:	1085883a 	add	r2,r2,r2
 8006a8c:	00c20074 	movhi	r3,2049
 8006a90:	18c02704 	addi	r3,r3,156
 8006a94:	1085883a 	add	r2,r2,r2
 8006a98:	1885883a 	add	r2,r3,r2
 8006a9c:	11800017 	ldw	r6,0(r2)
 8006aa0:	000f883a 	mov	r7,zero
 8006aa4:	800636c0 	call	800636c <__multadd>
 8006aa8:	1025883a 	mov	r18,r2
 8006aac:	003fc706 	br	80069cc <__pow5mult+0x30>
 8006ab0:	05000044 	movi	r20,1
 8006ab4:	9809883a 	mov	r4,r19
 8006ab8:	a00b883a 	mov	r5,r20
 8006abc:	800629c0 	call	800629c <_Balloc>
 8006ac0:	1023883a 	mov	r17,r2
 8006ac4:	00809c44 	movi	r2,625
 8006ac8:	88800515 	stw	r2,20(r17)
 8006acc:	8d000415 	stw	r20,16(r17)
 8006ad0:	9c401215 	stw	r17,72(r19)
 8006ad4:	88000015 	stw	zero,0(r17)
 8006ad8:	003fc606 	br	80069f4 <__pow5mult+0x58>

08006adc <__lshift>:
 8006adc:	defff904 	addi	sp,sp,-28
 8006ae0:	dd000415 	stw	r20,16(sp)
 8006ae4:	dcc00315 	stw	r19,12(sp)
 8006ae8:	3029d17a 	srai	r20,r6,5
 8006aec:	2cc00417 	ldw	r19,16(r5)
 8006af0:	28800217 	ldw	r2,8(r5)
 8006af4:	dd400515 	stw	r21,20(sp)
 8006af8:	a4e7883a 	add	r19,r20,r19
 8006afc:	dc800215 	stw	r18,8(sp)
 8006b00:	dc400115 	stw	r17,4(sp)
 8006b04:	dc000015 	stw	r16,0(sp)
 8006b08:	dfc00615 	stw	ra,24(sp)
 8006b0c:	9c000044 	addi	r16,r19,1
 8006b10:	2823883a 	mov	r17,r5
 8006b14:	302b883a 	mov	r21,r6
 8006b18:	2025883a 	mov	r18,r4
 8006b1c:	29400117 	ldw	r5,4(r5)
 8006b20:	1400030e 	bge	r2,r16,8006b30 <__lshift+0x54>
 8006b24:	1085883a 	add	r2,r2,r2
 8006b28:	29400044 	addi	r5,r5,1
 8006b2c:	143ffd16 	blt	r2,r16,8006b24 <__lshift+0x48>
 8006b30:	9009883a 	mov	r4,r18
 8006b34:	800629c0 	call	800629c <_Balloc>
 8006b38:	11c00504 	addi	r7,r2,20
 8006b3c:	0500090e 	bge	zero,r20,8006b64 <__lshift+0x88>
 8006b40:	3811883a 	mov	r8,r7
 8006b44:	0007883a 	mov	r3,zero
 8006b48:	40000015 	stw	zero,0(r8)
 8006b4c:	18c00044 	addi	r3,r3,1
 8006b50:	42000104 	addi	r8,r8,4
 8006b54:	1d3ffc1e 	bne	r3,r20,8006b48 <__lshift+0x6c>
 8006b58:	18c7883a 	add	r3,r3,r3
 8006b5c:	18c7883a 	add	r3,r3,r3
 8006b60:	38cf883a 	add	r7,r7,r3
 8006b64:	89000417 	ldw	r4,16(r17)
 8006b68:	88c00504 	addi	r3,r17,20
 8006b6c:	a98007cc 	andi	r6,r21,31
 8006b70:	2109883a 	add	r4,r4,r4
 8006b74:	2109883a 	add	r4,r4,r4
 8006b78:	1909883a 	add	r4,r3,r4
 8006b7c:	30002326 	beq	r6,zero,8006c0c <__lshift+0x130>
 8006b80:	01400804 	movi	r5,32
 8006b84:	298bc83a 	sub	r5,r5,r6
 8006b88:	0013883a 	mov	r9,zero
 8006b8c:	1a000017 	ldw	r8,0(r3)
 8006b90:	3815883a 	mov	r10,r7
 8006b94:	39c00104 	addi	r7,r7,4
 8006b98:	4190983a 	sll	r8,r8,r6
 8006b9c:	18c00104 	addi	r3,r3,4
 8006ba0:	4a10b03a 	or	r8,r9,r8
 8006ba4:	3a3fff15 	stw	r8,-4(r7)
 8006ba8:	1a3fff17 	ldw	r8,-4(r3)
 8006bac:	4152d83a 	srl	r9,r8,r5
 8006bb0:	193ff636 	bltu	r3,r4,8006b8c <__lshift+0xb0>
 8006bb4:	52400115 	stw	r9,4(r10)
 8006bb8:	48001a1e 	bne	r9,zero,8006c24 <__lshift+0x148>
 8006bbc:	843fffc4 	addi	r16,r16,-1
 8006bc0:	14000415 	stw	r16,16(r2)
 8006bc4:	88000826 	beq	r17,zero,8006be8 <__lshift+0x10c>
 8006bc8:	89000117 	ldw	r4,4(r17)
 8006bcc:	90c01317 	ldw	r3,76(r18)
 8006bd0:	2109883a 	add	r4,r4,r4
 8006bd4:	2109883a 	add	r4,r4,r4
 8006bd8:	1907883a 	add	r3,r3,r4
 8006bdc:	19000017 	ldw	r4,0(r3)
 8006be0:	89000015 	stw	r4,0(r17)
 8006be4:	1c400015 	stw	r17,0(r3)
 8006be8:	dfc00617 	ldw	ra,24(sp)
 8006bec:	dd400517 	ldw	r21,20(sp)
 8006bf0:	dd000417 	ldw	r20,16(sp)
 8006bf4:	dcc00317 	ldw	r19,12(sp)
 8006bf8:	dc800217 	ldw	r18,8(sp)
 8006bfc:	dc400117 	ldw	r17,4(sp)
 8006c00:	dc000017 	ldw	r16,0(sp)
 8006c04:	dec00704 	addi	sp,sp,28
 8006c08:	f800283a 	ret
 8006c0c:	19400017 	ldw	r5,0(r3)
 8006c10:	39c00104 	addi	r7,r7,4
 8006c14:	18c00104 	addi	r3,r3,4
 8006c18:	397fff15 	stw	r5,-4(r7)
 8006c1c:	193ffb36 	bltu	r3,r4,8006c0c <__lshift+0x130>
 8006c20:	003fe606 	br	8006bbc <__lshift+0xe0>
 8006c24:	9c000084 	addi	r16,r19,2
 8006c28:	003fe406 	br	8006bbc <__lshift+0xe0>

08006c2c <__mcmp>:
 8006c2c:	20800417 	ldw	r2,16(r4)
 8006c30:	28c00417 	ldw	r3,16(r5)
 8006c34:	10c5c83a 	sub	r2,r2,r3
 8006c38:	1000111e 	bne	r2,zero,8006c80 <__mcmp+0x54>
 8006c3c:	18c7883a 	add	r3,r3,r3
 8006c40:	18c7883a 	add	r3,r3,r3
 8006c44:	21000504 	addi	r4,r4,20
 8006c48:	29400504 	addi	r5,r5,20
 8006c4c:	20c5883a 	add	r2,r4,r3
 8006c50:	28cb883a 	add	r5,r5,r3
 8006c54:	00000106 	br	8006c5c <__mcmp+0x30>
 8006c58:	20800a2e 	bgeu	r4,r2,8006c84 <__mcmp+0x58>
 8006c5c:	10bfff04 	addi	r2,r2,-4
 8006c60:	297fff04 	addi	r5,r5,-4
 8006c64:	11800017 	ldw	r6,0(r2)
 8006c68:	28c00017 	ldw	r3,0(r5)
 8006c6c:	30fffa26 	beq	r6,r3,8006c58 <__mcmp+0x2c>
 8006c70:	30c00236 	bltu	r6,r3,8006c7c <__mcmp+0x50>
 8006c74:	00800044 	movi	r2,1
 8006c78:	f800283a 	ret
 8006c7c:	00bfffc4 	movi	r2,-1
 8006c80:	f800283a 	ret
 8006c84:	0005883a 	mov	r2,zero
 8006c88:	f800283a 	ret

08006c8c <__mdiff>:
 8006c8c:	defffb04 	addi	sp,sp,-20
 8006c90:	dc000015 	stw	r16,0(sp)
 8006c94:	2821883a 	mov	r16,r5
 8006c98:	dcc00315 	stw	r19,12(sp)
 8006c9c:	300b883a 	mov	r5,r6
 8006ca0:	2027883a 	mov	r19,r4
 8006ca4:	8009883a 	mov	r4,r16
 8006ca8:	dc800215 	stw	r18,8(sp)
 8006cac:	dfc00415 	stw	ra,16(sp)
 8006cb0:	dc400115 	stw	r17,4(sp)
 8006cb4:	3025883a 	mov	r18,r6
 8006cb8:	8006c2c0 	call	8006c2c <__mcmp>
 8006cbc:	10005226 	beq	r2,zero,8006e08 <__mdiff+0x17c>
 8006cc0:	10004c16 	blt	r2,zero,8006df4 <__mdiff+0x168>
 8006cc4:	0023883a 	mov	r17,zero
 8006cc8:	81400117 	ldw	r5,4(r16)
 8006ccc:	9809883a 	mov	r4,r19
 8006cd0:	800629c0 	call	800629c <_Balloc>
 8006cd4:	83400417 	ldw	r13,16(r16)
 8006cd8:	93800417 	ldw	r14,16(r18)
 8006cdc:	81000504 	addi	r4,r16,20
 8006ce0:	6b59883a 	add	r12,r13,r13
 8006ce4:	739d883a 	add	r14,r14,r14
 8006ce8:	6319883a 	add	r12,r12,r12
 8006cec:	91800504 	addi	r6,r18,20
 8006cf0:	739d883a 	add	r14,r14,r14
 8006cf4:	14400315 	stw	r17,12(r2)
 8006cf8:	2319883a 	add	r12,r4,r12
 8006cfc:	339d883a 	add	r14,r6,r14
 8006d00:	12400504 	addi	r9,r2,20
 8006d04:	0007883a 	mov	r3,zero
 8006d08:	22000017 	ldw	r8,0(r4)
 8006d0c:	32800017 	ldw	r10,0(r6)
 8006d10:	4ac00104 	addi	r11,r9,4
 8006d14:	41ffffcc 	andi	r7,r8,65535
 8006d18:	38c7883a 	add	r3,r7,r3
 8006d1c:	51ffffcc 	andi	r7,r10,65535
 8006d20:	19cfc83a 	sub	r7,r3,r7
 8006d24:	4010d43a 	srli	r8,r8,16
 8006d28:	5014d43a 	srli	r10,r10,16
 8006d2c:	3807d43a 	srai	r3,r7,16
 8006d30:	39ffffcc 	andi	r7,r7,65535
 8006d34:	4291c83a 	sub	r8,r8,r10
 8006d38:	40c7883a 	add	r3,r8,r3
 8006d3c:	1810943a 	slli	r8,r3,16
 8006d40:	31800104 	addi	r6,r6,4
 8006d44:	21000104 	addi	r4,r4,4
 8006d48:	41ceb03a 	or	r7,r8,r7
 8006d4c:	49c00015 	stw	r7,0(r9)
 8006d50:	1807d43a 	srai	r3,r3,16
 8006d54:	580b883a 	mov	r5,r11
 8006d58:	5813883a 	mov	r9,r11
 8006d5c:	33bfea36 	bltu	r6,r14,8006d08 <__mdiff+0x7c>
 8006d60:	2011883a 	mov	r8,r4
 8006d64:	2300152e 	bgeu	r4,r12,8006dbc <__mdiff+0x130>
 8006d68:	21400017 	ldw	r5,0(r4)
 8006d6c:	4a400104 	addi	r9,r9,4
 8006d70:	21000104 	addi	r4,r4,4
 8006d74:	29ffffcc 	andi	r7,r5,65535
 8006d78:	38c7883a 	add	r3,r7,r3
 8006d7c:	280ad43a 	srli	r5,r5,16
 8006d80:	180dd43a 	srai	r6,r3,16
 8006d84:	19ffffcc 	andi	r7,r3,65535
 8006d88:	3147883a 	add	r3,r6,r5
 8006d8c:	180a943a 	slli	r5,r3,16
 8006d90:	1807d43a 	srai	r3,r3,16
 8006d94:	29ceb03a 	or	r7,r5,r7
 8006d98:	49ffff15 	stw	r7,-4(r9)
 8006d9c:	233ff236 	bltu	r4,r12,8006d68 <__mdiff+0xdc>
 8006da0:	0206303a 	nor	r3,zero,r8
 8006da4:	1b07883a 	add	r3,r3,r12
 8006da8:	1806d0ba 	srli	r3,r3,2
 8006dac:	18c00044 	addi	r3,r3,1
 8006db0:	18c7883a 	add	r3,r3,r3
 8006db4:	18c7883a 	add	r3,r3,r3
 8006db8:	58cb883a 	add	r5,r11,r3
 8006dbc:	28ffff04 	addi	r3,r5,-4
 8006dc0:	3800041e 	bne	r7,zero,8006dd4 <__mdiff+0x148>
 8006dc4:	18ffff04 	addi	r3,r3,-4
 8006dc8:	19000017 	ldw	r4,0(r3)
 8006dcc:	6b7fffc4 	addi	r13,r13,-1
 8006dd0:	203ffc26 	beq	r4,zero,8006dc4 <__mdiff+0x138>
 8006dd4:	13400415 	stw	r13,16(r2)
 8006dd8:	dfc00417 	ldw	ra,16(sp)
 8006ddc:	dcc00317 	ldw	r19,12(sp)
 8006de0:	dc800217 	ldw	r18,8(sp)
 8006de4:	dc400117 	ldw	r17,4(sp)
 8006de8:	dc000017 	ldw	r16,0(sp)
 8006dec:	dec00504 	addi	sp,sp,20
 8006df0:	f800283a 	ret
 8006df4:	8005883a 	mov	r2,r16
 8006df8:	04400044 	movi	r17,1
 8006dfc:	9021883a 	mov	r16,r18
 8006e00:	1025883a 	mov	r18,r2
 8006e04:	003fb006 	br	8006cc8 <__mdiff+0x3c>
 8006e08:	9809883a 	mov	r4,r19
 8006e0c:	000b883a 	mov	r5,zero
 8006e10:	800629c0 	call	800629c <_Balloc>
 8006e14:	00c00044 	movi	r3,1
 8006e18:	10c00415 	stw	r3,16(r2)
 8006e1c:	10000515 	stw	zero,20(r2)
 8006e20:	003fed06 	br	8006dd8 <__mdiff+0x14c>

08006e24 <__ulp>:
 8006e24:	295ffc2c 	andhi	r5,r5,32752
 8006e28:	00bf3034 	movhi	r2,64704
 8006e2c:	2887883a 	add	r3,r5,r2
 8006e30:	00c0020e 	bge	zero,r3,8006e3c <__ulp+0x18>
 8006e34:	0005883a 	mov	r2,zero
 8006e38:	f800283a 	ret
 8006e3c:	00c7c83a 	sub	r3,zero,r3
 8006e40:	180bd53a 	srai	r5,r3,20
 8006e44:	008004c4 	movi	r2,19
 8006e48:	11400a0e 	bge	r2,r5,8006e74 <__ulp+0x50>
 8006e4c:	00800c84 	movi	r2,50
 8006e50:	0007883a 	mov	r3,zero
 8006e54:	11400516 	blt	r2,r5,8006e6c <__ulp+0x48>
 8006e58:	00800cc4 	movi	r2,51
 8006e5c:	114bc83a 	sub	r5,r2,r5
 8006e60:	00800044 	movi	r2,1
 8006e64:	1144983a 	sll	r2,r2,r5
 8006e68:	f800283a 	ret
 8006e6c:	00800044 	movi	r2,1
 8006e70:	f800283a 	ret
 8006e74:	00800234 	movhi	r2,8
 8006e78:	1147d83a 	sra	r3,r2,r5
 8006e7c:	0005883a 	mov	r2,zero
 8006e80:	f800283a 	ret

08006e84 <__b2d>:
 8006e84:	defffa04 	addi	sp,sp,-24
 8006e88:	dc000015 	stw	r16,0(sp)
 8006e8c:	24000417 	ldw	r16,16(r4)
 8006e90:	dc400115 	stw	r17,4(sp)
 8006e94:	24400504 	addi	r17,r4,20
 8006e98:	8421883a 	add	r16,r16,r16
 8006e9c:	8421883a 	add	r16,r16,r16
 8006ea0:	8c21883a 	add	r16,r17,r16
 8006ea4:	dc800215 	stw	r18,8(sp)
 8006ea8:	84bfff17 	ldw	r18,-4(r16)
 8006eac:	dd000415 	stw	r20,16(sp)
 8006eb0:	dcc00315 	stw	r19,12(sp)
 8006eb4:	9009883a 	mov	r4,r18
 8006eb8:	2829883a 	mov	r20,r5
 8006ebc:	dfc00515 	stw	ra,20(sp)
 8006ec0:	80065b80 	call	80065b8 <__hi0bits>
 8006ec4:	00c00804 	movi	r3,32
 8006ec8:	1887c83a 	sub	r3,r3,r2
 8006ecc:	a0c00015 	stw	r3,0(r20)
 8006ed0:	00c00284 	movi	r3,10
 8006ed4:	84ffff04 	addi	r19,r16,-4
 8006ed8:	18801216 	blt	r3,r2,8006f24 <__b2d+0xa0>
 8006edc:	014002c4 	movi	r5,11
 8006ee0:	2889c83a 	sub	r4,r5,r2
 8006ee4:	9106d83a 	srl	r3,r18,r4
 8006ee8:	18cffc34 	orhi	r3,r3,16368
 8006eec:	8cc0282e 	bgeu	r17,r19,8006f90 <__b2d+0x10c>
 8006ef0:	817ffe17 	ldw	r5,-8(r16)
 8006ef4:	290ad83a 	srl	r5,r5,r4
 8006ef8:	10800544 	addi	r2,r2,21
 8006efc:	9084983a 	sll	r2,r18,r2
 8006f00:	2884b03a 	or	r2,r5,r2
 8006f04:	dfc00517 	ldw	ra,20(sp)
 8006f08:	dd000417 	ldw	r20,16(sp)
 8006f0c:	dcc00317 	ldw	r19,12(sp)
 8006f10:	dc800217 	ldw	r18,8(sp)
 8006f14:	dc400117 	ldw	r17,4(sp)
 8006f18:	dc000017 	ldw	r16,0(sp)
 8006f1c:	dec00604 	addi	sp,sp,24
 8006f20:	f800283a 	ret
 8006f24:	113ffd44 	addi	r4,r2,-11
 8006f28:	8cc00f2e 	bgeu	r17,r19,8006f68 <__b2d+0xe4>
 8006f2c:	81bffe04 	addi	r6,r16,-8
 8006f30:	817ffe17 	ldw	r5,-8(r16)
 8006f34:	20001326 	beq	r4,zero,8006f84 <__b2d+0x100>
 8006f38:	00c00ac4 	movi	r3,43
 8006f3c:	1885c83a 	sub	r2,r3,r2
 8006f40:	2886d83a 	srl	r3,r5,r2
 8006f44:	9124983a 	sll	r18,r18,r4
 8006f48:	90e4b03a 	or	r18,r18,r3
 8006f4c:	90cffc34 	orhi	r3,r18,16368
 8006f50:	8980112e 	bgeu	r17,r6,8006f98 <__b2d+0x114>
 8006f54:	81bffd17 	ldw	r6,-12(r16)
 8006f58:	308cd83a 	srl	r6,r6,r2
 8006f5c:	2904983a 	sll	r2,r5,r4
 8006f60:	1184b03a 	or	r2,r2,r6
 8006f64:	003fe706 	br	8006f04 <__b2d+0x80>
 8006f68:	20000526 	beq	r4,zero,8006f80 <__b2d+0xfc>
 8006f6c:	9124983a 	sll	r18,r18,r4
 8006f70:	000d883a 	mov	r6,zero
 8006f74:	000b883a 	mov	r5,zero
 8006f78:	90cffc34 	orhi	r3,r18,16368
 8006f7c:	003ff706 	br	8006f5c <__b2d+0xd8>
 8006f80:	000b883a 	mov	r5,zero
 8006f84:	90cffc34 	orhi	r3,r18,16368
 8006f88:	2805883a 	mov	r2,r5
 8006f8c:	003fdd06 	br	8006f04 <__b2d+0x80>
 8006f90:	000b883a 	mov	r5,zero
 8006f94:	003fd806 	br	8006ef8 <__b2d+0x74>
 8006f98:	000d883a 	mov	r6,zero
 8006f9c:	003fef06 	br	8006f5c <__b2d+0xd8>

08006fa0 <__d2b>:
 8006fa0:	defff704 	addi	sp,sp,-36
 8006fa4:	dc000215 	stw	r16,8(sp)
 8006fa8:	3021883a 	mov	r16,r6
 8006fac:	dc400315 	stw	r17,12(sp)
 8006fb0:	8022907a 	slli	r17,r16,1
 8006fb4:	dd400715 	stw	r21,28(sp)
 8006fb8:	282b883a 	mov	r21,r5
 8006fbc:	01400044 	movi	r5,1
 8006fc0:	dd000615 	stw	r20,24(sp)
 8006fc4:	dcc00515 	stw	r19,20(sp)
 8006fc8:	dc800415 	stw	r18,16(sp)
 8006fcc:	dfc00815 	stw	ra,32(sp)
 8006fd0:	3829883a 	mov	r20,r7
 8006fd4:	dc800917 	ldw	r18,36(sp)
 8006fd8:	8822d57a 	srli	r17,r17,21
 8006fdc:	800629c0 	call	800629c <_Balloc>
 8006fe0:	1027883a 	mov	r19,r2
 8006fe4:	00800434 	movhi	r2,16
 8006fe8:	10bfffc4 	addi	r2,r2,-1
 8006fec:	808c703a 	and	r6,r16,r2
 8006ff0:	88000126 	beq	r17,zero,8006ff8 <__d2b+0x58>
 8006ff4:	31800434 	orhi	r6,r6,16
 8006ff8:	d9800015 	stw	r6,0(sp)
 8006ffc:	a8001f26 	beq	r21,zero,800707c <__d2b+0xdc>
 8007000:	d9000104 	addi	r4,sp,4
 8007004:	dd400115 	stw	r21,4(sp)
 8007008:	80066200 	call	8006620 <__lo0bits>
 800700c:	d8c00017 	ldw	r3,0(sp)
 8007010:	1000291e 	bne	r2,zero,80070b8 <__d2b+0x118>
 8007014:	d9000117 	ldw	r4,4(sp)
 8007018:	99000515 	stw	r4,20(r19)
 800701c:	1820c03a 	cmpne	r16,r3,zero
 8007020:	84000044 	addi	r16,r16,1
 8007024:	98c00615 	stw	r3,24(r19)
 8007028:	9c000415 	stw	r16,16(r19)
 800702c:	88001b1e 	bne	r17,zero,800709c <__d2b+0xfc>
 8007030:	800690ba 	slli	r3,r16,2
 8007034:	10bef384 	addi	r2,r2,-1074
 8007038:	a0800015 	stw	r2,0(r20)
 800703c:	98c5883a 	add	r2,r19,r3
 8007040:	11000417 	ldw	r4,16(r2)
 8007044:	8020917a 	slli	r16,r16,5
 8007048:	80065b80 	call	80065b8 <__hi0bits>
 800704c:	8085c83a 	sub	r2,r16,r2
 8007050:	90800015 	stw	r2,0(r18)
 8007054:	9805883a 	mov	r2,r19
 8007058:	dfc00817 	ldw	ra,32(sp)
 800705c:	dd400717 	ldw	r21,28(sp)
 8007060:	dd000617 	ldw	r20,24(sp)
 8007064:	dcc00517 	ldw	r19,20(sp)
 8007068:	dc800417 	ldw	r18,16(sp)
 800706c:	dc400317 	ldw	r17,12(sp)
 8007070:	dc000217 	ldw	r16,8(sp)
 8007074:	dec00904 	addi	sp,sp,36
 8007078:	f800283a 	ret
 800707c:	d809883a 	mov	r4,sp
 8007080:	80066200 	call	8006620 <__lo0bits>
 8007084:	d8c00017 	ldw	r3,0(sp)
 8007088:	04000044 	movi	r16,1
 800708c:	9c000415 	stw	r16,16(r19)
 8007090:	98c00515 	stw	r3,20(r19)
 8007094:	10800804 	addi	r2,r2,32
 8007098:	883fe526 	beq	r17,zero,8007030 <__d2b+0x90>
 800709c:	8c7ef344 	addi	r17,r17,-1075
 80070a0:	88a3883a 	add	r17,r17,r2
 80070a4:	00c00d44 	movi	r3,53
 80070a8:	a4400015 	stw	r17,0(r20)
 80070ac:	1885c83a 	sub	r2,r3,r2
 80070b0:	90800015 	stw	r2,0(r18)
 80070b4:	003fe706 	br	8007054 <__d2b+0xb4>
 80070b8:	01000804 	movi	r4,32
 80070bc:	2089c83a 	sub	r4,r4,r2
 80070c0:	1908983a 	sll	r4,r3,r4
 80070c4:	d9400117 	ldw	r5,4(sp)
 80070c8:	1886d83a 	srl	r3,r3,r2
 80070cc:	2148b03a 	or	r4,r4,r5
 80070d0:	99000515 	stw	r4,20(r19)
 80070d4:	d8c00015 	stw	r3,0(sp)
 80070d8:	003fd006 	br	800701c <__d2b+0x7c>

080070dc <__ratio>:
 80070dc:	defff904 	addi	sp,sp,-28
 80070e0:	dc400315 	stw	r17,12(sp)
 80070e4:	2823883a 	mov	r17,r5
 80070e8:	d9400104 	addi	r5,sp,4
 80070ec:	dfc00615 	stw	ra,24(sp)
 80070f0:	dcc00515 	stw	r19,20(sp)
 80070f4:	dc800415 	stw	r18,16(sp)
 80070f8:	2027883a 	mov	r19,r4
 80070fc:	dc000215 	stw	r16,8(sp)
 8007100:	8006e840 	call	8006e84 <__b2d>
 8007104:	8809883a 	mov	r4,r17
 8007108:	d80b883a 	mov	r5,sp
 800710c:	1025883a 	mov	r18,r2
 8007110:	1821883a 	mov	r16,r3
 8007114:	8006e840 	call	8006e84 <__b2d>
 8007118:	8a400417 	ldw	r9,16(r17)
 800711c:	9a000417 	ldw	r8,16(r19)
 8007120:	100d883a 	mov	r6,r2
 8007124:	d8800017 	ldw	r2,0(sp)
 8007128:	4251c83a 	sub	r8,r8,r9
 800712c:	4012917a 	slli	r9,r8,5
 8007130:	da000117 	ldw	r8,4(sp)
 8007134:	4091c83a 	sub	r8,r8,r2
 8007138:	4251883a 	add	r8,r8,r9
 800713c:	02000d0e 	bge	zero,r8,8007174 <__ratio+0x98>
 8007140:	4010953a 	slli	r8,r8,20
 8007144:	4421883a 	add	r16,r8,r16
 8007148:	9009883a 	mov	r4,r18
 800714c:	800b883a 	mov	r5,r16
 8007150:	180f883a 	mov	r7,r3
 8007154:	800b5dc0 	call	800b5dc <__divdf3>
 8007158:	dfc00617 	ldw	ra,24(sp)
 800715c:	dcc00517 	ldw	r19,20(sp)
 8007160:	dc800417 	ldw	r18,16(sp)
 8007164:	dc400317 	ldw	r17,12(sp)
 8007168:	dc000217 	ldw	r16,8(sp)
 800716c:	dec00704 	addi	sp,sp,28
 8007170:	f800283a 	ret
 8007174:	4010953a 	slli	r8,r8,20
 8007178:	1a07c83a 	sub	r3,r3,r8
 800717c:	003ff206 	br	8007148 <__ratio+0x6c>

08007180 <_mprec_log10>:
 8007180:	defffe04 	addi	sp,sp,-8
 8007184:	dc000015 	stw	r16,0(sp)
 8007188:	dfc00115 	stw	ra,4(sp)
 800718c:	008005c4 	movi	r2,23
 8007190:	2021883a 	mov	r16,r4
 8007194:	11000d0e 	bge	r2,r4,80071cc <_mprec_log10+0x4c>
 8007198:	0005883a 	mov	r2,zero
 800719c:	00cffc34 	movhi	r3,16368
 80071a0:	843fffc4 	addi	r16,r16,-1
 80071a4:	1009883a 	mov	r4,r2
 80071a8:	180b883a 	mov	r5,r3
 80071ac:	000d883a 	mov	r6,zero
 80071b0:	01d00934 	movhi	r7,16420
 80071b4:	800c1a00 	call	800c1a0 <__muldf3>
 80071b8:	803ff91e 	bne	r16,zero,80071a0 <_mprec_log10+0x20>
 80071bc:	dfc00117 	ldw	ra,4(sp)
 80071c0:	dc000017 	ldw	r16,0(sp)
 80071c4:	dec00204 	addi	sp,sp,8
 80071c8:	f800283a 	ret
 80071cc:	202090fa 	slli	r16,r4,3
 80071d0:	00820074 	movhi	r2,2049
 80071d4:	10803e04 	addi	r2,r2,248
 80071d8:	1421883a 	add	r16,r2,r16
 80071dc:	80800017 	ldw	r2,0(r16)
 80071e0:	80c00117 	ldw	r3,4(r16)
 80071e4:	dfc00117 	ldw	ra,4(sp)
 80071e8:	dc000017 	ldw	r16,0(sp)
 80071ec:	dec00204 	addi	sp,sp,8
 80071f0:	f800283a 	ret

080071f4 <__copybits>:
 80071f4:	297fffc4 	addi	r5,r5,-1
 80071f8:	280fd17a 	srai	r7,r5,5
 80071fc:	30c00417 	ldw	r3,16(r6)
 8007200:	30800504 	addi	r2,r6,20
 8007204:	39c00044 	addi	r7,r7,1
 8007208:	18c7883a 	add	r3,r3,r3
 800720c:	39cf883a 	add	r7,r7,r7
 8007210:	18c7883a 	add	r3,r3,r3
 8007214:	39cf883a 	add	r7,r7,r7
 8007218:	10c7883a 	add	r3,r2,r3
 800721c:	21cf883a 	add	r7,r4,r7
 8007220:	10c00d2e 	bgeu	r2,r3,8007258 <__copybits+0x64>
 8007224:	200b883a 	mov	r5,r4
 8007228:	12000017 	ldw	r8,0(r2)
 800722c:	29400104 	addi	r5,r5,4
 8007230:	10800104 	addi	r2,r2,4
 8007234:	2a3fff15 	stw	r8,-4(r5)
 8007238:	10fffb36 	bltu	r2,r3,8007228 <__copybits+0x34>
 800723c:	1985c83a 	sub	r2,r3,r6
 8007240:	10bffac4 	addi	r2,r2,-21
 8007244:	1004d0ba 	srli	r2,r2,2
 8007248:	10800044 	addi	r2,r2,1
 800724c:	1085883a 	add	r2,r2,r2
 8007250:	1085883a 	add	r2,r2,r2
 8007254:	2089883a 	add	r4,r4,r2
 8007258:	21c0032e 	bgeu	r4,r7,8007268 <__copybits+0x74>
 800725c:	20000015 	stw	zero,0(r4)
 8007260:	21000104 	addi	r4,r4,4
 8007264:	21fffd36 	bltu	r4,r7,800725c <__copybits+0x68>
 8007268:	f800283a 	ret

0800726c <__any_on>:
 800726c:	20c00417 	ldw	r3,16(r4)
 8007270:	2805d17a 	srai	r2,r5,5
 8007274:	21000504 	addi	r4,r4,20
 8007278:	18800d0e 	bge	r3,r2,80072b0 <__any_on+0x44>
 800727c:	18c7883a 	add	r3,r3,r3
 8007280:	18c7883a 	add	r3,r3,r3
 8007284:	20c7883a 	add	r3,r4,r3
 8007288:	20c0192e 	bgeu	r4,r3,80072f0 <__any_on+0x84>
 800728c:	18bfff17 	ldw	r2,-4(r3)
 8007290:	18ffff04 	addi	r3,r3,-4
 8007294:	1000041e 	bne	r2,zero,80072a8 <__any_on+0x3c>
 8007298:	20c0142e 	bgeu	r4,r3,80072ec <__any_on+0x80>
 800729c:	18ffff04 	addi	r3,r3,-4
 80072a0:	19400017 	ldw	r5,0(r3)
 80072a4:	283ffc26 	beq	r5,zero,8007298 <__any_on+0x2c>
 80072a8:	00800044 	movi	r2,1
 80072ac:	f800283a 	ret
 80072b0:	10c00a0e 	bge	r2,r3,80072dc <__any_on+0x70>
 80072b4:	1085883a 	add	r2,r2,r2
 80072b8:	1085883a 	add	r2,r2,r2
 80072bc:	294007cc 	andi	r5,r5,31
 80072c0:	2087883a 	add	r3,r4,r2
 80072c4:	283ff026 	beq	r5,zero,8007288 <__any_on+0x1c>
 80072c8:	19800017 	ldw	r6,0(r3)
 80072cc:	3144d83a 	srl	r2,r6,r5
 80072d0:	114a983a 	sll	r5,r2,r5
 80072d4:	29bff41e 	bne	r5,r6,80072a8 <__any_on+0x3c>
 80072d8:	003feb06 	br	8007288 <__any_on+0x1c>
 80072dc:	1085883a 	add	r2,r2,r2
 80072e0:	1085883a 	add	r2,r2,r2
 80072e4:	2087883a 	add	r3,r4,r2
 80072e8:	003fe706 	br	8007288 <__any_on+0x1c>
 80072ec:	f800283a 	ret
 80072f0:	0005883a 	mov	r2,zero
 80072f4:	f800283a 	ret

080072f8 <__fpclassifyd>:
 80072f8:	00a00034 	movhi	r2,32768
 80072fc:	10bfffc4 	addi	r2,r2,-1
 8007300:	2884703a 	and	r2,r5,r2
 8007304:	10000726 	beq	r2,zero,8007324 <__fpclassifyd+0x2c>
 8007308:	00fffc34 	movhi	r3,65520
 800730c:	019ff834 	movhi	r6,32736
 8007310:	28c7883a 	add	r3,r5,r3
 8007314:	31bfffc4 	addi	r6,r6,-1
 8007318:	30c00536 	bltu	r6,r3,8007330 <__fpclassifyd+0x38>
 800731c:	00800104 	movi	r2,4
 8007320:	f800283a 	ret
 8007324:	2000021e 	bne	r4,zero,8007330 <__fpclassifyd+0x38>
 8007328:	00800084 	movi	r2,2
 800732c:	f800283a 	ret
 8007330:	00dffc34 	movhi	r3,32752
 8007334:	019ff834 	movhi	r6,32736
 8007338:	28cb883a 	add	r5,r5,r3
 800733c:	31bfffc4 	addi	r6,r6,-1
 8007340:	317ff62e 	bgeu	r6,r5,800731c <__fpclassifyd+0x24>
 8007344:	01400434 	movhi	r5,16
 8007348:	297fffc4 	addi	r5,r5,-1
 800734c:	28800236 	bltu	r5,r2,8007358 <__fpclassifyd+0x60>
 8007350:	008000c4 	movi	r2,3
 8007354:	f800283a 	ret
 8007358:	10c00226 	beq	r2,r3,8007364 <__fpclassifyd+0x6c>
 800735c:	0005883a 	mov	r2,zero
 8007360:	f800283a 	ret
 8007364:	2005003a 	cmpeq	r2,r4,zero
 8007368:	f800283a 	ret

0800736c <_sbrk_r>:
 800736c:	defffd04 	addi	sp,sp,-12
 8007370:	dc000015 	stw	r16,0(sp)
 8007374:	04020074 	movhi	r16,2049
 8007378:	dc400115 	stw	r17,4(sp)
 800737c:	840e0104 	addi	r16,r16,14340
 8007380:	2023883a 	mov	r17,r4
 8007384:	2809883a 	mov	r4,r5
 8007388:	dfc00215 	stw	ra,8(sp)
 800738c:	80000015 	stw	zero,0(r16)
 8007390:	800dccc0 	call	800dccc <sbrk>
 8007394:	00ffffc4 	movi	r3,-1
 8007398:	10c00526 	beq	r2,r3,80073b0 <_sbrk_r+0x44>
 800739c:	dfc00217 	ldw	ra,8(sp)
 80073a0:	dc400117 	ldw	r17,4(sp)
 80073a4:	dc000017 	ldw	r16,0(sp)
 80073a8:	dec00304 	addi	sp,sp,12
 80073ac:	f800283a 	ret
 80073b0:	80c00017 	ldw	r3,0(r16)
 80073b4:	183ff926 	beq	r3,zero,800739c <_sbrk_r+0x30>
 80073b8:	88c00015 	stw	r3,0(r17)
 80073bc:	003ff706 	br	800739c <_sbrk_r+0x30>

080073c0 <__sread>:
 80073c0:	defffe04 	addi	sp,sp,-8
 80073c4:	dc000015 	stw	r16,0(sp)
 80073c8:	2821883a 	mov	r16,r5
 80073cc:	2940038f 	ldh	r5,14(r5)
 80073d0:	dfc00115 	stw	ra,4(sp)
 80073d4:	80096b80 	call	80096b8 <_read_r>
 80073d8:	10000716 	blt	r2,zero,80073f8 <__sread+0x38>
 80073dc:	80c01417 	ldw	r3,80(r16)
 80073e0:	1887883a 	add	r3,r3,r2
 80073e4:	80c01415 	stw	r3,80(r16)
 80073e8:	dfc00117 	ldw	ra,4(sp)
 80073ec:	dc000017 	ldw	r16,0(sp)
 80073f0:	dec00204 	addi	sp,sp,8
 80073f4:	f800283a 	ret
 80073f8:	80c0030b 	ldhu	r3,12(r16)
 80073fc:	18fbffcc 	andi	r3,r3,61439
 8007400:	80c0030d 	sth	r3,12(r16)
 8007404:	dfc00117 	ldw	ra,4(sp)
 8007408:	dc000017 	ldw	r16,0(sp)
 800740c:	dec00204 	addi	sp,sp,8
 8007410:	f800283a 	ret

08007414 <__seofread>:
 8007414:	0005883a 	mov	r2,zero
 8007418:	f800283a 	ret

0800741c <__swrite>:
 800741c:	2880030b 	ldhu	r2,12(r5)
 8007420:	defffb04 	addi	sp,sp,-20
 8007424:	dcc00315 	stw	r19,12(sp)
 8007428:	dc800215 	stw	r18,8(sp)
 800742c:	dc400115 	stw	r17,4(sp)
 8007430:	dc000015 	stw	r16,0(sp)
 8007434:	dfc00415 	stw	ra,16(sp)
 8007438:	10c0400c 	andi	r3,r2,256
 800743c:	2821883a 	mov	r16,r5
 8007440:	2027883a 	mov	r19,r4
 8007444:	3025883a 	mov	r18,r6
 8007448:	3823883a 	mov	r17,r7
 800744c:	18000526 	beq	r3,zero,8007464 <__swrite+0x48>
 8007450:	2940038f 	ldh	r5,14(r5)
 8007454:	000d883a 	mov	r6,zero
 8007458:	01c00084 	movi	r7,2
 800745c:	80095000 	call	8009500 <_lseek_r>
 8007460:	8080030b 	ldhu	r2,12(r16)
 8007464:	8140038f 	ldh	r5,14(r16)
 8007468:	10bbffcc 	andi	r2,r2,61439
 800746c:	9809883a 	mov	r4,r19
 8007470:	900d883a 	mov	r6,r18
 8007474:	880f883a 	mov	r7,r17
 8007478:	8080030d 	sth	r2,12(r16)
 800747c:	dfc00417 	ldw	ra,16(sp)
 8007480:	dcc00317 	ldw	r19,12(sp)
 8007484:	dc800217 	ldw	r18,8(sp)
 8007488:	dc400117 	ldw	r17,4(sp)
 800748c:	dc000017 	ldw	r16,0(sp)
 8007490:	dec00504 	addi	sp,sp,20
 8007494:	8008b1c1 	jmpi	8008b1c <_write_r>

08007498 <__sseek>:
 8007498:	defffe04 	addi	sp,sp,-8
 800749c:	dc000015 	stw	r16,0(sp)
 80074a0:	2821883a 	mov	r16,r5
 80074a4:	2940038f 	ldh	r5,14(r5)
 80074a8:	dfc00115 	stw	ra,4(sp)
 80074ac:	80095000 	call	8009500 <_lseek_r>
 80074b0:	00ffffc4 	movi	r3,-1
 80074b4:	10c00826 	beq	r2,r3,80074d8 <__sseek+0x40>
 80074b8:	80c0030b 	ldhu	r3,12(r16)
 80074bc:	80801415 	stw	r2,80(r16)
 80074c0:	18c40014 	ori	r3,r3,4096
 80074c4:	80c0030d 	sth	r3,12(r16)
 80074c8:	dfc00117 	ldw	ra,4(sp)
 80074cc:	dc000017 	ldw	r16,0(sp)
 80074d0:	dec00204 	addi	sp,sp,8
 80074d4:	f800283a 	ret
 80074d8:	80c0030b 	ldhu	r3,12(r16)
 80074dc:	18fbffcc 	andi	r3,r3,61439
 80074e0:	80c0030d 	sth	r3,12(r16)
 80074e4:	dfc00117 	ldw	ra,4(sp)
 80074e8:	dc000017 	ldw	r16,0(sp)
 80074ec:	dec00204 	addi	sp,sp,8
 80074f0:	f800283a 	ret

080074f4 <__sclose>:
 80074f4:	2940038f 	ldh	r5,14(r5)
 80074f8:	8008b781 	jmpi	8008b78 <_close_r>

080074fc <strcmp>:
 80074fc:	2144b03a 	or	r2,r4,r5
 8007500:	108000cc 	andi	r2,r2,3
 8007504:	1000171e 	bne	r2,zero,8007564 <strcmp+0x68>
 8007508:	20800017 	ldw	r2,0(r4)
 800750c:	28c00017 	ldw	r3,0(r5)
 8007510:	10c0141e 	bne	r2,r3,8007564 <strcmp+0x68>
 8007514:	027fbff4 	movhi	r9,65279
 8007518:	4a7fbfc4 	addi	r9,r9,-257
 800751c:	0086303a 	nor	r3,zero,r2
 8007520:	02202074 	movhi	r8,32897
 8007524:	1245883a 	add	r2,r2,r9
 8007528:	42202004 	addi	r8,r8,-32640
 800752c:	10c4703a 	and	r2,r2,r3
 8007530:	1204703a 	and	r2,r2,r8
 8007534:	10000226 	beq	r2,zero,8007540 <strcmp+0x44>
 8007538:	00001706 	br	8007598 <strcmp+0x9c>
 800753c:	1000161e 	bne	r2,zero,8007598 <strcmp+0x9c>
 8007540:	21000104 	addi	r4,r4,4
 8007544:	20c00017 	ldw	r3,0(r4)
 8007548:	29400104 	addi	r5,r5,4
 800754c:	29800017 	ldw	r6,0(r5)
 8007550:	1a4f883a 	add	r7,r3,r9
 8007554:	00c4303a 	nor	r2,zero,r3
 8007558:	3884703a 	and	r2,r7,r2
 800755c:	1204703a 	and	r2,r2,r8
 8007560:	19bff626 	beq	r3,r6,800753c <strcmp+0x40>
 8007564:	20800007 	ldb	r2,0(r4)
 8007568:	1000051e 	bne	r2,zero,8007580 <strcmp+0x84>
 800756c:	00000606 	br	8007588 <strcmp+0x8c>
 8007570:	21000044 	addi	r4,r4,1
 8007574:	20800007 	ldb	r2,0(r4)
 8007578:	29400044 	addi	r5,r5,1
 800757c:	10000226 	beq	r2,zero,8007588 <strcmp+0x8c>
 8007580:	28c00007 	ldb	r3,0(r5)
 8007584:	10fffa26 	beq	r2,r3,8007570 <strcmp+0x74>
 8007588:	20800003 	ldbu	r2,0(r4)
 800758c:	28c00003 	ldbu	r3,0(r5)
 8007590:	10c5c83a 	sub	r2,r2,r3
 8007594:	f800283a 	ret
 8007598:	0005883a 	mov	r2,zero
 800759c:	f800283a 	ret

080075a0 <strlen>:
 80075a0:	208000cc 	andi	r2,r4,3
 80075a4:	10002026 	beq	r2,zero,8007628 <strlen+0x88>
 80075a8:	20800007 	ldb	r2,0(r4)
 80075ac:	10002026 	beq	r2,zero,8007630 <strlen+0x90>
 80075b0:	2005883a 	mov	r2,r4
 80075b4:	00000206 	br	80075c0 <strlen+0x20>
 80075b8:	10c00007 	ldb	r3,0(r2)
 80075bc:	18001826 	beq	r3,zero,8007620 <strlen+0x80>
 80075c0:	10800044 	addi	r2,r2,1
 80075c4:	10c000cc 	andi	r3,r2,3
 80075c8:	183ffb1e 	bne	r3,zero,80075b8 <strlen+0x18>
 80075cc:	10c00017 	ldw	r3,0(r2)
 80075d0:	01ffbff4 	movhi	r7,65279
 80075d4:	39ffbfc4 	addi	r7,r7,-257
 80075d8:	00ca303a 	nor	r5,zero,r3
 80075dc:	01a02074 	movhi	r6,32897
 80075e0:	19c7883a 	add	r3,r3,r7
 80075e4:	31a02004 	addi	r6,r6,-32640
 80075e8:	1946703a 	and	r3,r3,r5
 80075ec:	1986703a 	and	r3,r3,r6
 80075f0:	1800091e 	bne	r3,zero,8007618 <strlen+0x78>
 80075f4:	10800104 	addi	r2,r2,4
 80075f8:	10c00017 	ldw	r3,0(r2)
 80075fc:	19cb883a 	add	r5,r3,r7
 8007600:	00c6303a 	nor	r3,zero,r3
 8007604:	28c6703a 	and	r3,r5,r3
 8007608:	1986703a 	and	r3,r3,r6
 800760c:	183ff926 	beq	r3,zero,80075f4 <strlen+0x54>
 8007610:	00000106 	br	8007618 <strlen+0x78>
 8007614:	10800044 	addi	r2,r2,1
 8007618:	10c00007 	ldb	r3,0(r2)
 800761c:	183ffd1e 	bne	r3,zero,8007614 <strlen+0x74>
 8007620:	1105c83a 	sub	r2,r2,r4
 8007624:	f800283a 	ret
 8007628:	2005883a 	mov	r2,r4
 800762c:	003fe706 	br	80075cc <strlen+0x2c>
 8007630:	0005883a 	mov	r2,zero
 8007634:	f800283a 	ret

08007638 <__sprint_r.part.0>:
 8007638:	28801917 	ldw	r2,100(r5)
 800763c:	defff604 	addi	sp,sp,-40
 8007640:	dd400515 	stw	r21,20(sp)
 8007644:	dcc00315 	stw	r19,12(sp)
 8007648:	dfc00915 	stw	ra,36(sp)
 800764c:	df000815 	stw	fp,32(sp)
 8007650:	ddc00715 	stw	r23,28(sp)
 8007654:	dd800615 	stw	r22,24(sp)
 8007658:	dd000415 	stw	r20,16(sp)
 800765c:	dc800215 	stw	r18,8(sp)
 8007660:	dc400115 	stw	r17,4(sp)
 8007664:	dc000015 	stw	r16,0(sp)
 8007668:	1088000c 	andi	r2,r2,8192
 800766c:	2827883a 	mov	r19,r5
 8007670:	302b883a 	mov	r21,r6
 8007674:	10002d26 	beq	r2,zero,800772c <__sprint_r.part.0+0xf4>
 8007678:	30800217 	ldw	r2,8(r6)
 800767c:	35800017 	ldw	r22,0(r6)
 8007680:	10002826 	beq	r2,zero,8007724 <__sprint_r.part.0+0xec>
 8007684:	2029883a 	mov	r20,r4
 8007688:	b5c00104 	addi	r23,r22,4
 800768c:	04bfffc4 	movi	r18,-1
 8007690:	bc400017 	ldw	r17,0(r23)
 8007694:	b4000017 	ldw	r16,0(r22)
 8007698:	0039883a 	mov	fp,zero
 800769c:	8822d0ba 	srli	r17,r17,2
 80076a0:	04400316 	blt	zero,r17,80076b0 <__sprint_r.part.0+0x78>
 80076a4:	00001806 	br	8007708 <__sprint_r.part.0+0xd0>
 80076a8:	84000104 	addi	r16,r16,4
 80076ac:	8f001526 	beq	r17,fp,8007704 <__sprint_r.part.0+0xcc>
 80076b0:	81400017 	ldw	r5,0(r16)
 80076b4:	a009883a 	mov	r4,r20
 80076b8:	980d883a 	mov	r6,r19
 80076bc:	8008da80 	call	8008da8 <_fputwc_r>
 80076c0:	e7000044 	addi	fp,fp,1
 80076c4:	14bff81e 	bne	r2,r18,80076a8 <__sprint_r.part.0+0x70>
 80076c8:	9005883a 	mov	r2,r18
 80076cc:	a8000215 	stw	zero,8(r21)
 80076d0:	a8000115 	stw	zero,4(r21)
 80076d4:	dfc00917 	ldw	ra,36(sp)
 80076d8:	df000817 	ldw	fp,32(sp)
 80076dc:	ddc00717 	ldw	r23,28(sp)
 80076e0:	dd800617 	ldw	r22,24(sp)
 80076e4:	dd400517 	ldw	r21,20(sp)
 80076e8:	dd000417 	ldw	r20,16(sp)
 80076ec:	dcc00317 	ldw	r19,12(sp)
 80076f0:	dc800217 	ldw	r18,8(sp)
 80076f4:	dc400117 	ldw	r17,4(sp)
 80076f8:	dc000017 	ldw	r16,0(sp)
 80076fc:	dec00a04 	addi	sp,sp,40
 8007700:	f800283a 	ret
 8007704:	a8800217 	ldw	r2,8(r21)
 8007708:	8c63883a 	add	r17,r17,r17
 800770c:	8c63883a 	add	r17,r17,r17
 8007710:	1445c83a 	sub	r2,r2,r17
 8007714:	a8800215 	stw	r2,8(r21)
 8007718:	b5800204 	addi	r22,r22,8
 800771c:	bdc00204 	addi	r23,r23,8
 8007720:	103fdb1e 	bne	r2,zero,8007690 <__sprint_r.part.0+0x58>
 8007724:	0005883a 	mov	r2,zero
 8007728:	003fe806 	br	80076cc <__sprint_r.part.0+0x94>
 800772c:	8008fe00 	call	8008fe0 <__sfvwrite_r>
 8007730:	003fe606 	br	80076cc <__sprint_r.part.0+0x94>

08007734 <__sprint_r>:
 8007734:	30c00217 	ldw	r3,8(r6)
 8007738:	18000126 	beq	r3,zero,8007740 <__sprint_r+0xc>
 800773c:	80076381 	jmpi	8007638 <__sprint_r.part.0>
 8007740:	30000115 	stw	zero,4(r6)
 8007744:	0005883a 	mov	r2,zero
 8007748:	f800283a 	ret

0800774c <___vfiprintf_internal_r>:
 800774c:	deffca04 	addi	sp,sp,-216
 8007750:	dcc02f15 	stw	r19,188(sp)
 8007754:	dfc03515 	stw	ra,212(sp)
 8007758:	df003415 	stw	fp,208(sp)
 800775c:	ddc03315 	stw	r23,204(sp)
 8007760:	dd803215 	stw	r22,200(sp)
 8007764:	dd403115 	stw	r21,196(sp)
 8007768:	dd003015 	stw	r20,192(sp)
 800776c:	dc802e15 	stw	r18,184(sp)
 8007770:	dc402d15 	stw	r17,180(sp)
 8007774:	dc002c15 	stw	r16,176(sp)
 8007778:	d9002215 	stw	r4,136(sp)
 800777c:	d9402115 	stw	r5,132(sp)
 8007780:	d9c02315 	stw	r7,140(sp)
 8007784:	3027883a 	mov	r19,r6
 8007788:	20000226 	beq	r4,zero,8007794 <___vfiprintf_internal_r+0x48>
 800778c:	20800e17 	ldw	r2,56(r4)
 8007790:	10018d26 	beq	r2,zero,8007dc8 <___vfiprintf_internal_r+0x67c>
 8007794:	d8c02117 	ldw	r3,132(sp)
 8007798:	1880030b 	ldhu	r2,12(r3)
 800779c:	10c8000c 	andi	r3,r2,8192
 80077a0:	1800071e 	bne	r3,zero,80077c0 <___vfiprintf_internal_r+0x74>
 80077a4:	d9402117 	ldw	r5,132(sp)
 80077a8:	00f7ffc4 	movi	r3,-8193
 80077ac:	10880014 	ori	r2,r2,8192
 80077b0:	29001917 	ldw	r4,100(r5)
 80077b4:	2880030d 	sth	r2,12(r5)
 80077b8:	20c6703a 	and	r3,r4,r3
 80077bc:	28c01915 	stw	r3,100(r5)
 80077c0:	10c0020c 	andi	r3,r2,8
 80077c4:	18016126 	beq	r3,zero,8007d4c <___vfiprintf_internal_r+0x600>
 80077c8:	d9002117 	ldw	r4,132(sp)
 80077cc:	20c00417 	ldw	r3,16(r4)
 80077d0:	18015e26 	beq	r3,zero,8007d4c <___vfiprintf_internal_r+0x600>
 80077d4:	1080068c 	andi	r2,r2,26
 80077d8:	00c00284 	movi	r3,10
 80077dc:	10c16426 	beq	r2,r3,8007d70 <___vfiprintf_internal_r+0x624>
 80077e0:	d9001a04 	addi	r4,sp,104
 80077e4:	d94019c4 	addi	r5,sp,103
 80077e8:	04420074 	movhi	r17,2049
 80077ec:	2145c83a 	sub	r2,r4,r5
 80077f0:	8c407004 	addi	r17,r17,448
 80077f4:	d9001e15 	stw	r4,120(sp)
 80077f8:	d9401f15 	stw	r5,124(sp)
 80077fc:	dec01a15 	stw	sp,104(sp)
 8007800:	d8001c15 	stw	zero,112(sp)
 8007804:	d8001b15 	stw	zero,108(sp)
 8007808:	d8002715 	stw	zero,156(sp)
 800780c:	d8002515 	stw	zero,148(sp)
 8007810:	d8802815 	stw	r2,160(sp)
 8007814:	d829883a 	mov	r20,sp
 8007818:	982d883a 	mov	r22,r19
 800781c:	b0800007 	ldb	r2,0(r22)
 8007820:	10038126 	beq	r2,zero,8008628 <___vfiprintf_internal_r+0xedc>
 8007824:	01000944 	movi	r4,37
 8007828:	11037f26 	beq	r2,r4,8008628 <___vfiprintf_internal_r+0xedc>
 800782c:	b005883a 	mov	r2,r22
 8007830:	00000106 	br	8007838 <___vfiprintf_internal_r+0xec>
 8007834:	19000326 	beq	r3,r4,8007844 <___vfiprintf_internal_r+0xf8>
 8007838:	10800044 	addi	r2,r2,1
 800783c:	10c00007 	ldb	r3,0(r2)
 8007840:	183ffc1e 	bne	r3,zero,8007834 <___vfiprintf_internal_r+0xe8>
 8007844:	15a1c83a 	sub	r16,r2,r22
 8007848:	102b883a 	mov	r21,r2
 800784c:	80001026 	beq	r16,zero,8007890 <___vfiprintf_internal_r+0x144>
 8007850:	d8c01c17 	ldw	r3,112(sp)
 8007854:	d8801b17 	ldw	r2,108(sp)
 8007858:	a5800015 	stw	r22,0(r20)
 800785c:	80c7883a 	add	r3,r16,r3
 8007860:	10800044 	addi	r2,r2,1
 8007864:	a4000115 	stw	r16,4(r20)
 8007868:	d8c01c15 	stw	r3,112(sp)
 800786c:	d8801b15 	stw	r2,108(sp)
 8007870:	010001c4 	movi	r4,7
 8007874:	2080730e 	bge	r4,r2,8007a44 <___vfiprintf_internal_r+0x2f8>
 8007878:	1803781e 	bne	r3,zero,800865c <___vfiprintf_internal_r+0xf10>
 800787c:	d8c02517 	ldw	r3,148(sp)
 8007880:	d8001b15 	stw	zero,108(sp)
 8007884:	d829883a 	mov	r20,sp
 8007888:	1c07883a 	add	r3,r3,r16
 800788c:	d8c02515 	stw	r3,148(sp)
 8007890:	a8800007 	ldb	r2,0(r21)
 8007894:	1002a126 	beq	r2,zero,800831c <___vfiprintf_internal_r+0xbd0>
 8007898:	a8800044 	addi	r2,r21,1
 800789c:	a9800047 	ldb	r6,1(r21)
 80078a0:	d8001d85 	stb	zero,118(sp)
 80078a4:	d8002005 	stb	zero,128(sp)
 80078a8:	043fffc4 	movi	r16,-1
 80078ac:	d8002415 	stw	zero,144(sp)
 80078b0:	0025883a 	mov	r18,zero
 80078b4:	05401604 	movi	r21,88
 80078b8:	04c00244 	movi	r19,9
 80078bc:	15800044 	addi	r22,r2,1
 80078c0:	30bff804 	addi	r2,r6,-32
 80078c4:	a8823d36 	bltu	r21,r2,80081bc <___vfiprintf_internal_r+0xa70>
 80078c8:	100490ba 	slli	r2,r2,2
 80078cc:	01020034 	movhi	r4,2048
 80078d0:	211e3804 	addi	r4,r4,30944
 80078d4:	1105883a 	add	r2,r2,r4
 80078d8:	10800017 	ldw	r2,0(r2)
 80078dc:	1000683a 	jmp	r2
 80078e0:	08007ffc 	xorhi	zero,at,511
 80078e4:	080081bc 	xorhi	zero,at,518
 80078e8:	080081bc 	xorhi	zero,at,518
 80078ec:	08008018 	cmpnei	zero,at,512
 80078f0:	080081bc 	xorhi	zero,at,518
 80078f4:	080081bc 	xorhi	zero,at,518
 80078f8:	080081bc 	xorhi	zero,at,518
 80078fc:	080081bc 	xorhi	zero,at,518
 8007900:	080081bc 	xorhi	zero,at,518
 8007904:	080081bc 	xorhi	zero,at,518
 8007908:	08008028 	cmpgeui	zero,at,512
 800790c:	08008050 	cmplti	zero,at,513
 8007910:	080081bc 	xorhi	zero,at,518
 8007914:	08007dd0 	cmplti	zero,at,503
 8007918:	08007f54 	ori	zero,at,509
 800791c:	080081bc 	xorhi	zero,at,518
 8007920:	08007ec4 	addi	zero,at,507
 8007924:	08007ed4 	ori	zero,at,507
 8007928:	08007ed4 	ori	zero,at,507
 800792c:	08007ed4 	ori	zero,at,507
 8007930:	08007ed4 	ori	zero,at,507
 8007934:	08007ed4 	ori	zero,at,507
 8007938:	08007ed4 	ori	zero,at,507
 800793c:	08007ed4 	ori	zero,at,507
 8007940:	08007ed4 	ori	zero,at,507
 8007944:	08007ed4 	ori	zero,at,507
 8007948:	080081bc 	xorhi	zero,at,518
 800794c:	080081bc 	xorhi	zero,at,518
 8007950:	080081bc 	xorhi	zero,at,518
 8007954:	080081bc 	xorhi	zero,at,518
 8007958:	080081bc 	xorhi	zero,at,518
 800795c:	080081bc 	xorhi	zero,at,518
 8007960:	080081bc 	xorhi	zero,at,518
 8007964:	080081bc 	xorhi	zero,at,518
 8007968:	080081bc 	xorhi	zero,at,518
 800796c:	080081bc 	xorhi	zero,at,518
 8007970:	08007f0c 	andi	zero,at,508
 8007974:	080081bc 	xorhi	zero,at,518
 8007978:	080081bc 	xorhi	zero,at,518
 800797c:	080081bc 	xorhi	zero,at,518
 8007980:	080081bc 	xorhi	zero,at,518
 8007984:	080081bc 	xorhi	zero,at,518
 8007988:	080081bc 	xorhi	zero,at,518
 800798c:	080081bc 	xorhi	zero,at,518
 8007990:	080081bc 	xorhi	zero,at,518
 8007994:	080081bc 	xorhi	zero,at,518
 8007998:	080081bc 	xorhi	zero,at,518
 800799c:	08007a8c 	andi	zero,at,490
 80079a0:	080081bc 	xorhi	zero,at,518
 80079a4:	080081bc 	xorhi	zero,at,518
 80079a8:	080081bc 	xorhi	zero,at,518
 80079ac:	080081bc 	xorhi	zero,at,518
 80079b0:	080081bc 	xorhi	zero,at,518
 80079b4:	08007a58 	cmpnei	zero,at,489
 80079b8:	080081bc 	xorhi	zero,at,518
 80079bc:	080081bc 	xorhi	zero,at,518
 80079c0:	08007e40 	call	8007e4 <__alt_mem_onchip_memory2_0+0x8007e4>
 80079c4:	080081bc 	xorhi	zero,at,518
 80079c8:	080081bc 	xorhi	zero,at,518
 80079cc:	080081bc 	xorhi	zero,at,518
 80079d0:	080081bc 	xorhi	zero,at,518
 80079d4:	080081bc 	xorhi	zero,at,518
 80079d8:	080081bc 	xorhi	zero,at,518
 80079dc:	080081bc 	xorhi	zero,at,518
 80079e0:	080081bc 	xorhi	zero,at,518
 80079e4:	080081bc 	xorhi	zero,at,518
 80079e8:	080081bc 	xorhi	zero,at,518
 80079ec:	08007e98 	cmpnei	zero,at,506
 80079f0:	08008064 	muli	zero,at,513
 80079f4:	080081bc 	xorhi	zero,at,518
 80079f8:	080081bc 	xorhi	zero,at,518
 80079fc:	080081bc 	xorhi	zero,at,518
 8007a00:	08008120 	cmpeqi	zero,at,516
 8007a04:	08008064 	muli	zero,at,513
 8007a08:	080081bc 	xorhi	zero,at,518
 8007a0c:	080081bc 	xorhi	zero,at,518
 8007a10:	08008130 	cmpltui	zero,at,516
 8007a14:	080081bc 	xorhi	zero,at,518
 8007a18:	08007fa4 	muli	zero,at,510
 8007a1c:	08007a90 	cmplti	zero,at,490
 8007a20:	08008148 	cmpgei	zero,at,517
 8007a24:	08008188 	cmpgei	zero,at,518
 8007a28:	080081bc 	xorhi	zero,at,518
 8007a2c:	0800809c 	xori	zero,at,514
 8007a30:	080081bc 	xorhi	zero,at,518
 8007a34:	08007a5c 	xori	zero,at,489
 8007a38:	080081bc 	xorhi	zero,at,518
 8007a3c:	080081bc 	xorhi	zero,at,518
 8007a40:	080080e4 	muli	zero,at,515
 8007a44:	a5000204 	addi	r20,r20,8
 8007a48:	d8c02517 	ldw	r3,148(sp)
 8007a4c:	1c07883a 	add	r3,r3,r16
 8007a50:	d8c02515 	stw	r3,148(sp)
 8007a54:	003f8e06 	br	8007890 <___vfiprintf_internal_r+0x144>
 8007a58:	94800414 	ori	r18,r18,16
 8007a5c:	9080080c 	andi	r2,r18,32
 8007a60:	1001cd1e 	bne	r2,zero,8008198 <___vfiprintf_internal_r+0xa4c>
 8007a64:	9080040c 	andi	r2,r18,16
 8007a68:	10034e26 	beq	r2,zero,80087a4 <___vfiprintf_internal_r+0x1058>
 8007a6c:	d9002317 	ldw	r4,140(sp)
 8007a70:	002f883a 	mov	r23,zero
 8007a74:	00800044 	movi	r2,1
 8007a78:	24c00017 	ldw	r19,0(r4)
 8007a7c:	21000104 	addi	r4,r4,4
 8007a80:	d9002315 	stw	r4,140(sp)
 8007a84:	9807883a 	mov	r3,r19
 8007a88:	00000c06 	br	8007abc <___vfiprintf_internal_r+0x370>
 8007a8c:	94800414 	ori	r18,r18,16
 8007a90:	9080080c 	andi	r2,r18,32
 8007a94:	1001501e 	bne	r2,zero,8007fd8 <___vfiprintf_internal_r+0x88c>
 8007a98:	9080040c 	andi	r2,r18,16
 8007a9c:	10033726 	beq	r2,zero,800877c <___vfiprintf_internal_r+0x1030>
 8007aa0:	d9002317 	ldw	r4,140(sp)
 8007aa4:	002f883a 	mov	r23,zero
 8007aa8:	0005883a 	mov	r2,zero
 8007aac:	24c00017 	ldw	r19,0(r4)
 8007ab0:	21000104 	addi	r4,r4,4
 8007ab4:	d9002315 	stw	r4,140(sp)
 8007ab8:	9807883a 	mov	r3,r19
 8007abc:	d8001d85 	stb	zero,118(sp)
 8007ac0:	dc002015 	stw	r16,128(sp)
 8007ac4:	0015883a 	mov	r10,zero
 8007ac8:	80000216 	blt	r16,zero,8007ad4 <___vfiprintf_internal_r+0x388>
 8007acc:	013fdfc4 	movi	r4,-129
 8007ad0:	9124703a 	and	r18,r18,r4
 8007ad4:	1801ec1e 	bne	r3,zero,8008288 <___vfiprintf_internal_r+0xb3c>
 8007ad8:	8002b826 	beq	r16,zero,80085bc <___vfiprintf_internal_r+0xe70>
 8007adc:	10803fcc 	andi	r2,r2,255
 8007ae0:	00c00044 	movi	r3,1
 8007ae4:	10c20726 	beq	r2,r3,8008304 <___vfiprintf_internal_r+0xbb8>
 8007ae8:	00c00084 	movi	r3,2
 8007aec:	df001a04 	addi	fp,sp,104
 8007af0:	10c0bb1e 	bne	r2,r3,8007de0 <___vfiprintf_internal_r+0x694>
 8007af4:	d9002717 	ldw	r4,156(sp)
 8007af8:	988003cc 	andi	r2,r19,15
 8007afc:	b806973a 	slli	r3,r23,28
 8007b00:	2085883a 	add	r2,r4,r2
 8007b04:	9826d13a 	srli	r19,r19,4
 8007b08:	10800003 	ldbu	r2,0(r2)
 8007b0c:	b82ed13a 	srli	r23,r23,4
 8007b10:	e73fffc4 	addi	fp,fp,-1
 8007b14:	1ce6b03a 	or	r19,r3,r19
 8007b18:	e0800005 	stb	r2,0(fp)
 8007b1c:	9dc4b03a 	or	r2,r19,r23
 8007b20:	103ff51e 	bne	r2,zero,8007af8 <___vfiprintf_internal_r+0x3ac>
 8007b24:	d8c01e17 	ldw	r3,120(sp)
 8007b28:	1f07c83a 	sub	r3,r3,fp
 8007b2c:	d8c02015 	stw	r3,128(sp)
 8007b30:	dd402017 	ldw	r21,128(sp)
 8007b34:	ac00010e 	bge	r21,r16,8007b3c <___vfiprintf_internal_r+0x3f0>
 8007b38:	802b883a 	mov	r21,r16
 8007b3c:	52803fcc 	andi	r10,r10,255
 8007b40:	5280201c 	xori	r10,r10,128
 8007b44:	52bfe004 	addi	r10,r10,-128
 8007b48:	50000126 	beq	r10,zero,8007b50 <___vfiprintf_internal_r+0x404>
 8007b4c:	ad400044 	addi	r21,r21,1
 8007b50:	91c0008c 	andi	r7,r18,2
 8007b54:	38000126 	beq	r7,zero,8007b5c <___vfiprintf_internal_r+0x410>
 8007b58:	ad400084 	addi	r21,r21,2
 8007b5c:	95c0210c 	andi	r23,r18,132
 8007b60:	b801ad1e 	bne	r23,zero,8008218 <___vfiprintf_internal_r+0xacc>
 8007b64:	d9002417 	ldw	r4,144(sp)
 8007b68:	2567c83a 	sub	r19,r4,r21
 8007b6c:	04c1aa0e 	bge	zero,r19,8008218 <___vfiprintf_internal_r+0xacc>
 8007b70:	00c00404 	movi	r3,16
 8007b74:	d8801c17 	ldw	r2,112(sp)
 8007b78:	1cc37f0e 	bge	r3,r19,8008978 <___vfiprintf_internal_r+0x122c>
 8007b7c:	01020074 	movhi	r4,2049
 8007b80:	21007404 	addi	r4,r4,464
 8007b84:	dc002915 	stw	r16,164(sp)
 8007b88:	d9801b17 	ldw	r6,108(sp)
 8007b8c:	9821883a 	mov	r16,r19
 8007b90:	d9002615 	stw	r4,152(sp)
 8007b94:	02c001c4 	movi	r11,7
 8007b98:	3827883a 	mov	r19,r7
 8007b9c:	00000506 	br	8007bb4 <___vfiprintf_internal_r+0x468>
 8007ba0:	31400084 	addi	r5,r6,2
 8007ba4:	a5000204 	addi	r20,r20,8
 8007ba8:	200d883a 	mov	r6,r4
 8007bac:	843ffc04 	addi	r16,r16,-16
 8007bb0:	1c000f0e 	bge	r3,r16,8007bf0 <___vfiprintf_internal_r+0x4a4>
 8007bb4:	01420074 	movhi	r5,2049
 8007bb8:	10800404 	addi	r2,r2,16
 8007bbc:	31000044 	addi	r4,r6,1
 8007bc0:	29407404 	addi	r5,r5,464
 8007bc4:	a1400015 	stw	r5,0(r20)
 8007bc8:	a0c00115 	stw	r3,4(r20)
 8007bcc:	d8801c15 	stw	r2,112(sp)
 8007bd0:	d9001b15 	stw	r4,108(sp)
 8007bd4:	593ff20e 	bge	r11,r4,8007ba0 <___vfiprintf_internal_r+0x454>
 8007bd8:	1001811e 	bne	r2,zero,80081e0 <___vfiprintf_internal_r+0xa94>
 8007bdc:	843ffc04 	addi	r16,r16,-16
 8007be0:	000d883a 	mov	r6,zero
 8007be4:	01400044 	movi	r5,1
 8007be8:	d829883a 	mov	r20,sp
 8007bec:	1c3ff116 	blt	r3,r16,8007bb4 <___vfiprintf_internal_r+0x468>
 8007bf0:	980f883a 	mov	r7,r19
 8007bf4:	8027883a 	mov	r19,r16
 8007bf8:	dc002917 	ldw	r16,164(sp)
 8007bfc:	d8c02617 	ldw	r3,152(sp)
 8007c00:	9885883a 	add	r2,r19,r2
 8007c04:	a4c00115 	stw	r19,4(r20)
 8007c08:	a0c00015 	stw	r3,0(r20)
 8007c0c:	d8801c15 	stw	r2,112(sp)
 8007c10:	d9401b15 	stw	r5,108(sp)
 8007c14:	00c001c4 	movi	r3,7
 8007c18:	19427416 	blt	r3,r5,80085ec <___vfiprintf_internal_r+0xea0>
 8007c1c:	d8c01d87 	ldb	r3,118(sp)
 8007c20:	a5000204 	addi	r20,r20,8
 8007c24:	29000044 	addi	r4,r5,1
 8007c28:	1801801e 	bne	r3,zero,800822c <___vfiprintf_internal_r+0xae0>
 8007c2c:	38000c26 	beq	r7,zero,8007c60 <___vfiprintf_internal_r+0x514>
 8007c30:	d8c01d04 	addi	r3,sp,116
 8007c34:	10800084 	addi	r2,r2,2
 8007c38:	a0c00015 	stw	r3,0(r20)
 8007c3c:	00c00084 	movi	r3,2
 8007c40:	a0c00115 	stw	r3,4(r20)
 8007c44:	d8801c15 	stw	r2,112(sp)
 8007c48:	d9001b15 	stw	r4,108(sp)
 8007c4c:	00c001c4 	movi	r3,7
 8007c50:	19025516 	blt	r3,r4,80085a8 <___vfiprintf_internal_r+0xe5c>
 8007c54:	200b883a 	mov	r5,r4
 8007c58:	a5000204 	addi	r20,r20,8
 8007c5c:	21000044 	addi	r4,r4,1
 8007c60:	00c02004 	movi	r3,128
 8007c64:	b8c21326 	beq	r23,r3,80084b4 <___vfiprintf_internal_r+0xd68>
 8007c68:	d8c02017 	ldw	r3,128(sp)
 8007c6c:	80e1c83a 	sub	r16,r16,r3
 8007c70:	0400230e 	bge	zero,r16,8007d00 <___vfiprintf_internal_r+0x5b4>
 8007c74:	04c00404 	movi	r19,16
 8007c78:	9c03240e 	bge	r19,r16,800890c <___vfiprintf_internal_r+0x11c0>
 8007c7c:	00c20074 	movhi	r3,2049
 8007c80:	18c07004 	addi	r3,r3,448
 8007c84:	d8c02615 	stw	r3,152(sp)
 8007c88:	05c001c4 	movi	r23,7
 8007c8c:	00000506 	br	8007ca4 <___vfiprintf_internal_r+0x558>
 8007c90:	29000084 	addi	r4,r5,2
 8007c94:	a5000204 	addi	r20,r20,8
 8007c98:	180b883a 	mov	r5,r3
 8007c9c:	843ffc04 	addi	r16,r16,-16
 8007ca0:	9c000d0e 	bge	r19,r16,8007cd8 <___vfiprintf_internal_r+0x58c>
 8007ca4:	10800404 	addi	r2,r2,16
 8007ca8:	28c00044 	addi	r3,r5,1
 8007cac:	a4400015 	stw	r17,0(r20)
 8007cb0:	a4c00115 	stw	r19,4(r20)
 8007cb4:	d8801c15 	stw	r2,112(sp)
 8007cb8:	d8c01b15 	stw	r3,108(sp)
 8007cbc:	b8fff40e 	bge	r23,r3,8007c90 <___vfiprintf_internal_r+0x544>
 8007cc0:	1001671e 	bne	r2,zero,8008260 <___vfiprintf_internal_r+0xb14>
 8007cc4:	843ffc04 	addi	r16,r16,-16
 8007cc8:	01000044 	movi	r4,1
 8007ccc:	000b883a 	mov	r5,zero
 8007cd0:	d829883a 	mov	r20,sp
 8007cd4:	9c3ff316 	blt	r19,r16,8007ca4 <___vfiprintf_internal_r+0x558>
 8007cd8:	d8c02617 	ldw	r3,152(sp)
 8007cdc:	1405883a 	add	r2,r2,r16
 8007ce0:	a4000115 	stw	r16,4(r20)
 8007ce4:	a0c00015 	stw	r3,0(r20)
 8007ce8:	d8801c15 	stw	r2,112(sp)
 8007cec:	d9001b15 	stw	r4,108(sp)
 8007cf0:	00c001c4 	movi	r3,7
 8007cf4:	19019516 	blt	r3,r4,800834c <___vfiprintf_internal_r+0xc00>
 8007cf8:	a5000204 	addi	r20,r20,8
 8007cfc:	21000044 	addi	r4,r4,1
 8007d00:	d8c02017 	ldw	r3,128(sp)
 8007d04:	a7000015 	stw	fp,0(r20)
 8007d08:	d9001b15 	stw	r4,108(sp)
 8007d0c:	10c5883a 	add	r2,r2,r3
 8007d10:	a0c00115 	stw	r3,4(r20)
 8007d14:	d8801c15 	stw	r2,112(sp)
 8007d18:	00c001c4 	movi	r3,7
 8007d1c:	1901930e 	bge	r3,r4,800836c <___vfiprintf_internal_r+0xc20>
 8007d20:	1002431e 	bne	r2,zero,8008630 <___vfiprintf_internal_r+0xee4>
 8007d24:	d8001b15 	stw	zero,108(sp)
 8007d28:	9480010c 	andi	r18,r18,4
 8007d2c:	9002391e 	bne	r18,zero,8008614 <___vfiprintf_internal_r+0xec8>
 8007d30:	d8802417 	ldw	r2,144(sp)
 8007d34:	a880010e 	bge	r21,r2,8007d3c <___vfiprintf_internal_r+0x5f0>
 8007d38:	102b883a 	mov	r21,r2
 8007d3c:	d8c02517 	ldw	r3,148(sp)
 8007d40:	1d47883a 	add	r3,r3,r21
 8007d44:	d8c02515 	stw	r3,148(sp)
 8007d48:	0001cd06 	br	8008480 <___vfiprintf_internal_r+0xd34>
 8007d4c:	d9002217 	ldw	r4,136(sp)
 8007d50:	d9402117 	ldw	r5,132(sp)
 8007d54:	8002e940 	call	8002e94 <__swsetup_r>
 8007d58:	10000e1e 	bne	r2,zero,8007d94 <___vfiprintf_internal_r+0x648>
 8007d5c:	d9402117 	ldw	r5,132(sp)
 8007d60:	00c00284 	movi	r3,10
 8007d64:	2880030b 	ldhu	r2,12(r5)
 8007d68:	1080068c 	andi	r2,r2,26
 8007d6c:	10fe9c1e 	bne	r2,r3,80077e0 <___vfiprintf_internal_r+0x94>
 8007d70:	d8c02117 	ldw	r3,132(sp)
 8007d74:	1880038f 	ldh	r2,14(r3)
 8007d78:	103e9916 	blt	r2,zero,80077e0 <___vfiprintf_internal_r+0x94>
 8007d7c:	d9002217 	ldw	r4,136(sp)
 8007d80:	d9c02317 	ldw	r7,140(sp)
 8007d84:	180b883a 	mov	r5,r3
 8007d88:	980d883a 	mov	r6,r19
 8007d8c:	8008a600 	call	8008a60 <__sbprintf>
 8007d90:	00000106 	br	8007d98 <___vfiprintf_internal_r+0x64c>
 8007d94:	00bfffc4 	movi	r2,-1
 8007d98:	dfc03517 	ldw	ra,212(sp)
 8007d9c:	df003417 	ldw	fp,208(sp)
 8007da0:	ddc03317 	ldw	r23,204(sp)
 8007da4:	dd803217 	ldw	r22,200(sp)
 8007da8:	dd403117 	ldw	r21,196(sp)
 8007dac:	dd003017 	ldw	r20,192(sp)
 8007db0:	dcc02f17 	ldw	r19,188(sp)
 8007db4:	dc802e17 	ldw	r18,184(sp)
 8007db8:	dc402d17 	ldw	r17,180(sp)
 8007dbc:	dc002c17 	ldw	r16,176(sp)
 8007dc0:	dec03604 	addi	sp,sp,216
 8007dc4:	f800283a 	ret
 8007dc8:	8004f2c0 	call	8004f2c <__sinit>
 8007dcc:	003e7106 	br	8007794 <___vfiprintf_internal_r+0x48>
 8007dd0:	b005883a 	mov	r2,r22
 8007dd4:	94800114 	ori	r18,r18,4
 8007dd8:	b1800007 	ldb	r6,0(r22)
 8007ddc:	003eb706 	br	80078bc <___vfiprintf_internal_r+0x170>
 8007de0:	9806d0fa 	srli	r3,r19,3
 8007de4:	b808977a 	slli	r4,r23,29
 8007de8:	b82ed0fa 	srli	r23,r23,3
 8007dec:	9cc001cc 	andi	r19,r19,7
 8007df0:	98800c04 	addi	r2,r19,48
 8007df4:	e73fffc4 	addi	fp,fp,-1
 8007df8:	20e6b03a 	or	r19,r4,r3
 8007dfc:	e0800005 	stb	r2,0(fp)
 8007e00:	9dc6b03a 	or	r3,r19,r23
 8007e04:	183ff61e 	bne	r3,zero,8007de0 <___vfiprintf_internal_r+0x694>
 8007e08:	90c0004c 	andi	r3,r18,1
 8007e0c:	e009883a 	mov	r4,fp
 8007e10:	183f4426 	beq	r3,zero,8007b24 <___vfiprintf_internal_r+0x3d8>
 8007e14:	10803fcc 	andi	r2,r2,255
 8007e18:	1080201c 	xori	r2,r2,128
 8007e1c:	10bfe004 	addi	r2,r2,-128
 8007e20:	00c00c04 	movi	r3,48
 8007e24:	10ff3f26 	beq	r2,r3,8007b24 <___vfiprintf_internal_r+0x3d8>
 8007e28:	20ffffc5 	stb	r3,-1(r4)
 8007e2c:	d8c01e17 	ldw	r3,120(sp)
 8007e30:	e73fffc4 	addi	fp,fp,-1
 8007e34:	1f07c83a 	sub	r3,r3,fp
 8007e38:	d8c02015 	stw	r3,128(sp)
 8007e3c:	003f3c06 	br	8007b30 <___vfiprintf_internal_r+0x3e4>
 8007e40:	d8c02003 	ldbu	r3,128(sp)
 8007e44:	01020074 	movhi	r4,2049
 8007e48:	21000a04 	addi	r4,r4,40
 8007e4c:	d8c01d85 	stb	r3,118(sp)
 8007e50:	d9002715 	stw	r4,156(sp)
 8007e54:	9080080c 	andi	r2,r18,32
 8007e58:	1000a926 	beq	r2,zero,8008100 <___vfiprintf_internal_r+0x9b4>
 8007e5c:	d9002317 	ldw	r4,140(sp)
 8007e60:	24c00017 	ldw	r19,0(r4)
 8007e64:	25c00117 	ldw	r23,4(r4)
 8007e68:	21000204 	addi	r4,r4,8
 8007e6c:	d9002315 	stw	r4,140(sp)
 8007e70:	9080004c 	andi	r2,r18,1
 8007e74:	1001f626 	beq	r2,zero,8008650 <___vfiprintf_internal_r+0xf04>
 8007e78:	9dc6b03a 	or	r3,r19,r23
 8007e7c:	18023d26 	beq	r3,zero,8008774 <___vfiprintf_internal_r+0x1028>
 8007e80:	00800c04 	movi	r2,48
 8007e84:	d8801d05 	stb	r2,116(sp)
 8007e88:	d9801d45 	stb	r6,117(sp)
 8007e8c:	94800094 	ori	r18,r18,2
 8007e90:	00800084 	movi	r2,2
 8007e94:	003f0906 	br	8007abc <___vfiprintf_internal_r+0x370>
 8007e98:	d9002317 	ldw	r4,140(sp)
 8007e9c:	05400044 	movi	r21,1
 8007ea0:	d8001d85 	stb	zero,118(sp)
 8007ea4:	20800017 	ldw	r2,0(r4)
 8007ea8:	21000104 	addi	r4,r4,4
 8007eac:	d9002315 	stw	r4,140(sp)
 8007eb0:	d8801005 	stb	r2,64(sp)
 8007eb4:	dd402015 	stw	r21,128(sp)
 8007eb8:	df001004 	addi	fp,sp,64
 8007ebc:	0021883a 	mov	r16,zero
 8007ec0:	003f2306 	br	8007b50 <___vfiprintf_internal_r+0x404>
 8007ec4:	94802014 	ori	r18,r18,128
 8007ec8:	b005883a 	mov	r2,r22
 8007ecc:	b1800007 	ldb	r6,0(r22)
 8007ed0:	003e7a06 	br	80078bc <___vfiprintf_internal_r+0x170>
 8007ed4:	b039883a 	mov	fp,r22
 8007ed8:	d8002415 	stw	zero,144(sp)
 8007edc:	35fff404 	addi	r23,r6,-48
 8007ee0:	0009883a 	mov	r4,zero
 8007ee4:	01400284 	movi	r5,10
 8007ee8:	80005f80 	call	80005f8 <__mulsi3>
 8007eec:	e1800007 	ldb	r6,0(fp)
 8007ef0:	15c9883a 	add	r4,r2,r23
 8007ef4:	b5800044 	addi	r22,r22,1
 8007ef8:	35fff404 	addi	r23,r6,-48
 8007efc:	b039883a 	mov	fp,r22
 8007f00:	9dfff82e 	bgeu	r19,r23,8007ee4 <___vfiprintf_internal_r+0x798>
 8007f04:	d9002415 	stw	r4,144(sp)
 8007f08:	003e6d06 	br	80078c0 <___vfiprintf_internal_r+0x174>
 8007f0c:	d8c02003 	ldbu	r3,128(sp)
 8007f10:	94800414 	ori	r18,r18,16
 8007f14:	9080080c 	andi	r2,r18,32
 8007f18:	d8c01d85 	stb	r3,118(sp)
 8007f1c:	d8c02317 	ldw	r3,140(sp)
 8007f20:	10005526 	beq	r2,zero,8008078 <___vfiprintf_internal_r+0x92c>
 8007f24:	d9002317 	ldw	r4,140(sp)
 8007f28:	18800117 	ldw	r2,4(r3)
 8007f2c:	1cc00017 	ldw	r19,0(r3)
 8007f30:	21000204 	addi	r4,r4,8
 8007f34:	d9002315 	stw	r4,140(sp)
 8007f38:	102f883a 	mov	r23,r2
 8007f3c:	1001f716 	blt	r2,zero,800871c <___vfiprintf_internal_r+0xfd0>
 8007f40:	da801d83 	ldbu	r10,118(sp)
 8007f44:	dc002015 	stw	r16,128(sp)
 8007f48:	00800044 	movi	r2,1
 8007f4c:	9dc6b03a 	or	r3,r19,r23
 8007f50:	003edd06 	br	8007ac8 <___vfiprintf_internal_r+0x37c>
 8007f54:	b1800007 	ldb	r6,0(r22)
 8007f58:	01000a84 	movi	r4,42
 8007f5c:	b0800044 	addi	r2,r22,1
 8007f60:	3102ae26 	beq	r6,r4,8008a1c <___vfiprintf_internal_r+0x12d0>
 8007f64:	35fff404 	addi	r23,r6,-48
 8007f68:	102d883a 	mov	r22,r2
 8007f6c:	0021883a 	mov	r16,zero
 8007f70:	9dfe5336 	bltu	r19,r23,80078c0 <___vfiprintf_internal_r+0x174>
 8007f74:	0009883a 	mov	r4,zero
 8007f78:	01400284 	movi	r5,10
 8007f7c:	80005f80 	call	80005f8 <__mulsi3>
 8007f80:	b1800007 	ldb	r6,0(r22)
 8007f84:	b889883a 	add	r4,r23,r2
 8007f88:	b5800044 	addi	r22,r22,1
 8007f8c:	35fff404 	addi	r23,r6,-48
 8007f90:	9dfff92e 	bgeu	r19,r23,8007f78 <___vfiprintf_internal_r+0x82c>
 8007f94:	2021883a 	mov	r16,r4
 8007f98:	203e490e 	bge	r4,zero,80078c0 <___vfiprintf_internal_r+0x174>
 8007f9c:	043fffc4 	movi	r16,-1
 8007fa0:	003e4706 	br	80078c0 <___vfiprintf_internal_r+0x174>
 8007fa4:	d8c02003 	ldbu	r3,128(sp)
 8007fa8:	9080080c 	andi	r2,r18,32
 8007fac:	d8c01d85 	stb	r3,118(sp)
 8007fb0:	10020e26 	beq	r2,zero,80087ec <___vfiprintf_internal_r+0x10a0>
 8007fb4:	d9002317 	ldw	r4,140(sp)
 8007fb8:	d9402517 	ldw	r5,148(sp)
 8007fbc:	20800017 	ldw	r2,0(r4)
 8007fc0:	2807d7fa 	srai	r3,r5,31
 8007fc4:	21000104 	addi	r4,r4,4
 8007fc8:	d9002315 	stw	r4,140(sp)
 8007fcc:	11400015 	stw	r5,0(r2)
 8007fd0:	10c00115 	stw	r3,4(r2)
 8007fd4:	003e1106 	br	800781c <___vfiprintf_internal_r+0xd0>
 8007fd8:	d8802317 	ldw	r2,140(sp)
 8007fdc:	d8c02317 	ldw	r3,140(sp)
 8007fe0:	14c00017 	ldw	r19,0(r2)
 8007fe4:	15c00117 	ldw	r23,4(r2)
 8007fe8:	18c00204 	addi	r3,r3,8
 8007fec:	d8c02315 	stw	r3,140(sp)
 8007ff0:	0005883a 	mov	r2,zero
 8007ff4:	9dc6b03a 	or	r3,r19,r23
 8007ff8:	003eb006 	br	8007abc <___vfiprintf_internal_r+0x370>
 8007ffc:	d8802007 	ldb	r2,128(sp)
 8008000:	1001d91e 	bne	r2,zero,8008768 <___vfiprintf_internal_r+0x101c>
 8008004:	00c00804 	movi	r3,32
 8008008:	d8c02005 	stb	r3,128(sp)
 800800c:	b005883a 	mov	r2,r22
 8008010:	b1800007 	ldb	r6,0(r22)
 8008014:	003e2906 	br	80078bc <___vfiprintf_internal_r+0x170>
 8008018:	94800054 	ori	r18,r18,1
 800801c:	b005883a 	mov	r2,r22
 8008020:	b1800007 	ldb	r6,0(r22)
 8008024:	003e2506 	br	80078bc <___vfiprintf_internal_r+0x170>
 8008028:	d9002317 	ldw	r4,140(sp)
 800802c:	d9402317 	ldw	r5,140(sp)
 8008030:	21000017 	ldw	r4,0(r4)
 8008034:	28c00104 	addi	r3,r5,4
 8008038:	d9002415 	stw	r4,144(sp)
 800803c:	20023b16 	blt	r4,zero,800892c <___vfiprintf_internal_r+0x11e0>
 8008040:	d8c02315 	stw	r3,140(sp)
 8008044:	b005883a 	mov	r2,r22
 8008048:	b1800007 	ldb	r6,0(r22)
 800804c:	003e1b06 	br	80078bc <___vfiprintf_internal_r+0x170>
 8008050:	00c00ac4 	movi	r3,43
 8008054:	d8c02005 	stb	r3,128(sp)
 8008058:	b005883a 	mov	r2,r22
 800805c:	b1800007 	ldb	r6,0(r22)
 8008060:	003e1606 	br	80078bc <___vfiprintf_internal_r+0x170>
 8008064:	d8c02003 	ldbu	r3,128(sp)
 8008068:	9080080c 	andi	r2,r18,32
 800806c:	d8c01d85 	stb	r3,118(sp)
 8008070:	d8c02317 	ldw	r3,140(sp)
 8008074:	103fab1e 	bne	r2,zero,8007f24 <___vfiprintf_internal_r+0x7d8>
 8008078:	9080040c 	andi	r2,r18,16
 800807c:	1001e626 	beq	r2,zero,8008818 <___vfiprintf_internal_r+0x10cc>
 8008080:	1cc00017 	ldw	r19,0(r3)
 8008084:	d9402317 	ldw	r5,140(sp)
 8008088:	982fd7fa 	srai	r23,r19,31
 800808c:	29400104 	addi	r5,r5,4
 8008090:	d9402315 	stw	r5,140(sp)
 8008094:	b805883a 	mov	r2,r23
 8008098:	003fa806 	br	8007f3c <___vfiprintf_internal_r+0x7f0>
 800809c:	d9402317 	ldw	r5,140(sp)
 80080a0:	d8001d85 	stb	zero,118(sp)
 80080a4:	2f000017 	ldw	fp,0(r5)
 80080a8:	2cc00104 	addi	r19,r5,4
 80080ac:	e0023826 	beq	fp,zero,8008990 <___vfiprintf_internal_r+0x1244>
 80080b0:	e009883a 	mov	r4,fp
 80080b4:	80022316 	blt	r16,zero,8008944 <___vfiprintf_internal_r+0x11f8>
 80080b8:	000b883a 	mov	r5,zero
 80080bc:	800d883a 	mov	r6,r16
 80080c0:	8005f580 	call	8005f58 <memchr>
 80080c4:	10024e26 	beq	r2,zero,8008a00 <___vfiprintf_internal_r+0x12b4>
 80080c8:	1705c83a 	sub	r2,r2,fp
 80080cc:	d8802015 	stw	r2,128(sp)
 80080d0:	8081e816 	blt	r16,r2,8008874 <___vfiprintf_internal_r+0x1128>
 80080d4:	da801d83 	ldbu	r10,118(sp)
 80080d8:	dcc02315 	stw	r19,140(sp)
 80080dc:	0021883a 	mov	r16,zero
 80080e0:	003e9306 	br	8007b30 <___vfiprintf_internal_r+0x3e4>
 80080e4:	00c20074 	movhi	r3,2049
 80080e8:	18c00f04 	addi	r3,r3,60
 80080ec:	d8c02715 	stw	r3,156(sp)
 80080f0:	d8c02003 	ldbu	r3,128(sp)
 80080f4:	9080080c 	andi	r2,r18,32
 80080f8:	d8c01d85 	stb	r3,118(sp)
 80080fc:	103f571e 	bne	r2,zero,8007e5c <___vfiprintf_internal_r+0x710>
 8008100:	9080040c 	andi	r2,r18,16
 8008104:	1001b126 	beq	r2,zero,80087cc <___vfiprintf_internal_r+0x1080>
 8008108:	d9402317 	ldw	r5,140(sp)
 800810c:	002f883a 	mov	r23,zero
 8008110:	2cc00017 	ldw	r19,0(r5)
 8008114:	29400104 	addi	r5,r5,4
 8008118:	d9402315 	stw	r5,140(sp)
 800811c:	003f5406 	br	8007e70 <___vfiprintf_internal_r+0x724>
 8008120:	94801014 	ori	r18,r18,64
 8008124:	b005883a 	mov	r2,r22
 8008128:	b1800007 	ldb	r6,0(r22)
 800812c:	003de306 	br	80078bc <___vfiprintf_internal_r+0x170>
 8008130:	b1800007 	ldb	r6,0(r22)
 8008134:	00c01b04 	movi	r3,108
 8008138:	b005883a 	mov	r2,r22
 800813c:	30c1f726 	beq	r6,r3,800891c <___vfiprintf_internal_r+0x11d0>
 8008140:	94800414 	ori	r18,r18,16
 8008144:	003ddd06 	br	80078bc <___vfiprintf_internal_r+0x170>
 8008148:	d8c02317 	ldw	r3,140(sp)
 800814c:	00800c04 	movi	r2,48
 8008150:	01020074 	movhi	r4,2049
 8008154:	1cc00017 	ldw	r19,0(r3)
 8008158:	d8801d05 	stb	r2,116(sp)
 800815c:	18c00104 	addi	r3,r3,4
 8008160:	00801e04 	movi	r2,120
 8008164:	21000f04 	addi	r4,r4,60
 8008168:	d8801d45 	stb	r2,117(sp)
 800816c:	d8c02315 	stw	r3,140(sp)
 8008170:	002f883a 	mov	r23,zero
 8008174:	94800094 	ori	r18,r18,2
 8008178:	d9002715 	stw	r4,156(sp)
 800817c:	00800084 	movi	r2,2
 8008180:	9807883a 	mov	r3,r19
 8008184:	003e4d06 	br	8007abc <___vfiprintf_internal_r+0x370>
 8008188:	94800814 	ori	r18,r18,32
 800818c:	b005883a 	mov	r2,r22
 8008190:	b1800007 	ldb	r6,0(r22)
 8008194:	003dc906 	br	80078bc <___vfiprintf_internal_r+0x170>
 8008198:	d8802317 	ldw	r2,140(sp)
 800819c:	d8c02317 	ldw	r3,140(sp)
 80081a0:	14c00017 	ldw	r19,0(r2)
 80081a4:	15c00117 	ldw	r23,4(r2)
 80081a8:	18c00204 	addi	r3,r3,8
 80081ac:	d8c02315 	stw	r3,140(sp)
 80081b0:	00800044 	movi	r2,1
 80081b4:	9dc6b03a 	or	r3,r19,r23
 80081b8:	003e4006 	br	8007abc <___vfiprintf_internal_r+0x370>
 80081bc:	d8c02003 	ldbu	r3,128(sp)
 80081c0:	d8c01d85 	stb	r3,118(sp)
 80081c4:	30005526 	beq	r6,zero,800831c <___vfiprintf_internal_r+0xbd0>
 80081c8:	05400044 	movi	r21,1
 80081cc:	d9801005 	stb	r6,64(sp)
 80081d0:	d8001d85 	stb	zero,118(sp)
 80081d4:	dd402015 	stw	r21,128(sp)
 80081d8:	df001004 	addi	fp,sp,64
 80081dc:	003f3706 	br	8007ebc <___vfiprintf_internal_r+0x770>
 80081e0:	d9002217 	ldw	r4,136(sp)
 80081e4:	d9402117 	ldw	r5,132(sp)
 80081e8:	d9801a04 	addi	r6,sp,104
 80081ec:	d8c02a15 	stw	r3,168(sp)
 80081f0:	dac02b15 	stw	r11,172(sp)
 80081f4:	80076380 	call	8007638 <__sprint_r.part.0>
 80081f8:	d8c02a17 	ldw	r3,168(sp)
 80081fc:	dac02b17 	ldw	r11,172(sp)
 8008200:	10004c1e 	bne	r2,zero,8008334 <___vfiprintf_internal_r+0xbe8>
 8008204:	d9801b17 	ldw	r6,108(sp)
 8008208:	d8801c17 	ldw	r2,112(sp)
 800820c:	d829883a 	mov	r20,sp
 8008210:	31400044 	addi	r5,r6,1
 8008214:	003e6506 	br	8007bac <___vfiprintf_internal_r+0x460>
 8008218:	d9401b17 	ldw	r5,108(sp)
 800821c:	d8801c17 	ldw	r2,112(sp)
 8008220:	29000044 	addi	r4,r5,1
 8008224:	d8c01d87 	ldb	r3,118(sp)
 8008228:	183e8026 	beq	r3,zero,8007c2c <___vfiprintf_internal_r+0x4e0>
 800822c:	00c00044 	movi	r3,1
 8008230:	d9401d84 	addi	r5,sp,118
 8008234:	10c5883a 	add	r2,r2,r3
 8008238:	a1400015 	stw	r5,0(r20)
 800823c:	a0c00115 	stw	r3,4(r20)
 8008240:	d8801c15 	stw	r2,112(sp)
 8008244:	d9001b15 	stw	r4,108(sp)
 8008248:	014001c4 	movi	r5,7
 800824c:	2900cd16 	blt	r5,r4,8008584 <___vfiprintf_internal_r+0xe38>
 8008250:	200b883a 	mov	r5,r4
 8008254:	a5000204 	addi	r20,r20,8
 8008258:	21000044 	addi	r4,r4,1
 800825c:	003e7306 	br	8007c2c <___vfiprintf_internal_r+0x4e0>
 8008260:	d9002217 	ldw	r4,136(sp)
 8008264:	d9402117 	ldw	r5,132(sp)
 8008268:	d9801a04 	addi	r6,sp,104
 800826c:	80076380 	call	8007638 <__sprint_r.part.0>
 8008270:	1000301e 	bne	r2,zero,8008334 <___vfiprintf_internal_r+0xbe8>
 8008274:	d9401b17 	ldw	r5,108(sp)
 8008278:	d8801c17 	ldw	r2,112(sp)
 800827c:	d829883a 	mov	r20,sp
 8008280:	29000044 	addi	r4,r5,1
 8008284:	003e8506 	br	8007c9c <___vfiprintf_internal_r+0x550>
 8008288:	10803fcc 	andi	r2,r2,255
 800828c:	00c00044 	movi	r3,1
 8008290:	10fe151e 	bne	r2,r3,8007ae8 <___vfiprintf_internal_r+0x39c>
 8008294:	b800021e 	bne	r23,zero,80082a0 <___vfiprintf_internal_r+0xb54>
 8008298:	00800244 	movi	r2,9
 800829c:	14c0192e 	bgeu	r2,r19,8008304 <___vfiprintf_internal_r+0xbb8>
 80082a0:	dd401a04 	addi	r21,sp,104
 80082a4:	5039883a 	mov	fp,r10
 80082a8:	9809883a 	mov	r4,r19
 80082ac:	b80b883a 	mov	r5,r23
 80082b0:	01800284 	movi	r6,10
 80082b4:	000f883a 	mov	r7,zero
 80082b8:	800a5f80 	call	800a5f8 <__umoddi3>
 80082bc:	10800c04 	addi	r2,r2,48
 80082c0:	ad7fffc4 	addi	r21,r21,-1
 80082c4:	9809883a 	mov	r4,r19
 80082c8:	b80b883a 	mov	r5,r23
 80082cc:	01800284 	movi	r6,10
 80082d0:	000f883a 	mov	r7,zero
 80082d4:	a8800005 	stb	r2,0(r21)
 80082d8:	8009fb80 	call	8009fb8 <__udivdi3>
 80082dc:	1027883a 	mov	r19,r2
 80082e0:	10c4b03a 	or	r2,r2,r3
 80082e4:	182f883a 	mov	r23,r3
 80082e8:	103fef1e 	bne	r2,zero,80082a8 <___vfiprintf_internal_r+0xb5c>
 80082ec:	d8c01e17 	ldw	r3,120(sp)
 80082f0:	e015883a 	mov	r10,fp
 80082f4:	a839883a 	mov	fp,r21
 80082f8:	1d47c83a 	sub	r3,r3,r21
 80082fc:	d8c02015 	stw	r3,128(sp)
 8008300:	003e0b06 	br	8007b30 <___vfiprintf_internal_r+0x3e4>
 8008304:	d9002817 	ldw	r4,160(sp)
 8008308:	9cc00c04 	addi	r19,r19,48
 800830c:	dcc019c5 	stb	r19,103(sp)
 8008310:	d9002015 	stw	r4,128(sp)
 8008314:	df0019c4 	addi	fp,sp,103
 8008318:	003e0506 	br	8007b30 <___vfiprintf_internal_r+0x3e4>
 800831c:	d8801c17 	ldw	r2,112(sp)
 8008320:	10000426 	beq	r2,zero,8008334 <___vfiprintf_internal_r+0xbe8>
 8008324:	d9002217 	ldw	r4,136(sp)
 8008328:	d9402117 	ldw	r5,132(sp)
 800832c:	d9801a04 	addi	r6,sp,104
 8008330:	80076380 	call	8007638 <__sprint_r.part.0>
 8008334:	d8c02117 	ldw	r3,132(sp)
 8008338:	1880030b 	ldhu	r2,12(r3)
 800833c:	1080100c 	andi	r2,r2,64
 8008340:	103e941e 	bne	r2,zero,8007d94 <___vfiprintf_internal_r+0x648>
 8008344:	d8802517 	ldw	r2,148(sp)
 8008348:	003e9306 	br	8007d98 <___vfiprintf_internal_r+0x64c>
 800834c:	1000e91e 	bne	r2,zero,80086f4 <___vfiprintf_internal_r+0xfa8>
 8008350:	d8802017 	ldw	r2,128(sp)
 8008354:	00c00044 	movi	r3,1
 8008358:	df000015 	stw	fp,0(sp)
 800835c:	d8800115 	stw	r2,4(sp)
 8008360:	d8801c15 	stw	r2,112(sp)
 8008364:	d8c01b15 	stw	r3,108(sp)
 8008368:	d829883a 	mov	r20,sp
 800836c:	a2000204 	addi	r8,r20,8
 8008370:	9480010c 	andi	r18,r18,4
 8008374:	90003626 	beq	r18,zero,8008450 <___vfiprintf_internal_r+0xd04>
 8008378:	d9002417 	ldw	r4,144(sp)
 800837c:	2565c83a 	sub	r18,r4,r21
 8008380:	0480330e 	bge	zero,r18,8008450 <___vfiprintf_internal_r+0xd04>
 8008384:	04000404 	movi	r16,16
 8008388:	84818b0e 	bge	r16,r18,80089b8 <___vfiprintf_internal_r+0x126c>
 800838c:	00c20074 	movhi	r3,2049
 8008390:	18c07404 	addi	r3,r3,464
 8008394:	d9001b17 	ldw	r4,108(sp)
 8008398:	d8c02615 	stw	r3,152(sp)
 800839c:	04c001c4 	movi	r19,7
 80083a0:	dd002217 	ldw	r20,136(sp)
 80083a4:	ddc02117 	ldw	r23,132(sp)
 80083a8:	00000506 	br	80083c0 <___vfiprintf_internal_r+0xc74>
 80083ac:	21400084 	addi	r5,r4,2
 80083b0:	42000204 	addi	r8,r8,8
 80083b4:	1809883a 	mov	r4,r3
 80083b8:	94bffc04 	addi	r18,r18,-16
 80083bc:	84800f0e 	bge	r16,r18,80083fc <___vfiprintf_internal_r+0xcb0>
 80083c0:	01420074 	movhi	r5,2049
 80083c4:	10800404 	addi	r2,r2,16
 80083c8:	20c00044 	addi	r3,r4,1
 80083cc:	29407404 	addi	r5,r5,464
 80083d0:	41400015 	stw	r5,0(r8)
 80083d4:	44000115 	stw	r16,4(r8)
 80083d8:	d8801c15 	stw	r2,112(sp)
 80083dc:	d8c01b15 	stw	r3,108(sp)
 80083e0:	98fff20e 	bge	r19,r3,80083ac <___vfiprintf_internal_r+0xc60>
 80083e4:	1000291e 	bne	r2,zero,800848c <___vfiprintf_internal_r+0xd40>
 80083e8:	94bffc04 	addi	r18,r18,-16
 80083ec:	01400044 	movi	r5,1
 80083f0:	0009883a 	mov	r4,zero
 80083f4:	d811883a 	mov	r8,sp
 80083f8:	84bff116 	blt	r16,r18,80083c0 <___vfiprintf_internal_r+0xc74>
 80083fc:	d8c02617 	ldw	r3,152(sp)
 8008400:	1485883a 	add	r2,r2,r18
 8008404:	44800115 	stw	r18,4(r8)
 8008408:	40c00015 	stw	r3,0(r8)
 800840c:	d8801c15 	stw	r2,112(sp)
 8008410:	d9401b15 	stw	r5,108(sp)
 8008414:	00c001c4 	movi	r3,7
 8008418:	19400d0e 	bge	r3,r5,8008450 <___vfiprintf_internal_r+0xd04>
 800841c:	1000061e 	bne	r2,zero,8008438 <___vfiprintf_internal_r+0xcec>
 8008420:	d9002417 	ldw	r4,144(sp)
 8008424:	a9011116 	blt	r21,r4,800886c <___vfiprintf_internal_r+0x1120>
 8008428:	d9402517 	ldw	r5,148(sp)
 800842c:	2d4b883a 	add	r5,r5,r21
 8008430:	d9402515 	stw	r5,148(sp)
 8008434:	00001206 	br	8008480 <___vfiprintf_internal_r+0xd34>
 8008438:	d9002217 	ldw	r4,136(sp)
 800843c:	d9402117 	ldw	r5,132(sp)
 8008440:	d9801a04 	addi	r6,sp,104
 8008444:	80076380 	call	8007638 <__sprint_r.part.0>
 8008448:	103fba1e 	bne	r2,zero,8008334 <___vfiprintf_internal_r+0xbe8>
 800844c:	d8801c17 	ldw	r2,112(sp)
 8008450:	d9002417 	ldw	r4,144(sp)
 8008454:	a900010e 	bge	r21,r4,800845c <___vfiprintf_internal_r+0xd10>
 8008458:	202b883a 	mov	r21,r4
 800845c:	d9402517 	ldw	r5,148(sp)
 8008460:	2d4b883a 	add	r5,r5,r21
 8008464:	d9402515 	stw	r5,148(sp)
 8008468:	10000526 	beq	r2,zero,8008480 <___vfiprintf_internal_r+0xd34>
 800846c:	d9002217 	ldw	r4,136(sp)
 8008470:	d9402117 	ldw	r5,132(sp)
 8008474:	d9801a04 	addi	r6,sp,104
 8008478:	80076380 	call	8007638 <__sprint_r.part.0>
 800847c:	103fad1e 	bne	r2,zero,8008334 <___vfiprintf_internal_r+0xbe8>
 8008480:	d8001b15 	stw	zero,108(sp)
 8008484:	d829883a 	mov	r20,sp
 8008488:	003ce406 	br	800781c <___vfiprintf_internal_r+0xd0>
 800848c:	a009883a 	mov	r4,r20
 8008490:	b80b883a 	mov	r5,r23
 8008494:	d9801a04 	addi	r6,sp,104
 8008498:	80076380 	call	8007638 <__sprint_r.part.0>
 800849c:	103fa51e 	bne	r2,zero,8008334 <___vfiprintf_internal_r+0xbe8>
 80084a0:	d9001b17 	ldw	r4,108(sp)
 80084a4:	d8801c17 	ldw	r2,112(sp)
 80084a8:	d811883a 	mov	r8,sp
 80084ac:	21400044 	addi	r5,r4,1
 80084b0:	003fc106 	br	80083b8 <___vfiprintf_internal_r+0xc6c>
 80084b4:	d8c02417 	ldw	r3,144(sp)
 80084b8:	1d6fc83a 	sub	r23,r3,r21
 80084bc:	05fdea0e 	bge	zero,r23,8007c68 <___vfiprintf_internal_r+0x51c>
 80084c0:	04c00404 	movi	r19,16
 80084c4:	9dc1490e 	bge	r19,r23,80089ec <___vfiprintf_internal_r+0x12a0>
 80084c8:	01020074 	movhi	r4,2049
 80084cc:	21007004 	addi	r4,r4,448
 80084d0:	d9002615 	stw	r4,152(sp)
 80084d4:	028001c4 	movi	r10,7
 80084d8:	00000506 	br	80084f0 <___vfiprintf_internal_r+0xda4>
 80084dc:	29800084 	addi	r6,r5,2
 80084e0:	a5000204 	addi	r20,r20,8
 80084e4:	180b883a 	mov	r5,r3
 80084e8:	bdfffc04 	addi	r23,r23,-16
 80084ec:	9dc00d0e 	bge	r19,r23,8008524 <___vfiprintf_internal_r+0xdd8>
 80084f0:	10800404 	addi	r2,r2,16
 80084f4:	28c00044 	addi	r3,r5,1
 80084f8:	a4400015 	stw	r17,0(r20)
 80084fc:	a4c00115 	stw	r19,4(r20)
 8008500:	d8801c15 	stw	r2,112(sp)
 8008504:	d8c01b15 	stw	r3,108(sp)
 8008508:	50fff40e 	bge	r10,r3,80084dc <___vfiprintf_internal_r+0xd90>
 800850c:	1000111e 	bne	r2,zero,8008554 <___vfiprintf_internal_r+0xe08>
 8008510:	bdfffc04 	addi	r23,r23,-16
 8008514:	01800044 	movi	r6,1
 8008518:	000b883a 	mov	r5,zero
 800851c:	d829883a 	mov	r20,sp
 8008520:	9dfff316 	blt	r19,r23,80084f0 <___vfiprintf_internal_r+0xda4>
 8008524:	d8c02617 	ldw	r3,152(sp)
 8008528:	15c5883a 	add	r2,r2,r23
 800852c:	a5c00115 	stw	r23,4(r20)
 8008530:	a0c00015 	stw	r3,0(r20)
 8008534:	d8801c15 	stw	r2,112(sp)
 8008538:	d9801b15 	stw	r6,108(sp)
 800853c:	00c001c4 	movi	r3,7
 8008540:	19806716 	blt	r3,r6,80086e0 <___vfiprintf_internal_r+0xf94>
 8008544:	a5000204 	addi	r20,r20,8
 8008548:	31000044 	addi	r4,r6,1
 800854c:	300b883a 	mov	r5,r6
 8008550:	003dc506 	br	8007c68 <___vfiprintf_internal_r+0x51c>
 8008554:	d9002217 	ldw	r4,136(sp)
 8008558:	d9402117 	ldw	r5,132(sp)
 800855c:	d9801a04 	addi	r6,sp,104
 8008560:	da802a15 	stw	r10,168(sp)
 8008564:	80076380 	call	8007638 <__sprint_r.part.0>
 8008568:	da802a17 	ldw	r10,168(sp)
 800856c:	103f711e 	bne	r2,zero,8008334 <___vfiprintf_internal_r+0xbe8>
 8008570:	d9401b17 	ldw	r5,108(sp)
 8008574:	d8801c17 	ldw	r2,112(sp)
 8008578:	d829883a 	mov	r20,sp
 800857c:	29800044 	addi	r6,r5,1
 8008580:	003fd906 	br	80084e8 <___vfiprintf_internal_r+0xd9c>
 8008584:	1000401e 	bne	r2,zero,8008688 <___vfiprintf_internal_r+0xf3c>
 8008588:	38003b26 	beq	r7,zero,8008678 <___vfiprintf_internal_r+0xf2c>
 800858c:	d9001d04 	addi	r4,sp,116
 8008590:	00800084 	movi	r2,2
 8008594:	d9000015 	stw	r4,0(sp)
 8008598:	d8800115 	stw	r2,4(sp)
 800859c:	1809883a 	mov	r4,r3
 80085a0:	d829883a 	mov	r20,sp
 80085a4:	003dab06 	br	8007c54 <___vfiprintf_internal_r+0x508>
 80085a8:	1000431e 	bne	r2,zero,80086b8 <___vfiprintf_internal_r+0xf6c>
 80085ac:	01000044 	movi	r4,1
 80085b0:	000b883a 	mov	r5,zero
 80085b4:	d829883a 	mov	r20,sp
 80085b8:	003da906 	br	8007c60 <___vfiprintf_internal_r+0x514>
 80085bc:	10803fcc 	andi	r2,r2,255
 80085c0:	1000081e 	bne	r2,zero,80085e4 <___vfiprintf_internal_r+0xe98>
 80085c4:	9080004c 	andi	r2,r18,1
 80085c8:	10000626 	beq	r2,zero,80085e4 <___vfiprintf_internal_r+0xe98>
 80085cc:	d9002817 	ldw	r4,160(sp)
 80085d0:	00800c04 	movi	r2,48
 80085d4:	d88019c5 	stb	r2,103(sp)
 80085d8:	d9002015 	stw	r4,128(sp)
 80085dc:	df0019c4 	addi	fp,sp,103
 80085e0:	003d5306 	br	8007b30 <___vfiprintf_internal_r+0x3e4>
 80085e4:	df001a04 	addi	fp,sp,104
 80085e8:	003d5106 	br	8007b30 <___vfiprintf_internal_r+0x3e4>
 80085ec:	1000931e 	bne	r2,zero,800883c <___vfiprintf_internal_r+0x10f0>
 80085f0:	d8c01d87 	ldb	r3,118(sp)
 80085f4:	18005326 	beq	r3,zero,8008744 <___vfiprintf_internal_r+0xff8>
 80085f8:	00800044 	movi	r2,1
 80085fc:	d8c01d84 	addi	r3,sp,118
 8008600:	1009883a 	mov	r4,r2
 8008604:	d8c00015 	stw	r3,0(sp)
 8008608:	d8800115 	stw	r2,4(sp)
 800860c:	d829883a 	mov	r20,sp
 8008610:	003f0f06 	br	8008250 <___vfiprintf_internal_r+0xb04>
 8008614:	d8c02417 	ldw	r3,144(sp)
 8008618:	d811883a 	mov	r8,sp
 800861c:	1d65c83a 	sub	r18,r3,r21
 8008620:	04bf5816 	blt	zero,r18,8008384 <___vfiprintf_internal_r+0xc38>
 8008624:	003f7e06 	br	8008420 <___vfiprintf_internal_r+0xcd4>
 8008628:	b02b883a 	mov	r21,r22
 800862c:	003c9806 	br	8007890 <___vfiprintf_internal_r+0x144>
 8008630:	d9002217 	ldw	r4,136(sp)
 8008634:	d9402117 	ldw	r5,132(sp)
 8008638:	d9801a04 	addi	r6,sp,104
 800863c:	80076380 	call	8007638 <__sprint_r.part.0>
 8008640:	103f3c1e 	bne	r2,zero,8008334 <___vfiprintf_internal_r+0xbe8>
 8008644:	d8801c17 	ldw	r2,112(sp)
 8008648:	d811883a 	mov	r8,sp
 800864c:	003f4806 	br	8008370 <___vfiprintf_internal_r+0xc24>
 8008650:	00800084 	movi	r2,2
 8008654:	9dc6b03a 	or	r3,r19,r23
 8008658:	003d1806 	br	8007abc <___vfiprintf_internal_r+0x370>
 800865c:	d9002217 	ldw	r4,136(sp)
 8008660:	d9402117 	ldw	r5,132(sp)
 8008664:	d9801a04 	addi	r6,sp,104
 8008668:	80076380 	call	8007638 <__sprint_r.part.0>
 800866c:	103f311e 	bne	r2,zero,8008334 <___vfiprintf_internal_r+0xbe8>
 8008670:	d829883a 	mov	r20,sp
 8008674:	003cf406 	br	8007a48 <___vfiprintf_internal_r+0x2fc>
 8008678:	000b883a 	mov	r5,zero
 800867c:	1809883a 	mov	r4,r3
 8008680:	d829883a 	mov	r20,sp
 8008684:	003d7606 	br	8007c60 <___vfiprintf_internal_r+0x514>
 8008688:	d9002217 	ldw	r4,136(sp)
 800868c:	d9402117 	ldw	r5,132(sp)
 8008690:	d9801a04 	addi	r6,sp,104
 8008694:	d9c02a15 	stw	r7,168(sp)
 8008698:	80076380 	call	8007638 <__sprint_r.part.0>
 800869c:	d9c02a17 	ldw	r7,168(sp)
 80086a0:	103f241e 	bne	r2,zero,8008334 <___vfiprintf_internal_r+0xbe8>
 80086a4:	d9401b17 	ldw	r5,108(sp)
 80086a8:	d8801c17 	ldw	r2,112(sp)
 80086ac:	d829883a 	mov	r20,sp
 80086b0:	29000044 	addi	r4,r5,1
 80086b4:	003d5d06 	br	8007c2c <___vfiprintf_internal_r+0x4e0>
 80086b8:	d9002217 	ldw	r4,136(sp)
 80086bc:	d9402117 	ldw	r5,132(sp)
 80086c0:	d9801a04 	addi	r6,sp,104
 80086c4:	80076380 	call	8007638 <__sprint_r.part.0>
 80086c8:	103f1a1e 	bne	r2,zero,8008334 <___vfiprintf_internal_r+0xbe8>
 80086cc:	d9401b17 	ldw	r5,108(sp)
 80086d0:	d8801c17 	ldw	r2,112(sp)
 80086d4:	d829883a 	mov	r20,sp
 80086d8:	29000044 	addi	r4,r5,1
 80086dc:	003d6006 	br	8007c60 <___vfiprintf_internal_r+0x514>
 80086e0:	10009b1e 	bne	r2,zero,8008950 <___vfiprintf_internal_r+0x1204>
 80086e4:	01000044 	movi	r4,1
 80086e8:	000b883a 	mov	r5,zero
 80086ec:	d829883a 	mov	r20,sp
 80086f0:	003d5d06 	br	8007c68 <___vfiprintf_internal_r+0x51c>
 80086f4:	d9002217 	ldw	r4,136(sp)
 80086f8:	d9402117 	ldw	r5,132(sp)
 80086fc:	d9801a04 	addi	r6,sp,104
 8008700:	80076380 	call	8007638 <__sprint_r.part.0>
 8008704:	103f0b1e 	bne	r2,zero,8008334 <___vfiprintf_internal_r+0xbe8>
 8008708:	d9001b17 	ldw	r4,108(sp)
 800870c:	d8801c17 	ldw	r2,112(sp)
 8008710:	d829883a 	mov	r20,sp
 8008714:	21000044 	addi	r4,r4,1
 8008718:	003d7906 	br	8007d00 <___vfiprintf_internal_r+0x5b4>
 800871c:	04e7c83a 	sub	r19,zero,r19
 8008720:	9804c03a 	cmpne	r2,r19,zero
 8008724:	05efc83a 	sub	r23,zero,r23
 8008728:	b8afc83a 	sub	r23,r23,r2
 800872c:	02800b44 	movi	r10,45
 8008730:	da801d85 	stb	r10,118(sp)
 8008734:	dc002015 	stw	r16,128(sp)
 8008738:	00800044 	movi	r2,1
 800873c:	9dc6b03a 	or	r3,r19,r23
 8008740:	003ce106 	br	8007ac8 <___vfiprintf_internal_r+0x37c>
 8008744:	000b883a 	mov	r5,zero
 8008748:	01000044 	movi	r4,1
 800874c:	d829883a 	mov	r20,sp
 8008750:	383d4326 	beq	r7,zero,8007c60 <___vfiprintf_internal_r+0x514>
 8008754:	00800084 	movi	r2,2
 8008758:	d8c01d04 	addi	r3,sp,116
 800875c:	d8c00015 	stw	r3,0(sp)
 8008760:	d8800115 	stw	r2,4(sp)
 8008764:	003d3b06 	br	8007c54 <___vfiprintf_internal_r+0x508>
 8008768:	b1800007 	ldb	r6,0(r22)
 800876c:	b005883a 	mov	r2,r22
 8008770:	003c5206 	br	80078bc <___vfiprintf_internal_r+0x170>
 8008774:	00800084 	movi	r2,2
 8008778:	003cd006 	br	8007abc <___vfiprintf_internal_r+0x370>
 800877c:	9080100c 	andi	r2,r18,64
 8008780:	10003e26 	beq	r2,zero,800887c <___vfiprintf_internal_r+0x1130>
 8008784:	d9402317 	ldw	r5,140(sp)
 8008788:	002f883a 	mov	r23,zero
 800878c:	0005883a 	mov	r2,zero
 8008790:	2cc0000b 	ldhu	r19,0(r5)
 8008794:	29400104 	addi	r5,r5,4
 8008798:	d9402315 	stw	r5,140(sp)
 800879c:	9807883a 	mov	r3,r19
 80087a0:	003cc606 	br	8007abc <___vfiprintf_internal_r+0x370>
 80087a4:	9080100c 	andi	r2,r18,64
 80087a8:	10004226 	beq	r2,zero,80088b4 <___vfiprintf_internal_r+0x1168>
 80087ac:	d9402317 	ldw	r5,140(sp)
 80087b0:	002f883a 	mov	r23,zero
 80087b4:	00800044 	movi	r2,1
 80087b8:	2cc0000b 	ldhu	r19,0(r5)
 80087bc:	29400104 	addi	r5,r5,4
 80087c0:	d9402315 	stw	r5,140(sp)
 80087c4:	9807883a 	mov	r3,r19
 80087c8:	003cbc06 	br	8007abc <___vfiprintf_internal_r+0x370>
 80087cc:	9080100c 	andi	r2,r18,64
 80087d0:	10003226 	beq	r2,zero,800889c <___vfiprintf_internal_r+0x1150>
 80087d4:	d8802317 	ldw	r2,140(sp)
 80087d8:	002f883a 	mov	r23,zero
 80087dc:	14c0000b 	ldhu	r19,0(r2)
 80087e0:	10800104 	addi	r2,r2,4
 80087e4:	d8802315 	stw	r2,140(sp)
 80087e8:	003da106 	br	8007e70 <___vfiprintf_internal_r+0x724>
 80087ec:	9080040c 	andi	r2,r18,16
 80087f0:	10003f1e 	bne	r2,zero,80088f0 <___vfiprintf_internal_r+0x11a4>
 80087f4:	9480100c 	andi	r18,r18,64
 80087f8:	90007526 	beq	r18,zero,80089d0 <___vfiprintf_internal_r+0x1284>
 80087fc:	d9402317 	ldw	r5,140(sp)
 8008800:	d8c02517 	ldw	r3,148(sp)
 8008804:	28800017 	ldw	r2,0(r5)
 8008808:	29400104 	addi	r5,r5,4
 800880c:	d9402315 	stw	r5,140(sp)
 8008810:	10c0000d 	sth	r3,0(r2)
 8008814:	003c0106 	br	800781c <___vfiprintf_internal_r+0xd0>
 8008818:	9080100c 	andi	r2,r18,64
 800881c:	10002d26 	beq	r2,zero,80088d4 <___vfiprintf_internal_r+0x1188>
 8008820:	1cc0000f 	ldh	r19,0(r3)
 8008824:	d8802317 	ldw	r2,140(sp)
 8008828:	982fd7fa 	srai	r23,r19,31
 800882c:	10800104 	addi	r2,r2,4
 8008830:	d8802315 	stw	r2,140(sp)
 8008834:	b805883a 	mov	r2,r23
 8008838:	003dc006 	br	8007f3c <___vfiprintf_internal_r+0x7f0>
 800883c:	d9002217 	ldw	r4,136(sp)
 8008840:	d9402117 	ldw	r5,132(sp)
 8008844:	d9801a04 	addi	r6,sp,104
 8008848:	d9c02a15 	stw	r7,168(sp)
 800884c:	80076380 	call	8007638 <__sprint_r.part.0>
 8008850:	d9c02a17 	ldw	r7,168(sp)
 8008854:	103eb71e 	bne	r2,zero,8008334 <___vfiprintf_internal_r+0xbe8>
 8008858:	d9401b17 	ldw	r5,108(sp)
 800885c:	d8801c17 	ldw	r2,112(sp)
 8008860:	d829883a 	mov	r20,sp
 8008864:	29000044 	addi	r4,r5,1
 8008868:	003e6e06 	br	8008224 <___vfiprintf_internal_r+0xad8>
 800886c:	202b883a 	mov	r21,r4
 8008870:	003eed06 	br	8008428 <___vfiprintf_internal_r+0xcdc>
 8008874:	dc002015 	stw	r16,128(sp)
 8008878:	003e1606 	br	80080d4 <___vfiprintf_internal_r+0x988>
 800887c:	d8802317 	ldw	r2,140(sp)
 8008880:	002f883a 	mov	r23,zero
 8008884:	14c00017 	ldw	r19,0(r2)
 8008888:	10800104 	addi	r2,r2,4
 800888c:	d8802315 	stw	r2,140(sp)
 8008890:	9807883a 	mov	r3,r19
 8008894:	0005883a 	mov	r2,zero
 8008898:	003c8806 	br	8007abc <___vfiprintf_internal_r+0x370>
 800889c:	d8c02317 	ldw	r3,140(sp)
 80088a0:	002f883a 	mov	r23,zero
 80088a4:	1cc00017 	ldw	r19,0(r3)
 80088a8:	18c00104 	addi	r3,r3,4
 80088ac:	d8c02315 	stw	r3,140(sp)
 80088b0:	003d6f06 	br	8007e70 <___vfiprintf_internal_r+0x724>
 80088b4:	d8802317 	ldw	r2,140(sp)
 80088b8:	002f883a 	mov	r23,zero
 80088bc:	14c00017 	ldw	r19,0(r2)
 80088c0:	10800104 	addi	r2,r2,4
 80088c4:	d8802315 	stw	r2,140(sp)
 80088c8:	9807883a 	mov	r3,r19
 80088cc:	00800044 	movi	r2,1
 80088d0:	003c7a06 	br	8007abc <___vfiprintf_internal_r+0x370>
 80088d4:	1cc00017 	ldw	r19,0(r3)
 80088d8:	d8c02317 	ldw	r3,140(sp)
 80088dc:	982fd7fa 	srai	r23,r19,31
 80088e0:	18c00104 	addi	r3,r3,4
 80088e4:	d8c02315 	stw	r3,140(sp)
 80088e8:	b805883a 	mov	r2,r23
 80088ec:	003d9306 	br	8007f3c <___vfiprintf_internal_r+0x7f0>
 80088f0:	d8c02317 	ldw	r3,140(sp)
 80088f4:	d9002517 	ldw	r4,148(sp)
 80088f8:	18800017 	ldw	r2,0(r3)
 80088fc:	18c00104 	addi	r3,r3,4
 8008900:	d8c02315 	stw	r3,140(sp)
 8008904:	11000015 	stw	r4,0(r2)
 8008908:	003bc406 	br	800781c <___vfiprintf_internal_r+0xd0>
 800890c:	01420074 	movhi	r5,2049
 8008910:	29407004 	addi	r5,r5,448
 8008914:	d9402615 	stw	r5,152(sp)
 8008918:	003cef06 	br	8007cd8 <___vfiprintf_internal_r+0x58c>
 800891c:	b0800044 	addi	r2,r22,1
 8008920:	94800814 	ori	r18,r18,32
 8008924:	b1800047 	ldb	r6,1(r22)
 8008928:	003be406 	br	80078bc <___vfiprintf_internal_r+0x170>
 800892c:	d8802417 	ldw	r2,144(sp)
 8008930:	d8c02315 	stw	r3,140(sp)
 8008934:	0085c83a 	sub	r2,zero,r2
 8008938:	d8802415 	stw	r2,144(sp)
 800893c:	b005883a 	mov	r2,r22
 8008940:	003d2406 	br	8007dd4 <___vfiprintf_internal_r+0x688>
 8008944:	80075a00 	call	80075a0 <strlen>
 8008948:	d8802015 	stw	r2,128(sp)
 800894c:	003de106 	br	80080d4 <___vfiprintf_internal_r+0x988>
 8008950:	d9002217 	ldw	r4,136(sp)
 8008954:	d9402117 	ldw	r5,132(sp)
 8008958:	d9801a04 	addi	r6,sp,104
 800895c:	80076380 	call	8007638 <__sprint_r.part.0>
 8008960:	103e741e 	bne	r2,zero,8008334 <___vfiprintf_internal_r+0xbe8>
 8008964:	d9401b17 	ldw	r5,108(sp)
 8008968:	d8801c17 	ldw	r2,112(sp)
 800896c:	d829883a 	mov	r20,sp
 8008970:	29000044 	addi	r4,r5,1
 8008974:	003cbc06 	br	8007c68 <___vfiprintf_internal_r+0x51c>
 8008978:	01420074 	movhi	r5,2049
 800897c:	29407404 	addi	r5,r5,464
 8008980:	d9402615 	stw	r5,152(sp)
 8008984:	d9401b17 	ldw	r5,108(sp)
 8008988:	29400044 	addi	r5,r5,1
 800898c:	003c9b06 	br	8007bfc <___vfiprintf_internal_r+0x4b0>
 8008990:	00800184 	movi	r2,6
 8008994:	1400012e 	bgeu	r2,r16,800899c <___vfiprintf_internal_r+0x1250>
 8008998:	1021883a 	mov	r16,r2
 800899c:	dc002015 	stw	r16,128(sp)
 80089a0:	802b883a 	mov	r21,r16
 80089a4:	80001b16 	blt	r16,zero,8008a14 <___vfiprintf_internal_r+0x12c8>
 80089a8:	07020074 	movhi	fp,2049
 80089ac:	dcc02315 	stw	r19,140(sp)
 80089b0:	e7001404 	addi	fp,fp,80
 80089b4:	003d4106 	br	8007ebc <___vfiprintf_internal_r+0x770>
 80089b8:	01420074 	movhi	r5,2049
 80089bc:	29407404 	addi	r5,r5,464
 80089c0:	d9402615 	stw	r5,152(sp)
 80089c4:	d9401b17 	ldw	r5,108(sp)
 80089c8:	29400044 	addi	r5,r5,1
 80089cc:	003e8b06 	br	80083fc <___vfiprintf_internal_r+0xcb0>
 80089d0:	d9002317 	ldw	r4,140(sp)
 80089d4:	d9402517 	ldw	r5,148(sp)
 80089d8:	20800017 	ldw	r2,0(r4)
 80089dc:	21000104 	addi	r4,r4,4
 80089e0:	d9002315 	stw	r4,140(sp)
 80089e4:	11400015 	stw	r5,0(r2)
 80089e8:	003b8c06 	br	800781c <___vfiprintf_internal_r+0xd0>
 80089ec:	01420074 	movhi	r5,2049
 80089f0:	29407004 	addi	r5,r5,448
 80089f4:	d9402615 	stw	r5,152(sp)
 80089f8:	200d883a 	mov	r6,r4
 80089fc:	003ec906 	br	8008524 <___vfiprintf_internal_r+0xdd8>
 8008a00:	dc002015 	stw	r16,128(sp)
 8008a04:	da801d83 	ldbu	r10,118(sp)
 8008a08:	dcc02315 	stw	r19,140(sp)
 8008a0c:	0021883a 	mov	r16,zero
 8008a10:	003c4706 	br	8007b30 <___vfiprintf_internal_r+0x3e4>
 8008a14:	002b883a 	mov	r21,zero
 8008a18:	003fe306 	br	80089a8 <___vfiprintf_internal_r+0x125c>
 8008a1c:	d9402317 	ldw	r5,140(sp)
 8008a20:	2c000017 	ldw	r16,0(r5)
 8008a24:	28c00104 	addi	r3,r5,4
 8008a28:	d8c02315 	stw	r3,140(sp)
 8008a2c:	803fbd0e 	bge	r16,zero,8008924 <___vfiprintf_internal_r+0x11d8>
 8008a30:	043fffc4 	movi	r16,-1
 8008a34:	b1800047 	ldb	r6,1(r22)
 8008a38:	003ba006 	br	80078bc <___vfiprintf_internal_r+0x170>

08008a3c <__vfiprintf_internal>:
 8008a3c:	2007883a 	mov	r3,r4
 8008a40:	01020074 	movhi	r4,2049
 8008a44:	21073104 	addi	r4,r4,7364
 8008a48:	21000017 	ldw	r4,0(r4)
 8008a4c:	2805883a 	mov	r2,r5
 8008a50:	300f883a 	mov	r7,r6
 8008a54:	180b883a 	mov	r5,r3
 8008a58:	100d883a 	mov	r6,r2
 8008a5c:	800774c1 	jmpi	800774c <___vfiprintf_internal_r>

08008a60 <__sbprintf>:
 8008a60:	2880030b 	ldhu	r2,12(r5)
 8008a64:	2ac01917 	ldw	r11,100(r5)
 8008a68:	2a80038b 	ldhu	r10,14(r5)
 8008a6c:	2a400717 	ldw	r9,28(r5)
 8008a70:	2a000917 	ldw	r8,36(r5)
 8008a74:	defee204 	addi	sp,sp,-1144
 8008a78:	00c10004 	movi	r3,1024
 8008a7c:	dc011a15 	stw	r16,1128(sp)
 8008a80:	10bfff4c 	andi	r2,r2,65533
 8008a84:	2821883a 	mov	r16,r5
 8008a88:	d8cb883a 	add	r5,sp,r3
 8008a8c:	dc811c15 	stw	r18,1136(sp)
 8008a90:	dc411b15 	stw	r17,1132(sp)
 8008a94:	dfc11d15 	stw	ra,1140(sp)
 8008a98:	2025883a 	mov	r18,r4
 8008a9c:	d881030d 	sth	r2,1036(sp)
 8008aa0:	dac11915 	stw	r11,1124(sp)
 8008aa4:	da81038d 	sth	r10,1038(sp)
 8008aa8:	da410715 	stw	r9,1052(sp)
 8008aac:	da010915 	stw	r8,1060(sp)
 8008ab0:	dec10015 	stw	sp,1024(sp)
 8008ab4:	dec10415 	stw	sp,1040(sp)
 8008ab8:	d8c10215 	stw	r3,1032(sp)
 8008abc:	d8c10515 	stw	r3,1044(sp)
 8008ac0:	d8010615 	stw	zero,1048(sp)
 8008ac4:	800774c0 	call	800774c <___vfiprintf_internal_r>
 8008ac8:	1023883a 	mov	r17,r2
 8008acc:	10000416 	blt	r2,zero,8008ae0 <__sbprintf+0x80>
 8008ad0:	9009883a 	mov	r4,r18
 8008ad4:	d9410004 	addi	r5,sp,1024
 8008ad8:	8004b400 	call	8004b40 <_fflush_r>
 8008adc:	10000d1e 	bne	r2,zero,8008b14 <__sbprintf+0xb4>
 8008ae0:	d8c1030b 	ldhu	r3,1036(sp)
 8008ae4:	18c0100c 	andi	r3,r3,64
 8008ae8:	18000326 	beq	r3,zero,8008af8 <__sbprintf+0x98>
 8008aec:	8080030b 	ldhu	r2,12(r16)
 8008af0:	10801014 	ori	r2,r2,64
 8008af4:	8080030d 	sth	r2,12(r16)
 8008af8:	8805883a 	mov	r2,r17
 8008afc:	dfc11d17 	ldw	ra,1140(sp)
 8008b00:	dc811c17 	ldw	r18,1136(sp)
 8008b04:	dc411b17 	ldw	r17,1132(sp)
 8008b08:	dc011a17 	ldw	r16,1128(sp)
 8008b0c:	dec11e04 	addi	sp,sp,1144
 8008b10:	f800283a 	ret
 8008b14:	047fffc4 	movi	r17,-1
 8008b18:	003ff106 	br	8008ae0 <__sbprintf+0x80>

08008b1c <_write_r>:
 8008b1c:	defffd04 	addi	sp,sp,-12
 8008b20:	dc000015 	stw	r16,0(sp)
 8008b24:	04020074 	movhi	r16,2049
 8008b28:	dc400115 	stw	r17,4(sp)
 8008b2c:	840e0104 	addi	r16,r16,14340
 8008b30:	2023883a 	mov	r17,r4
 8008b34:	2809883a 	mov	r4,r5
 8008b38:	300b883a 	mov	r5,r6
 8008b3c:	380d883a 	mov	r6,r7
 8008b40:	dfc00215 	stw	ra,8(sp)
 8008b44:	80000015 	stw	zero,0(r16)
 8008b48:	800ddcc0 	call	800ddcc <write>
 8008b4c:	00ffffc4 	movi	r3,-1
 8008b50:	10c00526 	beq	r2,r3,8008b68 <_write_r+0x4c>
 8008b54:	dfc00217 	ldw	ra,8(sp)
 8008b58:	dc400117 	ldw	r17,4(sp)
 8008b5c:	dc000017 	ldw	r16,0(sp)
 8008b60:	dec00304 	addi	sp,sp,12
 8008b64:	f800283a 	ret
 8008b68:	80c00017 	ldw	r3,0(r16)
 8008b6c:	183ff926 	beq	r3,zero,8008b54 <_write_r+0x38>
 8008b70:	88c00015 	stw	r3,0(r17)
 8008b74:	003ff706 	br	8008b54 <_write_r+0x38>

08008b78 <_close_r>:
 8008b78:	defffd04 	addi	sp,sp,-12
 8008b7c:	dc000015 	stw	r16,0(sp)
 8008b80:	04020074 	movhi	r16,2049
 8008b84:	dc400115 	stw	r17,4(sp)
 8008b88:	840e0104 	addi	r16,r16,14340
 8008b8c:	2023883a 	mov	r17,r4
 8008b90:	2809883a 	mov	r4,r5
 8008b94:	dfc00215 	stw	ra,8(sp)
 8008b98:	80000015 	stw	zero,0(r16)
 8008b9c:	800d5280 	call	800d528 <close>
 8008ba0:	00ffffc4 	movi	r3,-1
 8008ba4:	10c00526 	beq	r2,r3,8008bbc <_close_r+0x44>
 8008ba8:	dfc00217 	ldw	ra,8(sp)
 8008bac:	dc400117 	ldw	r17,4(sp)
 8008bb0:	dc000017 	ldw	r16,0(sp)
 8008bb4:	dec00304 	addi	sp,sp,12
 8008bb8:	f800283a 	ret
 8008bbc:	80c00017 	ldw	r3,0(r16)
 8008bc0:	183ff926 	beq	r3,zero,8008ba8 <_close_r+0x30>
 8008bc4:	88c00015 	stw	r3,0(r17)
 8008bc8:	003ff706 	br	8008ba8 <_close_r+0x30>

08008bcc <_calloc_r>:
 8008bcc:	defffe04 	addi	sp,sp,-8
 8008bd0:	dc000015 	stw	r16,0(sp)
 8008bd4:	2021883a 	mov	r16,r4
 8008bd8:	2809883a 	mov	r4,r5
 8008bdc:	300b883a 	mov	r5,r6
 8008be0:	dfc00115 	stw	ra,4(sp)
 8008be4:	80005f80 	call	80005f8 <__mulsi3>
 8008be8:	8009883a 	mov	r4,r16
 8008bec:	100b883a 	mov	r5,r2
 8008bf0:	80057b00 	call	80057b0 <_malloc_r>
 8008bf4:	1021883a 	mov	r16,r2
 8008bf8:	10002826 	beq	r2,zero,8008c9c <_calloc_r+0xd0>
 8008bfc:	11bfff17 	ldw	r6,-4(r2)
 8008c00:	00bfff04 	movi	r2,-4
 8008c04:	00c00904 	movi	r3,36
 8008c08:	308c703a 	and	r6,r6,r2
 8008c0c:	308d883a 	add	r6,r6,r2
 8008c10:	19801436 	bltu	r3,r6,8008c64 <_calloc_r+0x98>
 8008c14:	008004c4 	movi	r2,19
 8008c18:	11800936 	bltu	r2,r6,8008c40 <_calloc_r+0x74>
 8008c1c:	8005883a 	mov	r2,r16
 8008c20:	10000015 	stw	zero,0(r2)
 8008c24:	10000115 	stw	zero,4(r2)
 8008c28:	10000215 	stw	zero,8(r2)
 8008c2c:	8005883a 	mov	r2,r16
 8008c30:	dfc00117 	ldw	ra,4(sp)
 8008c34:	dc000017 	ldw	r16,0(sp)
 8008c38:	dec00204 	addi	sp,sp,8
 8008c3c:	f800283a 	ret
 8008c40:	80000015 	stw	zero,0(r16)
 8008c44:	80000115 	stw	zero,4(r16)
 8008c48:	008006c4 	movi	r2,27
 8008c4c:	11800d2e 	bgeu	r2,r6,8008c84 <_calloc_r+0xb8>
 8008c50:	80000215 	stw	zero,8(r16)
 8008c54:	80000315 	stw	zero,12(r16)
 8008c58:	30c00c26 	beq	r6,r3,8008c8c <_calloc_r+0xc0>
 8008c5c:	80800404 	addi	r2,r16,16
 8008c60:	003fef06 	br	8008c20 <_calloc_r+0x54>
 8008c64:	8009883a 	mov	r4,r16
 8008c68:	000b883a 	mov	r5,zero
 8008c6c:	80061780 	call	8006178 <memset>
 8008c70:	8005883a 	mov	r2,r16
 8008c74:	dfc00117 	ldw	ra,4(sp)
 8008c78:	dc000017 	ldw	r16,0(sp)
 8008c7c:	dec00204 	addi	sp,sp,8
 8008c80:	f800283a 	ret
 8008c84:	80800204 	addi	r2,r16,8
 8008c88:	003fe506 	br	8008c20 <_calloc_r+0x54>
 8008c8c:	80000415 	stw	zero,16(r16)
 8008c90:	80800604 	addi	r2,r16,24
 8008c94:	80000515 	stw	zero,20(r16)
 8008c98:	003fe106 	br	8008c20 <_calloc_r+0x54>
 8008c9c:	0005883a 	mov	r2,zero
 8008ca0:	003fe306 	br	8008c30 <_calloc_r+0x64>

08008ca4 <_fclose_r>:
 8008ca4:	28003926 	beq	r5,zero,8008d8c <_fclose_r+0xe8>
 8008ca8:	defffc04 	addi	sp,sp,-16
 8008cac:	dc400115 	stw	r17,4(sp)
 8008cb0:	dc000015 	stw	r16,0(sp)
 8008cb4:	dfc00315 	stw	ra,12(sp)
 8008cb8:	dc800215 	stw	r18,8(sp)
 8008cbc:	2023883a 	mov	r17,r4
 8008cc0:	2821883a 	mov	r16,r5
 8008cc4:	20000226 	beq	r4,zero,8008cd0 <_fclose_r+0x2c>
 8008cc8:	20800e17 	ldw	r2,56(r4)
 8008ccc:	10002726 	beq	r2,zero,8008d6c <_fclose_r+0xc8>
 8008cd0:	8080030f 	ldh	r2,12(r16)
 8008cd4:	1000071e 	bne	r2,zero,8008cf4 <_fclose_r+0x50>
 8008cd8:	0005883a 	mov	r2,zero
 8008cdc:	dfc00317 	ldw	ra,12(sp)
 8008ce0:	dc800217 	ldw	r18,8(sp)
 8008ce4:	dc400117 	ldw	r17,4(sp)
 8008ce8:	dc000017 	ldw	r16,0(sp)
 8008cec:	dec00404 	addi	sp,sp,16
 8008cf0:	f800283a 	ret
 8008cf4:	8809883a 	mov	r4,r17
 8008cf8:	800b883a 	mov	r5,r16
 8008cfc:	80049380 	call	8004938 <__sflush_r>
 8008d00:	1025883a 	mov	r18,r2
 8008d04:	80800b17 	ldw	r2,44(r16)
 8008d08:	10000426 	beq	r2,zero,8008d1c <_fclose_r+0x78>
 8008d0c:	81400717 	ldw	r5,28(r16)
 8008d10:	8809883a 	mov	r4,r17
 8008d14:	103ee83a 	callr	r2
 8008d18:	10001616 	blt	r2,zero,8008d74 <_fclose_r+0xd0>
 8008d1c:	8080030b 	ldhu	r2,12(r16)
 8008d20:	1080200c 	andi	r2,r2,128
 8008d24:	1000151e 	bne	r2,zero,8008d7c <_fclose_r+0xd8>
 8008d28:	81400c17 	ldw	r5,48(r16)
 8008d2c:	28000526 	beq	r5,zero,8008d44 <_fclose_r+0xa0>
 8008d30:	80801004 	addi	r2,r16,64
 8008d34:	28800226 	beq	r5,r2,8008d40 <_fclose_r+0x9c>
 8008d38:	8809883a 	mov	r4,r17
 8008d3c:	80050a00 	call	80050a0 <_free_r>
 8008d40:	80000c15 	stw	zero,48(r16)
 8008d44:	81401117 	ldw	r5,68(r16)
 8008d48:	28000326 	beq	r5,zero,8008d58 <_fclose_r+0xb4>
 8008d4c:	8809883a 	mov	r4,r17
 8008d50:	80050a00 	call	80050a0 <_free_r>
 8008d54:	80001115 	stw	zero,68(r16)
 8008d58:	8004f3c0 	call	8004f3c <__sfp_lock_acquire>
 8008d5c:	8000030d 	sth	zero,12(r16)
 8008d60:	8004f400 	call	8004f40 <__sfp_lock_release>
 8008d64:	9005883a 	mov	r2,r18
 8008d68:	003fdc06 	br	8008cdc <_fclose_r+0x38>
 8008d6c:	8004f2c0 	call	8004f2c <__sinit>
 8008d70:	003fd706 	br	8008cd0 <_fclose_r+0x2c>
 8008d74:	04bfffc4 	movi	r18,-1
 8008d78:	003fe806 	br	8008d1c <_fclose_r+0x78>
 8008d7c:	81400417 	ldw	r5,16(r16)
 8008d80:	8809883a 	mov	r4,r17
 8008d84:	80050a00 	call	80050a0 <_free_r>
 8008d88:	003fe706 	br	8008d28 <_fclose_r+0x84>
 8008d8c:	0005883a 	mov	r2,zero
 8008d90:	f800283a 	ret

08008d94 <fclose>:
 8008d94:	00820074 	movhi	r2,2049
 8008d98:	10873104 	addi	r2,r2,7364
 8008d9c:	200b883a 	mov	r5,r4
 8008da0:	11000017 	ldw	r4,0(r2)
 8008da4:	8008ca41 	jmpi	8008ca4 <_fclose_r>

08008da8 <_fputwc_r>:
 8008da8:	3080030b 	ldhu	r2,12(r6)
 8008dac:	defff804 	addi	sp,sp,-32
 8008db0:	dcc00415 	stw	r19,16(sp)
 8008db4:	dc800315 	stw	r18,12(sp)
 8008db8:	dc000115 	stw	r16,4(sp)
 8008dbc:	dfc00715 	stw	ra,28(sp)
 8008dc0:	dd400615 	stw	r21,24(sp)
 8008dc4:	dd000515 	stw	r20,20(sp)
 8008dc8:	dc400215 	stw	r17,8(sp)
 8008dcc:	10c8000c 	andi	r3,r2,8192
 8008dd0:	3021883a 	mov	r16,r6
 8008dd4:	2027883a 	mov	r19,r4
 8008dd8:	2825883a 	mov	r18,r5
 8008ddc:	1800051e 	bne	r3,zero,8008df4 <_fputwc_r+0x4c>
 8008de0:	30c01917 	ldw	r3,100(r6)
 8008de4:	10880014 	ori	r2,r2,8192
 8008de8:	3080030d 	sth	r2,12(r6)
 8008dec:	18880014 	ori	r2,r3,8192
 8008df0:	30801915 	stw	r2,100(r6)
 8008df4:	80055a00 	call	80055a0 <__locale_mb_cur_max>
 8008df8:	00c00044 	movi	r3,1
 8008dfc:	10c03e26 	beq	r2,r3,8008ef8 <_fputwc_r+0x150>
 8008e00:	9809883a 	mov	r4,r19
 8008e04:	d80b883a 	mov	r5,sp
 8008e08:	900d883a 	mov	r6,r18
 8008e0c:	81c01704 	addi	r7,r16,92
 8008e10:	8009dd00 	call	8009dd0 <_wcrtomb_r>
 8008e14:	1029883a 	mov	r20,r2
 8008e18:	00bfffc4 	movi	r2,-1
 8008e1c:	a0802026 	beq	r20,r2,8008ea0 <_fputwc_r+0xf8>
 8008e20:	d9400003 	ldbu	r5,0(sp)
 8008e24:	a0001c26 	beq	r20,zero,8008e98 <_fputwc_r+0xf0>
 8008e28:	0023883a 	mov	r17,zero
 8008e2c:	05400284 	movi	r21,10
 8008e30:	00000906 	br	8008e58 <_fputwc_r+0xb0>
 8008e34:	80800017 	ldw	r2,0(r16)
 8008e38:	11400005 	stb	r5,0(r2)
 8008e3c:	80c00017 	ldw	r3,0(r16)
 8008e40:	18c00044 	addi	r3,r3,1
 8008e44:	80c00015 	stw	r3,0(r16)
 8008e48:	8c400044 	addi	r17,r17,1
 8008e4c:	dc45883a 	add	r2,sp,r17
 8008e50:	8d00112e 	bgeu	r17,r20,8008e98 <_fputwc_r+0xf0>
 8008e54:	11400003 	ldbu	r5,0(r2)
 8008e58:	80c00217 	ldw	r3,8(r16)
 8008e5c:	18ffffc4 	addi	r3,r3,-1
 8008e60:	80c00215 	stw	r3,8(r16)
 8008e64:	183ff30e 	bge	r3,zero,8008e34 <_fputwc_r+0x8c>
 8008e68:	80800617 	ldw	r2,24(r16)
 8008e6c:	18801916 	blt	r3,r2,8008ed4 <_fputwc_r+0x12c>
 8008e70:	80800017 	ldw	r2,0(r16)
 8008e74:	11400005 	stb	r5,0(r2)
 8008e78:	80800017 	ldw	r2,0(r16)
 8008e7c:	10c00003 	ldbu	r3,0(r2)
 8008e80:	10800044 	addi	r2,r2,1
 8008e84:	1d402326 	beq	r3,r21,8008f14 <_fputwc_r+0x16c>
 8008e88:	80800015 	stw	r2,0(r16)
 8008e8c:	8c400044 	addi	r17,r17,1
 8008e90:	dc45883a 	add	r2,sp,r17
 8008e94:	8d3fef36 	bltu	r17,r20,8008e54 <_fputwc_r+0xac>
 8008e98:	9005883a 	mov	r2,r18
 8008e9c:	00000406 	br	8008eb0 <_fputwc_r+0x108>
 8008ea0:	80c0030b 	ldhu	r3,12(r16)
 8008ea4:	a005883a 	mov	r2,r20
 8008ea8:	18c01014 	ori	r3,r3,64
 8008eac:	80c0030d 	sth	r3,12(r16)
 8008eb0:	dfc00717 	ldw	ra,28(sp)
 8008eb4:	dd400617 	ldw	r21,24(sp)
 8008eb8:	dd000517 	ldw	r20,20(sp)
 8008ebc:	dcc00417 	ldw	r19,16(sp)
 8008ec0:	dc800317 	ldw	r18,12(sp)
 8008ec4:	dc400217 	ldw	r17,8(sp)
 8008ec8:	dc000117 	ldw	r16,4(sp)
 8008ecc:	dec00804 	addi	sp,sp,32
 8008ed0:	f800283a 	ret
 8008ed4:	9809883a 	mov	r4,r19
 8008ed8:	29403fcc 	andi	r5,r5,255
 8008edc:	800d883a 	mov	r6,r16
 8008ee0:	8009c7c0 	call	8009c7c <__swbuf_r>
 8008ee4:	10bfffe0 	cmpeqi	r2,r2,-1
 8008ee8:	10803fcc 	andi	r2,r2,255
 8008eec:	103fd626 	beq	r2,zero,8008e48 <_fputwc_r+0xa0>
 8008ef0:	00bfffc4 	movi	r2,-1
 8008ef4:	003fee06 	br	8008eb0 <_fputwc_r+0x108>
 8008ef8:	90ffffc4 	addi	r3,r18,-1
 8008efc:	01003f84 	movi	r4,254
 8008f00:	20ffbf36 	bltu	r4,r3,8008e00 <_fputwc_r+0x58>
 8008f04:	900b883a 	mov	r5,r18
 8008f08:	dc800005 	stb	r18,0(sp)
 8008f0c:	1029883a 	mov	r20,r2
 8008f10:	003fc506 	br	8008e28 <_fputwc_r+0x80>
 8008f14:	9809883a 	mov	r4,r19
 8008f18:	a80b883a 	mov	r5,r21
 8008f1c:	800d883a 	mov	r6,r16
 8008f20:	8009c7c0 	call	8009c7c <__swbuf_r>
 8008f24:	10bfffe0 	cmpeqi	r2,r2,-1
 8008f28:	003fef06 	br	8008ee8 <_fputwc_r+0x140>

08008f2c <fputwc>:
 8008f2c:	00820074 	movhi	r2,2049
 8008f30:	defffc04 	addi	sp,sp,-16
 8008f34:	10873104 	addi	r2,r2,7364
 8008f38:	dc000115 	stw	r16,4(sp)
 8008f3c:	14000017 	ldw	r16,0(r2)
 8008f40:	dc400215 	stw	r17,8(sp)
 8008f44:	dfc00315 	stw	ra,12(sp)
 8008f48:	2023883a 	mov	r17,r4
 8008f4c:	280d883a 	mov	r6,r5
 8008f50:	80000626 	beq	r16,zero,8008f6c <fputwc+0x40>
 8008f54:	80800e17 	ldw	r2,56(r16)
 8008f58:	1000041e 	bne	r2,zero,8008f6c <fputwc+0x40>
 8008f5c:	8009883a 	mov	r4,r16
 8008f60:	d9400015 	stw	r5,0(sp)
 8008f64:	8004f2c0 	call	8004f2c <__sinit>
 8008f68:	d9800017 	ldw	r6,0(sp)
 8008f6c:	8009883a 	mov	r4,r16
 8008f70:	880b883a 	mov	r5,r17
 8008f74:	dfc00317 	ldw	ra,12(sp)
 8008f78:	dc400217 	ldw	r17,8(sp)
 8008f7c:	dc000117 	ldw	r16,4(sp)
 8008f80:	dec00404 	addi	sp,sp,16
 8008f84:	8008da81 	jmpi	8008da8 <_fputwc_r>

08008f88 <_fstat_r>:
 8008f88:	defffd04 	addi	sp,sp,-12
 8008f8c:	dc000015 	stw	r16,0(sp)
 8008f90:	04020074 	movhi	r16,2049
 8008f94:	dc400115 	stw	r17,4(sp)
 8008f98:	840e0104 	addi	r16,r16,14340
 8008f9c:	2023883a 	mov	r17,r4
 8008fa0:	2809883a 	mov	r4,r5
 8008fa4:	300b883a 	mov	r5,r6
 8008fa8:	dfc00215 	stw	ra,8(sp)
 8008fac:	80000015 	stw	zero,0(r16)
 8008fb0:	800d67c0 	call	800d67c <fstat>
 8008fb4:	00ffffc4 	movi	r3,-1
 8008fb8:	10c00526 	beq	r2,r3,8008fd0 <_fstat_r+0x48>
 8008fbc:	dfc00217 	ldw	ra,8(sp)
 8008fc0:	dc400117 	ldw	r17,4(sp)
 8008fc4:	dc000017 	ldw	r16,0(sp)
 8008fc8:	dec00304 	addi	sp,sp,12
 8008fcc:	f800283a 	ret
 8008fd0:	80c00017 	ldw	r3,0(r16)
 8008fd4:	183ff926 	beq	r3,zero,8008fbc <_fstat_r+0x34>
 8008fd8:	88c00015 	stw	r3,0(r17)
 8008fdc:	003ff706 	br	8008fbc <_fstat_r+0x34>

08008fe0 <__sfvwrite_r>:
 8008fe0:	30800217 	ldw	r2,8(r6)
 8008fe4:	10006726 	beq	r2,zero,8009184 <__sfvwrite_r+0x1a4>
 8008fe8:	defff404 	addi	sp,sp,-48
 8008fec:	dd000615 	stw	r20,24(sp)
 8008ff0:	2029883a 	mov	r20,r4
 8008ff4:	2900030b 	ldhu	r4,12(r5)
 8008ff8:	ddc00915 	stw	r23,36(sp)
 8008ffc:	dc000215 	stw	r16,8(sp)
 8009000:	dfc00b15 	stw	ra,44(sp)
 8009004:	df000a15 	stw	fp,40(sp)
 8009008:	dd800815 	stw	r22,32(sp)
 800900c:	dd400715 	stw	r21,28(sp)
 8009010:	dcc00515 	stw	r19,20(sp)
 8009014:	dc800415 	stw	r18,16(sp)
 8009018:	dc400315 	stw	r17,12(sp)
 800901c:	2080020c 	andi	r2,r4,8
 8009020:	2821883a 	mov	r16,r5
 8009024:	302f883a 	mov	r23,r6
 8009028:	10002726 	beq	r2,zero,80090c8 <__sfvwrite_r+0xe8>
 800902c:	28800417 	ldw	r2,16(r5)
 8009030:	10002526 	beq	r2,zero,80090c8 <__sfvwrite_r+0xe8>
 8009034:	2080008c 	andi	r2,r4,2
 8009038:	bc400017 	ldw	r17,0(r23)
 800903c:	10002a26 	beq	r2,zero,80090e8 <__sfvwrite_r+0x108>
 8009040:	05600034 	movhi	r21,32768
 8009044:	0027883a 	mov	r19,zero
 8009048:	0025883a 	mov	r18,zero
 800904c:	ad7f0004 	addi	r21,r21,-1024
 8009050:	980d883a 	mov	r6,r19
 8009054:	a009883a 	mov	r4,r20
 8009058:	90004626 	beq	r18,zero,8009174 <__sfvwrite_r+0x194>
 800905c:	900f883a 	mov	r7,r18
 8009060:	81400717 	ldw	r5,28(r16)
 8009064:	ac80022e 	bgeu	r21,r18,8009070 <__sfvwrite_r+0x90>
 8009068:	01e00034 	movhi	r7,32768
 800906c:	39ff0004 	addi	r7,r7,-1024
 8009070:	80800917 	ldw	r2,36(r16)
 8009074:	103ee83a 	callr	r2
 8009078:	0080550e 	bge	zero,r2,80091d0 <__sfvwrite_r+0x1f0>
 800907c:	b8c00217 	ldw	r3,8(r23)
 8009080:	98a7883a 	add	r19,r19,r2
 8009084:	90a5c83a 	sub	r18,r18,r2
 8009088:	1885c83a 	sub	r2,r3,r2
 800908c:	b8800215 	stw	r2,8(r23)
 8009090:	103fef1e 	bne	r2,zero,8009050 <__sfvwrite_r+0x70>
 8009094:	0005883a 	mov	r2,zero
 8009098:	dfc00b17 	ldw	ra,44(sp)
 800909c:	df000a17 	ldw	fp,40(sp)
 80090a0:	ddc00917 	ldw	r23,36(sp)
 80090a4:	dd800817 	ldw	r22,32(sp)
 80090a8:	dd400717 	ldw	r21,28(sp)
 80090ac:	dd000617 	ldw	r20,24(sp)
 80090b0:	dcc00517 	ldw	r19,20(sp)
 80090b4:	dc800417 	ldw	r18,16(sp)
 80090b8:	dc400317 	ldw	r17,12(sp)
 80090bc:	dc000217 	ldw	r16,8(sp)
 80090c0:	dec00c04 	addi	sp,sp,48
 80090c4:	f800283a 	ret
 80090c8:	a009883a 	mov	r4,r20
 80090cc:	800b883a 	mov	r5,r16
 80090d0:	8002e940 	call	8002e94 <__swsetup_r>
 80090d4:	1000ef1e 	bne	r2,zero,8009494 <__sfvwrite_r+0x4b4>
 80090d8:	8100030b 	ldhu	r4,12(r16)
 80090dc:	bc400017 	ldw	r17,0(r23)
 80090e0:	2080008c 	andi	r2,r4,2
 80090e4:	103fd61e 	bne	r2,zero,8009040 <__sfvwrite_r+0x60>
 80090e8:	2080004c 	andi	r2,r4,1
 80090ec:	10003d1e 	bne	r2,zero,80091e4 <__sfvwrite_r+0x204>
 80090f0:	0039883a 	mov	fp,zero
 80090f4:	0025883a 	mov	r18,zero
 80090f8:	90001a26 	beq	r18,zero,8009164 <__sfvwrite_r+0x184>
 80090fc:	2080800c 	andi	r2,r4,512
 8009100:	85800217 	ldw	r22,8(r16)
 8009104:	10007926 	beq	r2,zero,80092ec <__sfvwrite_r+0x30c>
 8009108:	b027883a 	mov	r19,r22
 800910c:	95809736 	bltu	r18,r22,800936c <__sfvwrite_r+0x38c>
 8009110:	2081200c 	andi	r2,r4,1152
 8009114:	1000a21e 	bne	r2,zero,80093a0 <__sfvwrite_r+0x3c0>
 8009118:	81000017 	ldw	r4,0(r16)
 800911c:	e00b883a 	mov	r5,fp
 8009120:	980d883a 	mov	r6,r19
 8009124:	800955c0 	call	800955c <memmove>
 8009128:	81000217 	ldw	r4,8(r16)
 800912c:	81400017 	ldw	r5,0(r16)
 8009130:	9005883a 	mov	r2,r18
 8009134:	2587c83a 	sub	r3,r4,r22
 8009138:	2ce7883a 	add	r19,r5,r19
 800913c:	80c00215 	stw	r3,8(r16)
 8009140:	84c00015 	stw	r19,0(r16)
 8009144:	b8c00217 	ldw	r3,8(r23)
 8009148:	e0b9883a 	add	fp,fp,r2
 800914c:	90a5c83a 	sub	r18,r18,r2
 8009150:	1885c83a 	sub	r2,r3,r2
 8009154:	b8800215 	stw	r2,8(r23)
 8009158:	103fce26 	beq	r2,zero,8009094 <__sfvwrite_r+0xb4>
 800915c:	8100030b 	ldhu	r4,12(r16)
 8009160:	903fe61e 	bne	r18,zero,80090fc <__sfvwrite_r+0x11c>
 8009164:	8f000017 	ldw	fp,0(r17)
 8009168:	8c800117 	ldw	r18,4(r17)
 800916c:	8c400204 	addi	r17,r17,8
 8009170:	003fe106 	br	80090f8 <__sfvwrite_r+0x118>
 8009174:	8cc00017 	ldw	r19,0(r17)
 8009178:	8c800117 	ldw	r18,4(r17)
 800917c:	8c400204 	addi	r17,r17,8
 8009180:	003fb306 	br	8009050 <__sfvwrite_r+0x70>
 8009184:	0005883a 	mov	r2,zero
 8009188:	f800283a 	ret
 800918c:	00a00034 	movhi	r2,32768
 8009190:	10bfffc4 	addi	r2,r2,-1
 8009194:	9009883a 	mov	r4,r18
 8009198:	1480012e 	bgeu	r2,r18,80091a0 <__sfvwrite_r+0x1c0>
 800919c:	1009883a 	mov	r4,r2
 80091a0:	980b883a 	mov	r5,r19
 80091a4:	800ac800 	call	800ac80 <__divsi3>
 80091a8:	9809883a 	mov	r4,r19
 80091ac:	100b883a 	mov	r5,r2
 80091b0:	80005f80 	call	80005f8 <__mulsi3>
 80091b4:	81400717 	ldw	r5,28(r16)
 80091b8:	80c00917 	ldw	r3,36(r16)
 80091bc:	a009883a 	mov	r4,r20
 80091c0:	e00d883a 	mov	r6,fp
 80091c4:	100f883a 	mov	r7,r2
 80091c8:	183ee83a 	callr	r3
 80091cc:	00bfdd16 	blt	zero,r2,8009144 <__sfvwrite_r+0x164>
 80091d0:	8080030b 	ldhu	r2,12(r16)
 80091d4:	10801014 	ori	r2,r2,64
 80091d8:	8080030d 	sth	r2,12(r16)
 80091dc:	00bfffc4 	movi	r2,-1
 80091e0:	003fad06 	br	8009098 <__sfvwrite_r+0xb8>
 80091e4:	0027883a 	mov	r19,zero
 80091e8:	0011883a 	mov	r8,zero
 80091ec:	0039883a 	mov	fp,zero
 80091f0:	0025883a 	mov	r18,zero
 80091f4:	90001f26 	beq	r18,zero,8009274 <__sfvwrite_r+0x294>
 80091f8:	40006026 	beq	r8,zero,800937c <__sfvwrite_r+0x39c>
 80091fc:	982b883a 	mov	r21,r19
 8009200:	94c0012e 	bgeu	r18,r19,8009208 <__sfvwrite_r+0x228>
 8009204:	902b883a 	mov	r21,r18
 8009208:	81000017 	ldw	r4,0(r16)
 800920c:	80800417 	ldw	r2,16(r16)
 8009210:	a82d883a 	mov	r22,r21
 8009214:	81800217 	ldw	r6,8(r16)
 8009218:	81c00517 	ldw	r7,20(r16)
 800921c:	1100022e 	bgeu	r2,r4,8009228 <__sfvwrite_r+0x248>
 8009220:	31c7883a 	add	r3,r6,r7
 8009224:	1d401816 	blt	r3,r21,8009288 <__sfvwrite_r+0x2a8>
 8009228:	a9c04416 	blt	r21,r7,800933c <__sfvwrite_r+0x35c>
 800922c:	80800917 	ldw	r2,36(r16)
 8009230:	81400717 	ldw	r5,28(r16)
 8009234:	a009883a 	mov	r4,r20
 8009238:	da000115 	stw	r8,4(sp)
 800923c:	e00d883a 	mov	r6,fp
 8009240:	103ee83a 	callr	r2
 8009244:	102d883a 	mov	r22,r2
 8009248:	da000117 	ldw	r8,4(sp)
 800924c:	00bfe00e 	bge	zero,r2,80091d0 <__sfvwrite_r+0x1f0>
 8009250:	9da7c83a 	sub	r19,r19,r22
 8009254:	98001f26 	beq	r19,zero,80092d4 <__sfvwrite_r+0x2f4>
 8009258:	b8800217 	ldw	r2,8(r23)
 800925c:	e5b9883a 	add	fp,fp,r22
 8009260:	95a5c83a 	sub	r18,r18,r22
 8009264:	15adc83a 	sub	r22,r2,r22
 8009268:	bd800215 	stw	r22,8(r23)
 800926c:	b03f8926 	beq	r22,zero,8009094 <__sfvwrite_r+0xb4>
 8009270:	903fe11e 	bne	r18,zero,80091f8 <__sfvwrite_r+0x218>
 8009274:	8f000017 	ldw	fp,0(r17)
 8009278:	8c800117 	ldw	r18,4(r17)
 800927c:	0011883a 	mov	r8,zero
 8009280:	8c400204 	addi	r17,r17,8
 8009284:	003fdb06 	br	80091f4 <__sfvwrite_r+0x214>
 8009288:	180d883a 	mov	r6,r3
 800928c:	e00b883a 	mov	r5,fp
 8009290:	da000115 	stw	r8,4(sp)
 8009294:	d8c00015 	stw	r3,0(sp)
 8009298:	800955c0 	call	800955c <memmove>
 800929c:	d8c00017 	ldw	r3,0(sp)
 80092a0:	80800017 	ldw	r2,0(r16)
 80092a4:	a009883a 	mov	r4,r20
 80092a8:	800b883a 	mov	r5,r16
 80092ac:	10c5883a 	add	r2,r2,r3
 80092b0:	80800015 	stw	r2,0(r16)
 80092b4:	d8c00015 	stw	r3,0(sp)
 80092b8:	8004b400 	call	8004b40 <_fflush_r>
 80092bc:	d8c00017 	ldw	r3,0(sp)
 80092c0:	da000117 	ldw	r8,4(sp)
 80092c4:	103fc21e 	bne	r2,zero,80091d0 <__sfvwrite_r+0x1f0>
 80092c8:	182d883a 	mov	r22,r3
 80092cc:	9da7c83a 	sub	r19,r19,r22
 80092d0:	983fe11e 	bne	r19,zero,8009258 <__sfvwrite_r+0x278>
 80092d4:	a009883a 	mov	r4,r20
 80092d8:	800b883a 	mov	r5,r16
 80092dc:	8004b400 	call	8004b40 <_fflush_r>
 80092e0:	103fbb1e 	bne	r2,zero,80091d0 <__sfvwrite_r+0x1f0>
 80092e4:	0011883a 	mov	r8,zero
 80092e8:	003fdb06 	br	8009258 <__sfvwrite_r+0x278>
 80092ec:	81000017 	ldw	r4,0(r16)
 80092f0:	80800417 	ldw	r2,16(r16)
 80092f4:	11000236 	bltu	r2,r4,8009300 <__sfvwrite_r+0x320>
 80092f8:	84c00517 	ldw	r19,20(r16)
 80092fc:	94ffa32e 	bgeu	r18,r19,800918c <__sfvwrite_r+0x1ac>
 8009300:	9027883a 	mov	r19,r18
 8009304:	b480012e 	bgeu	r22,r18,800930c <__sfvwrite_r+0x32c>
 8009308:	b027883a 	mov	r19,r22
 800930c:	e00b883a 	mov	r5,fp
 8009310:	980d883a 	mov	r6,r19
 8009314:	800955c0 	call	800955c <memmove>
 8009318:	80800217 	ldw	r2,8(r16)
 800931c:	80c00017 	ldw	r3,0(r16)
 8009320:	14c5c83a 	sub	r2,r2,r19
 8009324:	1cc7883a 	add	r3,r3,r19
 8009328:	80800215 	stw	r2,8(r16)
 800932c:	80c00015 	stw	r3,0(r16)
 8009330:	10004326 	beq	r2,zero,8009440 <__sfvwrite_r+0x460>
 8009334:	9805883a 	mov	r2,r19
 8009338:	003f8206 	br	8009144 <__sfvwrite_r+0x164>
 800933c:	a80d883a 	mov	r6,r21
 8009340:	e00b883a 	mov	r5,fp
 8009344:	da000115 	stw	r8,4(sp)
 8009348:	800955c0 	call	800955c <memmove>
 800934c:	80800217 	ldw	r2,8(r16)
 8009350:	80c00017 	ldw	r3,0(r16)
 8009354:	da000117 	ldw	r8,4(sp)
 8009358:	1545c83a 	sub	r2,r2,r21
 800935c:	1d6b883a 	add	r21,r3,r21
 8009360:	80800215 	stw	r2,8(r16)
 8009364:	85400015 	stw	r21,0(r16)
 8009368:	003fb906 	br	8009250 <__sfvwrite_r+0x270>
 800936c:	81000017 	ldw	r4,0(r16)
 8009370:	902d883a 	mov	r22,r18
 8009374:	9027883a 	mov	r19,r18
 8009378:	003f6806 	br	800911c <__sfvwrite_r+0x13c>
 800937c:	e009883a 	mov	r4,fp
 8009380:	01400284 	movi	r5,10
 8009384:	900d883a 	mov	r6,r18
 8009388:	8005f580 	call	8005f58 <memchr>
 800938c:	10003e26 	beq	r2,zero,8009488 <__sfvwrite_r+0x4a8>
 8009390:	10800044 	addi	r2,r2,1
 8009394:	1727c83a 	sub	r19,r2,fp
 8009398:	02000044 	movi	r8,1
 800939c:	003f9706 	br	80091fc <__sfvwrite_r+0x21c>
 80093a0:	80800517 	ldw	r2,20(r16)
 80093a4:	81400417 	ldw	r5,16(r16)
 80093a8:	80c00017 	ldw	r3,0(r16)
 80093ac:	10a7883a 	add	r19,r2,r2
 80093b0:	9885883a 	add	r2,r19,r2
 80093b4:	1026d7fa 	srli	r19,r2,31
 80093b8:	196bc83a 	sub	r21,r3,r5
 80093bc:	a9800044 	addi	r6,r21,1
 80093c0:	9885883a 	add	r2,r19,r2
 80093c4:	1027d07a 	srai	r19,r2,1
 80093c8:	3485883a 	add	r2,r6,r18
 80093cc:	980d883a 	mov	r6,r19
 80093d0:	9880022e 	bgeu	r19,r2,80093dc <__sfvwrite_r+0x3fc>
 80093d4:	1027883a 	mov	r19,r2
 80093d8:	100d883a 	mov	r6,r2
 80093dc:	2101000c 	andi	r4,r4,1024
 80093e0:	20001c26 	beq	r4,zero,8009454 <__sfvwrite_r+0x474>
 80093e4:	a009883a 	mov	r4,r20
 80093e8:	300b883a 	mov	r5,r6
 80093ec:	80057b00 	call	80057b0 <_malloc_r>
 80093f0:	102d883a 	mov	r22,r2
 80093f4:	10002926 	beq	r2,zero,800949c <__sfvwrite_r+0x4bc>
 80093f8:	81400417 	ldw	r5,16(r16)
 80093fc:	1009883a 	mov	r4,r2
 8009400:	a80d883a 	mov	r6,r21
 8009404:	80060400 	call	8006040 <memcpy>
 8009408:	8080030b 	ldhu	r2,12(r16)
 800940c:	00fedfc4 	movi	r3,-1153
 8009410:	10c4703a 	and	r2,r2,r3
 8009414:	10802014 	ori	r2,r2,128
 8009418:	8080030d 	sth	r2,12(r16)
 800941c:	b549883a 	add	r4,r22,r21
 8009420:	9d4bc83a 	sub	r5,r19,r21
 8009424:	85800415 	stw	r22,16(r16)
 8009428:	84c00515 	stw	r19,20(r16)
 800942c:	81000015 	stw	r4,0(r16)
 8009430:	902d883a 	mov	r22,r18
 8009434:	81400215 	stw	r5,8(r16)
 8009438:	9027883a 	mov	r19,r18
 800943c:	003f3706 	br	800911c <__sfvwrite_r+0x13c>
 8009440:	a009883a 	mov	r4,r20
 8009444:	800b883a 	mov	r5,r16
 8009448:	8004b400 	call	8004b40 <_fflush_r>
 800944c:	103fb926 	beq	r2,zero,8009334 <__sfvwrite_r+0x354>
 8009450:	003f5f06 	br	80091d0 <__sfvwrite_r+0x1f0>
 8009454:	a009883a 	mov	r4,r20
 8009458:	80097140 	call	8009714 <_realloc_r>
 800945c:	102d883a 	mov	r22,r2
 8009460:	103fee1e 	bne	r2,zero,800941c <__sfvwrite_r+0x43c>
 8009464:	81400417 	ldw	r5,16(r16)
 8009468:	a009883a 	mov	r4,r20
 800946c:	80050a00 	call	80050a0 <_free_r>
 8009470:	8080030b 	ldhu	r2,12(r16)
 8009474:	00ffdfc4 	movi	r3,-129
 8009478:	1884703a 	and	r2,r3,r2
 800947c:	00c00304 	movi	r3,12
 8009480:	a0c00015 	stw	r3,0(r20)
 8009484:	003f5306 	br	80091d4 <__sfvwrite_r+0x1f4>
 8009488:	94c00044 	addi	r19,r18,1
 800948c:	02000044 	movi	r8,1
 8009490:	003f5a06 	br	80091fc <__sfvwrite_r+0x21c>
 8009494:	00bfffc4 	movi	r2,-1
 8009498:	003eff06 	br	8009098 <__sfvwrite_r+0xb8>
 800949c:	00800304 	movi	r2,12
 80094a0:	a0800015 	stw	r2,0(r20)
 80094a4:	8080030b 	ldhu	r2,12(r16)
 80094a8:	003f4a06 	br	80091d4 <__sfvwrite_r+0x1f4>

080094ac <_isatty_r>:
 80094ac:	defffd04 	addi	sp,sp,-12
 80094b0:	dc000015 	stw	r16,0(sp)
 80094b4:	04020074 	movhi	r16,2049
 80094b8:	dc400115 	stw	r17,4(sp)
 80094bc:	840e0104 	addi	r16,r16,14340
 80094c0:	2023883a 	mov	r17,r4
 80094c4:	2809883a 	mov	r4,r5
 80094c8:	dfc00215 	stw	ra,8(sp)
 80094cc:	80000015 	stw	zero,0(r16)
 80094d0:	800d7840 	call	800d784 <isatty>
 80094d4:	00ffffc4 	movi	r3,-1
 80094d8:	10c00526 	beq	r2,r3,80094f0 <_isatty_r+0x44>
 80094dc:	dfc00217 	ldw	ra,8(sp)
 80094e0:	dc400117 	ldw	r17,4(sp)
 80094e4:	dc000017 	ldw	r16,0(sp)
 80094e8:	dec00304 	addi	sp,sp,12
 80094ec:	f800283a 	ret
 80094f0:	80c00017 	ldw	r3,0(r16)
 80094f4:	183ff926 	beq	r3,zero,80094dc <_isatty_r+0x30>
 80094f8:	88c00015 	stw	r3,0(r17)
 80094fc:	003ff706 	br	80094dc <_isatty_r+0x30>

08009500 <_lseek_r>:
 8009500:	defffd04 	addi	sp,sp,-12
 8009504:	dc000015 	stw	r16,0(sp)
 8009508:	04020074 	movhi	r16,2049
 800950c:	dc400115 	stw	r17,4(sp)
 8009510:	840e0104 	addi	r16,r16,14340
 8009514:	2023883a 	mov	r17,r4
 8009518:	2809883a 	mov	r4,r5
 800951c:	300b883a 	mov	r5,r6
 8009520:	380d883a 	mov	r6,r7
 8009524:	dfc00215 	stw	ra,8(sp)
 8009528:	80000015 	stw	zero,0(r16)
 800952c:	800d9640 	call	800d964 <lseek>
 8009530:	00ffffc4 	movi	r3,-1
 8009534:	10c00526 	beq	r2,r3,800954c <_lseek_r+0x4c>
 8009538:	dfc00217 	ldw	ra,8(sp)
 800953c:	dc400117 	ldw	r17,4(sp)
 8009540:	dc000017 	ldw	r16,0(sp)
 8009544:	dec00304 	addi	sp,sp,12
 8009548:	f800283a 	ret
 800954c:	80c00017 	ldw	r3,0(r16)
 8009550:	183ff926 	beq	r3,zero,8009538 <_lseek_r+0x38>
 8009554:	88c00015 	stw	r3,0(r17)
 8009558:	003ff706 	br	8009538 <_lseek_r+0x38>

0800955c <memmove>:
 800955c:	2005883a 	mov	r2,r4
 8009560:	29000b2e 	bgeu	r5,r4,8009590 <memmove+0x34>
 8009564:	298f883a 	add	r7,r5,r6
 8009568:	21c0092e 	bgeu	r4,r7,8009590 <memmove+0x34>
 800956c:	2187883a 	add	r3,r4,r6
 8009570:	198bc83a 	sub	r5,r3,r6
 8009574:	30004b26 	beq	r6,zero,80096a4 <memmove+0x148>
 8009578:	39ffffc4 	addi	r7,r7,-1
 800957c:	39000003 	ldbu	r4,0(r7)
 8009580:	18ffffc4 	addi	r3,r3,-1
 8009584:	19000005 	stb	r4,0(r3)
 8009588:	197ffb1e 	bne	r3,r5,8009578 <memmove+0x1c>
 800958c:	f800283a 	ret
 8009590:	00c003c4 	movi	r3,15
 8009594:	1980412e 	bgeu	r3,r6,800969c <memmove+0x140>
 8009598:	1146b03a 	or	r3,r2,r5
 800959c:	18c000cc 	andi	r3,r3,3
 80095a0:	1800411e 	bne	r3,zero,80096a8 <memmove+0x14c>
 80095a4:	33fffc04 	addi	r15,r6,-16
 80095a8:	781ed13a 	srli	r15,r15,4
 80095ac:	28c00104 	addi	r3,r5,4
 80095b0:	13400104 	addi	r13,r2,4
 80095b4:	781c913a 	slli	r14,r15,4
 80095b8:	2b000204 	addi	r12,r5,8
 80095bc:	12c00204 	addi	r11,r2,8
 80095c0:	73800504 	addi	r14,r14,20
 80095c4:	2a800304 	addi	r10,r5,12
 80095c8:	12400304 	addi	r9,r2,12
 80095cc:	2b9d883a 	add	r14,r5,r14
 80095d0:	2811883a 	mov	r8,r5
 80095d4:	100f883a 	mov	r7,r2
 80095d8:	41000017 	ldw	r4,0(r8)
 80095dc:	39c00404 	addi	r7,r7,16
 80095e0:	18c00404 	addi	r3,r3,16
 80095e4:	393ffc15 	stw	r4,-16(r7)
 80095e8:	193ffc17 	ldw	r4,-16(r3)
 80095ec:	6b400404 	addi	r13,r13,16
 80095f0:	5ac00404 	addi	r11,r11,16
 80095f4:	693ffc15 	stw	r4,-16(r13)
 80095f8:	61000017 	ldw	r4,0(r12)
 80095fc:	4a400404 	addi	r9,r9,16
 8009600:	42000404 	addi	r8,r8,16
 8009604:	593ffc15 	stw	r4,-16(r11)
 8009608:	51000017 	ldw	r4,0(r10)
 800960c:	63000404 	addi	r12,r12,16
 8009610:	52800404 	addi	r10,r10,16
 8009614:	493ffc15 	stw	r4,-16(r9)
 8009618:	1bbfef1e 	bne	r3,r14,80095d8 <memmove+0x7c>
 800961c:	79000044 	addi	r4,r15,1
 8009620:	2008913a 	slli	r4,r4,4
 8009624:	328003cc 	andi	r10,r6,15
 8009628:	02c000c4 	movi	r11,3
 800962c:	1107883a 	add	r3,r2,r4
 8009630:	290b883a 	add	r5,r5,r4
 8009634:	5a801e2e 	bgeu	r11,r10,80096b0 <memmove+0x154>
 8009638:	1813883a 	mov	r9,r3
 800963c:	2811883a 	mov	r8,r5
 8009640:	500f883a 	mov	r7,r10
 8009644:	41000017 	ldw	r4,0(r8)
 8009648:	4a400104 	addi	r9,r9,4
 800964c:	39ffff04 	addi	r7,r7,-4
 8009650:	493fff15 	stw	r4,-4(r9)
 8009654:	42000104 	addi	r8,r8,4
 8009658:	59fffa36 	bltu	r11,r7,8009644 <memmove+0xe8>
 800965c:	513fff04 	addi	r4,r10,-4
 8009660:	2008d0ba 	srli	r4,r4,2
 8009664:	318000cc 	andi	r6,r6,3
 8009668:	21000044 	addi	r4,r4,1
 800966c:	2109883a 	add	r4,r4,r4
 8009670:	2109883a 	add	r4,r4,r4
 8009674:	1907883a 	add	r3,r3,r4
 8009678:	290b883a 	add	r5,r5,r4
 800967c:	30000926 	beq	r6,zero,80096a4 <memmove+0x148>
 8009680:	198d883a 	add	r6,r3,r6
 8009684:	29c00003 	ldbu	r7,0(r5)
 8009688:	18c00044 	addi	r3,r3,1
 800968c:	29400044 	addi	r5,r5,1
 8009690:	19ffffc5 	stb	r7,-1(r3)
 8009694:	19bffb1e 	bne	r3,r6,8009684 <memmove+0x128>
 8009698:	f800283a 	ret
 800969c:	1007883a 	mov	r3,r2
 80096a0:	003ff606 	br	800967c <memmove+0x120>
 80096a4:	f800283a 	ret
 80096a8:	1007883a 	mov	r3,r2
 80096ac:	003ff406 	br	8009680 <memmove+0x124>
 80096b0:	500d883a 	mov	r6,r10
 80096b4:	003ff106 	br	800967c <memmove+0x120>

080096b8 <_read_r>:
 80096b8:	defffd04 	addi	sp,sp,-12
 80096bc:	dc000015 	stw	r16,0(sp)
 80096c0:	04020074 	movhi	r16,2049
 80096c4:	dc400115 	stw	r17,4(sp)
 80096c8:	840e0104 	addi	r16,r16,14340
 80096cc:	2023883a 	mov	r17,r4
 80096d0:	2809883a 	mov	r4,r5
 80096d4:	300b883a 	mov	r5,r6
 80096d8:	380d883a 	mov	r6,r7
 80096dc:	dfc00215 	stw	ra,8(sp)
 80096e0:	80000015 	stw	zero,0(r16)
 80096e4:	800db480 	call	800db48 <read>
 80096e8:	00ffffc4 	movi	r3,-1
 80096ec:	10c00526 	beq	r2,r3,8009704 <_read_r+0x4c>
 80096f0:	dfc00217 	ldw	ra,8(sp)
 80096f4:	dc400117 	ldw	r17,4(sp)
 80096f8:	dc000017 	ldw	r16,0(sp)
 80096fc:	dec00304 	addi	sp,sp,12
 8009700:	f800283a 	ret
 8009704:	80c00017 	ldw	r3,0(r16)
 8009708:	183ff926 	beq	r3,zero,80096f0 <_read_r+0x38>
 800970c:	88c00015 	stw	r3,0(r17)
 8009710:	003ff706 	br	80096f0 <_read_r+0x38>

08009714 <_realloc_r>:
 8009714:	defff604 	addi	sp,sp,-40
 8009718:	dd000415 	stw	r20,16(sp)
 800971c:	dc400115 	stw	r17,4(sp)
 8009720:	dfc00915 	stw	ra,36(sp)
 8009724:	df000815 	stw	fp,32(sp)
 8009728:	ddc00715 	stw	r23,28(sp)
 800972c:	dd800615 	stw	r22,24(sp)
 8009730:	dd400515 	stw	r21,20(sp)
 8009734:	dcc00315 	stw	r19,12(sp)
 8009738:	dc800215 	stw	r18,8(sp)
 800973c:	dc000015 	stw	r16,0(sp)
 8009740:	2829883a 	mov	r20,r5
 8009744:	3023883a 	mov	r17,r6
 8009748:	2800ad26 	beq	r5,zero,8009a00 <_realloc_r+0x2ec>
 800974c:	2025883a 	mov	r18,r4
 8009750:	800dab80 	call	800dab8 <__malloc_lock>
 8009754:	a0ffff17 	ldw	r3,-4(r20)
 8009758:	043fff04 	movi	r16,-4
 800975c:	890002c4 	addi	r4,r17,11
 8009760:	01c00584 	movi	r7,22
 8009764:	a57ffe04 	addi	r21,r20,-8
 8009768:	1c20703a 	and	r16,r3,r16
 800976c:	39001d2e 	bgeu	r7,r4,80097e4 <_realloc_r+0xd0>
 8009770:	05bffe04 	movi	r22,-8
 8009774:	25ac703a 	and	r22,r4,r22
 8009778:	b00f883a 	mov	r7,r22
 800977c:	b0006516 	blt	r22,zero,8009914 <_realloc_r+0x200>
 8009780:	b4406436 	bltu	r22,r17,8009914 <_realloc_r+0x200>
 8009784:	81c01a0e 	bge	r16,r7,80097f0 <_realloc_r+0xdc>
 8009788:	07020074 	movhi	fp,2049
 800978c:	e701ac04 	addi	fp,fp,1712
 8009790:	e1400217 	ldw	r5,8(fp)
 8009794:	ac11883a 	add	r8,r21,r16
 8009798:	2a006226 	beq	r5,r8,8009924 <_realloc_r+0x210>
 800979c:	41800117 	ldw	r6,4(r8)
 80097a0:	027fff84 	movi	r9,-2
 80097a4:	3252703a 	and	r9,r6,r9
 80097a8:	4253883a 	add	r9,r8,r9
 80097ac:	49000117 	ldw	r4,4(r9)
 80097b0:	2100004c 	andi	r4,r4,1
 80097b4:	2000281e 	bne	r4,zero,8009858 <_realloc_r+0x144>
 80097b8:	00bfff04 	movi	r2,-4
 80097bc:	3084703a 	and	r2,r6,r2
 80097c0:	1409883a 	add	r4,r2,r16
 80097c4:	21c05e16 	blt	r4,r7,8009940 <_realloc_r+0x22c>
 80097c8:	40800317 	ldw	r2,12(r8)
 80097cc:	41400217 	ldw	r5,8(r8)
 80097d0:	a023883a 	mov	r17,r20
 80097d4:	2021883a 	mov	r16,r4
 80097d8:	28800315 	stw	r2,12(r5)
 80097dc:	11400215 	stw	r5,8(r2)
 80097e0:	00000406 	br	80097f4 <_realloc_r+0xe0>
 80097e4:	01c00404 	movi	r7,16
 80097e8:	382d883a 	mov	r22,r7
 80097ec:	003fe406 	br	8009780 <_realloc_r+0x6c>
 80097f0:	a023883a 	mov	r17,r20
 80097f4:	858fc83a 	sub	r7,r16,r22
 80097f8:	008003c4 	movi	r2,15
 80097fc:	18c0004c 	andi	r3,r3,1
 8009800:	11c07236 	bltu	r2,r7,80099cc <_realloc_r+0x2b8>
 8009804:	1c06b03a 	or	r3,r3,r16
 8009808:	a8c00115 	stw	r3,4(r21)
 800980c:	ac21883a 	add	r16,r21,r16
 8009810:	80800117 	ldw	r2,4(r16)
 8009814:	10800054 	ori	r2,r2,1
 8009818:	80800115 	stw	r2,4(r16)
 800981c:	9009883a 	mov	r4,r18
 8009820:	800dad80 	call	800dad8 <__malloc_unlock>
 8009824:	8805883a 	mov	r2,r17
 8009828:	dfc00917 	ldw	ra,36(sp)
 800982c:	df000817 	ldw	fp,32(sp)
 8009830:	ddc00717 	ldw	r23,28(sp)
 8009834:	dd800617 	ldw	r22,24(sp)
 8009838:	dd400517 	ldw	r21,20(sp)
 800983c:	dd000417 	ldw	r20,16(sp)
 8009840:	dcc00317 	ldw	r19,12(sp)
 8009844:	dc800217 	ldw	r18,8(sp)
 8009848:	dc400117 	ldw	r17,4(sp)
 800984c:	dc000017 	ldw	r16,0(sp)
 8009850:	dec00a04 	addi	sp,sp,40
 8009854:	f800283a 	ret
 8009858:	18c0004c 	andi	r3,r3,1
 800985c:	1800081e 	bne	r3,zero,8009880 <_realloc_r+0x16c>
 8009860:	a4fffe17 	ldw	r19,-8(r20)
 8009864:	00bfff04 	movi	r2,-4
 8009868:	ace7c83a 	sub	r19,r21,r19
 800986c:	98c00117 	ldw	r3,4(r19)
 8009870:	1886703a 	and	r3,r3,r2
 8009874:	98000226 	beq	r19,zero,8009880 <_realloc_r+0x16c>
 8009878:	1c2f883a 	add	r23,r3,r16
 800987c:	b9c06d0e 	bge	r23,r7,8009a34 <_realloc_r+0x320>
 8009880:	880b883a 	mov	r5,r17
 8009884:	9009883a 	mov	r4,r18
 8009888:	80057b00 	call	80057b0 <_malloc_r>
 800988c:	1023883a 	mov	r17,r2
 8009890:	1000ef26 	beq	r2,zero,8009c50 <_realloc_r+0x53c>
 8009894:	a0ffff17 	ldw	r3,-4(r20)
 8009898:	113ffe04 	addi	r4,r2,-8
 800989c:	00bfff84 	movi	r2,-2
 80098a0:	1884703a 	and	r2,r3,r2
 80098a4:	a885883a 	add	r2,r21,r2
 80098a8:	2080bf26 	beq	r4,r2,8009ba8 <_realloc_r+0x494>
 80098ac:	81bfff04 	addi	r6,r16,-4
 80098b0:	00800904 	movi	r2,36
 80098b4:	11808936 	bltu	r2,r6,8009adc <_realloc_r+0x3c8>
 80098b8:	00c004c4 	movi	r3,19
 80098bc:	19806c2e 	bgeu	r3,r6,8009a70 <_realloc_r+0x35c>
 80098c0:	a0c00017 	ldw	r3,0(r20)
 80098c4:	88c00015 	stw	r3,0(r17)
 80098c8:	a0c00117 	ldw	r3,4(r20)
 80098cc:	88c00115 	stw	r3,4(r17)
 80098d0:	00c006c4 	movi	r3,27
 80098d4:	1980ac36 	bltu	r3,r6,8009b88 <_realloc_r+0x474>
 80098d8:	88800204 	addi	r2,r17,8
 80098dc:	a0c00204 	addi	r3,r20,8
 80098e0:	19000017 	ldw	r4,0(r3)
 80098e4:	11000015 	stw	r4,0(r2)
 80098e8:	19000117 	ldw	r4,4(r3)
 80098ec:	11000115 	stw	r4,4(r2)
 80098f0:	18c00217 	ldw	r3,8(r3)
 80098f4:	10c00215 	stw	r3,8(r2)
 80098f8:	a00b883a 	mov	r5,r20
 80098fc:	9009883a 	mov	r4,r18
 8009900:	80050a00 	call	80050a0 <_free_r>
 8009904:	9009883a 	mov	r4,r18
 8009908:	800dad80 	call	800dad8 <__malloc_unlock>
 800990c:	8805883a 	mov	r2,r17
 8009910:	003fc506 	br	8009828 <_realloc_r+0x114>
 8009914:	00800304 	movi	r2,12
 8009918:	90800015 	stw	r2,0(r18)
 800991c:	0005883a 	mov	r2,zero
 8009920:	003fc106 	br	8009828 <_realloc_r+0x114>
 8009924:	29800117 	ldw	r6,4(r5)
 8009928:	00bfff04 	movi	r2,-4
 800992c:	b1000404 	addi	r4,r22,16
 8009930:	3084703a 	and	r2,r6,r2
 8009934:	140d883a 	add	r6,r2,r16
 8009938:	31005b0e 	bge	r6,r4,8009aa8 <_realloc_r+0x394>
 800993c:	2811883a 	mov	r8,r5
 8009940:	18c0004c 	andi	r3,r3,1
 8009944:	183fce1e 	bne	r3,zero,8009880 <_realloc_r+0x16c>
 8009948:	a4fffe17 	ldw	r19,-8(r20)
 800994c:	00ffff04 	movi	r3,-4
 8009950:	ace7c83a 	sub	r19,r21,r19
 8009954:	99000117 	ldw	r4,4(r19)
 8009958:	20c6703a 	and	r3,r4,r3
 800995c:	403fc526 	beq	r8,zero,8009874 <_realloc_r+0x160>
 8009960:	1c2f883a 	add	r23,r3,r16
 8009964:	b8af883a 	add	r23,r23,r2
 8009968:	41406026 	beq	r8,r5,8009aec <_realloc_r+0x3d8>
 800996c:	b9ffc116 	blt	r23,r7,8009874 <_realloc_r+0x160>
 8009970:	40c00217 	ldw	r3,8(r8)
 8009974:	40800317 	ldw	r2,12(r8)
 8009978:	81bfff04 	addi	r6,r16,-4
 800997c:	01000904 	movi	r4,36
 8009980:	18800315 	stw	r2,12(r3)
 8009984:	10c00215 	stw	r3,8(r2)
 8009988:	99400217 	ldw	r5,8(r19)
 800998c:	98c00317 	ldw	r3,12(r19)
 8009990:	9c400204 	addi	r17,r19,8
 8009994:	28c00315 	stw	r3,12(r5)
 8009998:	19400215 	stw	r5,8(r3)
 800999c:	21802d36 	bltu	r4,r6,8009a54 <_realloc_r+0x340>
 80099a0:	008004c4 	movi	r2,19
 80099a4:	1180352e 	bgeu	r2,r6,8009a7c <_realloc_r+0x368>
 80099a8:	a0800017 	ldw	r2,0(r20)
 80099ac:	98800215 	stw	r2,8(r19)
 80099b0:	a0800117 	ldw	r2,4(r20)
 80099b4:	98800315 	stw	r2,12(r19)
 80099b8:	008006c4 	movi	r2,27
 80099bc:	11808036 	bltu	r2,r6,8009bc0 <_realloc_r+0x4ac>
 80099c0:	98c00404 	addi	r3,r19,16
 80099c4:	a5000204 	addi	r20,r20,8
 80099c8:	00002d06 	br	8009a80 <_realloc_r+0x36c>
 80099cc:	1d86b03a 	or	r3,r3,r22
 80099d0:	ad8b883a 	add	r5,r21,r22
 80099d4:	a8c00115 	stw	r3,4(r21)
 80099d8:	38800054 	ori	r2,r7,1
 80099dc:	28800115 	stw	r2,4(r5)
 80099e0:	29cf883a 	add	r7,r5,r7
 80099e4:	38800117 	ldw	r2,4(r7)
 80099e8:	9009883a 	mov	r4,r18
 80099ec:	29400204 	addi	r5,r5,8
 80099f0:	10800054 	ori	r2,r2,1
 80099f4:	38800115 	stw	r2,4(r7)
 80099f8:	80050a00 	call	80050a0 <_free_r>
 80099fc:	003f8706 	br	800981c <_realloc_r+0x108>
 8009a00:	300b883a 	mov	r5,r6
 8009a04:	dfc00917 	ldw	ra,36(sp)
 8009a08:	df000817 	ldw	fp,32(sp)
 8009a0c:	ddc00717 	ldw	r23,28(sp)
 8009a10:	dd800617 	ldw	r22,24(sp)
 8009a14:	dd400517 	ldw	r21,20(sp)
 8009a18:	dd000417 	ldw	r20,16(sp)
 8009a1c:	dcc00317 	ldw	r19,12(sp)
 8009a20:	dc800217 	ldw	r18,8(sp)
 8009a24:	dc400117 	ldw	r17,4(sp)
 8009a28:	dc000017 	ldw	r16,0(sp)
 8009a2c:	dec00a04 	addi	sp,sp,40
 8009a30:	80057b01 	jmpi	80057b0 <_malloc_r>
 8009a34:	98800317 	ldw	r2,12(r19)
 8009a38:	98c00217 	ldw	r3,8(r19)
 8009a3c:	81bfff04 	addi	r6,r16,-4
 8009a40:	01000904 	movi	r4,36
 8009a44:	18800315 	stw	r2,12(r3)
 8009a48:	10c00215 	stw	r3,8(r2)
 8009a4c:	9c400204 	addi	r17,r19,8
 8009a50:	21bfd32e 	bgeu	r4,r6,80099a0 <_realloc_r+0x28c>
 8009a54:	8809883a 	mov	r4,r17
 8009a58:	a00b883a 	mov	r5,r20
 8009a5c:	800955c0 	call	800955c <memmove>
 8009a60:	98c00117 	ldw	r3,4(r19)
 8009a64:	b821883a 	mov	r16,r23
 8009a68:	982b883a 	mov	r21,r19
 8009a6c:	003f6106 	br	80097f4 <_realloc_r+0xe0>
 8009a70:	8805883a 	mov	r2,r17
 8009a74:	a007883a 	mov	r3,r20
 8009a78:	003f9906 	br	80098e0 <_realloc_r+0x1cc>
 8009a7c:	8807883a 	mov	r3,r17
 8009a80:	a0800017 	ldw	r2,0(r20)
 8009a84:	b821883a 	mov	r16,r23
 8009a88:	982b883a 	mov	r21,r19
 8009a8c:	18800015 	stw	r2,0(r3)
 8009a90:	a0800117 	ldw	r2,4(r20)
 8009a94:	18800115 	stw	r2,4(r3)
 8009a98:	a0800217 	ldw	r2,8(r20)
 8009a9c:	18800215 	stw	r2,8(r3)
 8009aa0:	98c00117 	ldw	r3,4(r19)
 8009aa4:	003f5306 	br	80097f4 <_realloc_r+0xe0>
 8009aa8:	adab883a 	add	r21,r21,r22
 8009aac:	3585c83a 	sub	r2,r6,r22
 8009ab0:	e5400215 	stw	r21,8(fp)
 8009ab4:	10800054 	ori	r2,r2,1
 8009ab8:	a8800115 	stw	r2,4(r21)
 8009abc:	a0bfff17 	ldw	r2,-4(r20)
 8009ac0:	9009883a 	mov	r4,r18
 8009ac4:	1080004c 	andi	r2,r2,1
 8009ac8:	b0acb03a 	or	r22,r22,r2
 8009acc:	a5bfff15 	stw	r22,-4(r20)
 8009ad0:	800dad80 	call	800dad8 <__malloc_unlock>
 8009ad4:	a005883a 	mov	r2,r20
 8009ad8:	003f5306 	br	8009828 <_realloc_r+0x114>
 8009adc:	8809883a 	mov	r4,r17
 8009ae0:	a00b883a 	mov	r5,r20
 8009ae4:	800955c0 	call	800955c <memmove>
 8009ae8:	003f8306 	br	80098f8 <_realloc_r+0x1e4>
 8009aec:	b0800404 	addi	r2,r22,16
 8009af0:	b8bf6016 	blt	r23,r2,8009874 <_realloc_r+0x160>
 8009af4:	98800317 	ldw	r2,12(r19)
 8009af8:	98c00217 	ldw	r3,8(r19)
 8009afc:	81bfff04 	addi	r6,r16,-4
 8009b00:	01000904 	movi	r4,36
 8009b04:	18800315 	stw	r2,12(r3)
 8009b08:	10c00215 	stw	r3,8(r2)
 8009b0c:	9c400204 	addi	r17,r19,8
 8009b10:	21804336 	bltu	r4,r6,8009c20 <_realloc_r+0x50c>
 8009b14:	008004c4 	movi	r2,19
 8009b18:	11803f2e 	bgeu	r2,r6,8009c18 <_realloc_r+0x504>
 8009b1c:	a0800017 	ldw	r2,0(r20)
 8009b20:	98800215 	stw	r2,8(r19)
 8009b24:	a0800117 	ldw	r2,4(r20)
 8009b28:	98800315 	stw	r2,12(r19)
 8009b2c:	008006c4 	movi	r2,27
 8009b30:	11803f36 	bltu	r2,r6,8009c30 <_realloc_r+0x51c>
 8009b34:	98800404 	addi	r2,r19,16
 8009b38:	a5000204 	addi	r20,r20,8
 8009b3c:	a0c00017 	ldw	r3,0(r20)
 8009b40:	10c00015 	stw	r3,0(r2)
 8009b44:	a0c00117 	ldw	r3,4(r20)
 8009b48:	10c00115 	stw	r3,4(r2)
 8009b4c:	a0c00217 	ldw	r3,8(r20)
 8009b50:	10c00215 	stw	r3,8(r2)
 8009b54:	9d87883a 	add	r3,r19,r22
 8009b58:	bd85c83a 	sub	r2,r23,r22
 8009b5c:	e0c00215 	stw	r3,8(fp)
 8009b60:	10800054 	ori	r2,r2,1
 8009b64:	18800115 	stw	r2,4(r3)
 8009b68:	98800117 	ldw	r2,4(r19)
 8009b6c:	9009883a 	mov	r4,r18
 8009b70:	1080004c 	andi	r2,r2,1
 8009b74:	b0acb03a 	or	r22,r22,r2
 8009b78:	9d800115 	stw	r22,4(r19)
 8009b7c:	800dad80 	call	800dad8 <__malloc_unlock>
 8009b80:	8805883a 	mov	r2,r17
 8009b84:	003f2806 	br	8009828 <_realloc_r+0x114>
 8009b88:	a0c00217 	ldw	r3,8(r20)
 8009b8c:	88c00215 	stw	r3,8(r17)
 8009b90:	a0c00317 	ldw	r3,12(r20)
 8009b94:	88c00315 	stw	r3,12(r17)
 8009b98:	30801126 	beq	r6,r2,8009be0 <_realloc_r+0x4cc>
 8009b9c:	88800404 	addi	r2,r17,16
 8009ba0:	a0c00404 	addi	r3,r20,16
 8009ba4:	003f4e06 	br	80098e0 <_realloc_r+0x1cc>
 8009ba8:	893fff17 	ldw	r4,-4(r17)
 8009bac:	00bfff04 	movi	r2,-4
 8009bb0:	a023883a 	mov	r17,r20
 8009bb4:	2084703a 	and	r2,r4,r2
 8009bb8:	80a1883a 	add	r16,r16,r2
 8009bbc:	003f0d06 	br	80097f4 <_realloc_r+0xe0>
 8009bc0:	a0800217 	ldw	r2,8(r20)
 8009bc4:	98800415 	stw	r2,16(r19)
 8009bc8:	a0800317 	ldw	r2,12(r20)
 8009bcc:	98800515 	stw	r2,20(r19)
 8009bd0:	31000a26 	beq	r6,r4,8009bfc <_realloc_r+0x4e8>
 8009bd4:	98c00604 	addi	r3,r19,24
 8009bd8:	a5000404 	addi	r20,r20,16
 8009bdc:	003fa806 	br	8009a80 <_realloc_r+0x36c>
 8009be0:	a1000417 	ldw	r4,16(r20)
 8009be4:	88800604 	addi	r2,r17,24
 8009be8:	a0c00604 	addi	r3,r20,24
 8009bec:	89000415 	stw	r4,16(r17)
 8009bf0:	a1000517 	ldw	r4,20(r20)
 8009bf4:	89000515 	stw	r4,20(r17)
 8009bf8:	003f3906 	br	80098e0 <_realloc_r+0x1cc>
 8009bfc:	a0800417 	ldw	r2,16(r20)
 8009c00:	a5000604 	addi	r20,r20,24
 8009c04:	98c00804 	addi	r3,r19,32
 8009c08:	98800615 	stw	r2,24(r19)
 8009c0c:	a0bfff17 	ldw	r2,-4(r20)
 8009c10:	98800715 	stw	r2,28(r19)
 8009c14:	003f9a06 	br	8009a80 <_realloc_r+0x36c>
 8009c18:	8805883a 	mov	r2,r17
 8009c1c:	003fc706 	br	8009b3c <_realloc_r+0x428>
 8009c20:	8809883a 	mov	r4,r17
 8009c24:	a00b883a 	mov	r5,r20
 8009c28:	800955c0 	call	800955c <memmove>
 8009c2c:	003fc906 	br	8009b54 <_realloc_r+0x440>
 8009c30:	a0800217 	ldw	r2,8(r20)
 8009c34:	98800415 	stw	r2,16(r19)
 8009c38:	a0800317 	ldw	r2,12(r20)
 8009c3c:	98800515 	stw	r2,20(r19)
 8009c40:	31000726 	beq	r6,r4,8009c60 <_realloc_r+0x54c>
 8009c44:	98800604 	addi	r2,r19,24
 8009c48:	a5000404 	addi	r20,r20,16
 8009c4c:	003fbb06 	br	8009b3c <_realloc_r+0x428>
 8009c50:	9009883a 	mov	r4,r18
 8009c54:	800dad80 	call	800dad8 <__malloc_unlock>
 8009c58:	0005883a 	mov	r2,zero
 8009c5c:	003ef206 	br	8009828 <_realloc_r+0x114>
 8009c60:	a0c00417 	ldw	r3,16(r20)
 8009c64:	a5000604 	addi	r20,r20,24
 8009c68:	98800804 	addi	r2,r19,32
 8009c6c:	98c00615 	stw	r3,24(r19)
 8009c70:	a0ffff17 	ldw	r3,-4(r20)
 8009c74:	98c00715 	stw	r3,28(r19)
 8009c78:	003fb006 	br	8009b3c <_realloc_r+0x428>

08009c7c <__swbuf_r>:
 8009c7c:	defffc04 	addi	sp,sp,-16
 8009c80:	dc800215 	stw	r18,8(sp)
 8009c84:	dc400115 	stw	r17,4(sp)
 8009c88:	dc000015 	stw	r16,0(sp)
 8009c8c:	dfc00315 	stw	ra,12(sp)
 8009c90:	2025883a 	mov	r18,r4
 8009c94:	2823883a 	mov	r17,r5
 8009c98:	3021883a 	mov	r16,r6
 8009c9c:	20000226 	beq	r4,zero,8009ca8 <__swbuf_r+0x2c>
 8009ca0:	20800e17 	ldw	r2,56(r4)
 8009ca4:	10004126 	beq	r2,zero,8009dac <__swbuf_r+0x130>
 8009ca8:	80c00617 	ldw	r3,24(r16)
 8009cac:	8180030b 	ldhu	r6,12(r16)
 8009cb0:	80c00215 	stw	r3,8(r16)
 8009cb4:	30c0020c 	andi	r3,r6,8
 8009cb8:	18003526 	beq	r3,zero,8009d90 <__swbuf_r+0x114>
 8009cbc:	80c00417 	ldw	r3,16(r16)
 8009cc0:	18003326 	beq	r3,zero,8009d90 <__swbuf_r+0x114>
 8009cc4:	3088000c 	andi	r2,r6,8192
 8009cc8:	8c403fcc 	andi	r17,r17,255
 8009ccc:	10001726 	beq	r2,zero,8009d2c <__swbuf_r+0xb0>
 8009cd0:	80800017 	ldw	r2,0(r16)
 8009cd4:	81000517 	ldw	r4,20(r16)
 8009cd8:	10c7c83a 	sub	r3,r2,r3
 8009cdc:	19001d0e 	bge	r3,r4,8009d54 <__swbuf_r+0xd8>
 8009ce0:	18c00044 	addi	r3,r3,1
 8009ce4:	81400217 	ldw	r5,8(r16)
 8009ce8:	11000044 	addi	r4,r2,1
 8009cec:	81000015 	stw	r4,0(r16)
 8009cf0:	297fffc4 	addi	r5,r5,-1
 8009cf4:	81400215 	stw	r5,8(r16)
 8009cf8:	14400005 	stb	r17,0(r2)
 8009cfc:	80800517 	ldw	r2,20(r16)
 8009d00:	10c01d26 	beq	r2,r3,8009d78 <__swbuf_r+0xfc>
 8009d04:	8080030b 	ldhu	r2,12(r16)
 8009d08:	1080004c 	andi	r2,r2,1
 8009d0c:	1000181e 	bne	r2,zero,8009d70 <__swbuf_r+0xf4>
 8009d10:	8805883a 	mov	r2,r17
 8009d14:	dfc00317 	ldw	ra,12(sp)
 8009d18:	dc800217 	ldw	r18,8(sp)
 8009d1c:	dc400117 	ldw	r17,4(sp)
 8009d20:	dc000017 	ldw	r16,0(sp)
 8009d24:	dec00404 	addi	sp,sp,16
 8009d28:	f800283a 	ret
 8009d2c:	81001917 	ldw	r4,100(r16)
 8009d30:	00b7ffc4 	movi	r2,-8193
 8009d34:	31880014 	ori	r6,r6,8192
 8009d38:	2084703a 	and	r2,r4,r2
 8009d3c:	80801915 	stw	r2,100(r16)
 8009d40:	80800017 	ldw	r2,0(r16)
 8009d44:	81000517 	ldw	r4,20(r16)
 8009d48:	8180030d 	sth	r6,12(r16)
 8009d4c:	10c7c83a 	sub	r3,r2,r3
 8009d50:	193fe316 	blt	r3,r4,8009ce0 <__swbuf_r+0x64>
 8009d54:	9009883a 	mov	r4,r18
 8009d58:	800b883a 	mov	r5,r16
 8009d5c:	8004b400 	call	8004b40 <_fflush_r>
 8009d60:	1000091e 	bne	r2,zero,8009d88 <__swbuf_r+0x10c>
 8009d64:	80800017 	ldw	r2,0(r16)
 8009d68:	00c00044 	movi	r3,1
 8009d6c:	003fdd06 	br	8009ce4 <__swbuf_r+0x68>
 8009d70:	00800284 	movi	r2,10
 8009d74:	88bfe61e 	bne	r17,r2,8009d10 <__swbuf_r+0x94>
 8009d78:	9009883a 	mov	r4,r18
 8009d7c:	800b883a 	mov	r5,r16
 8009d80:	8004b400 	call	8004b40 <_fflush_r>
 8009d84:	103fe226 	beq	r2,zero,8009d10 <__swbuf_r+0x94>
 8009d88:	00bfffc4 	movi	r2,-1
 8009d8c:	003fe106 	br	8009d14 <__swbuf_r+0x98>
 8009d90:	9009883a 	mov	r4,r18
 8009d94:	800b883a 	mov	r5,r16
 8009d98:	8002e940 	call	8002e94 <__swsetup_r>
 8009d9c:	103ffa1e 	bne	r2,zero,8009d88 <__swbuf_r+0x10c>
 8009da0:	8180030b 	ldhu	r6,12(r16)
 8009da4:	80c00417 	ldw	r3,16(r16)
 8009da8:	003fc606 	br	8009cc4 <__swbuf_r+0x48>
 8009dac:	8004f2c0 	call	8004f2c <__sinit>
 8009db0:	003fbd06 	br	8009ca8 <__swbuf_r+0x2c>

08009db4 <__swbuf>:
 8009db4:	00c20074 	movhi	r3,2049
 8009db8:	18c73104 	addi	r3,r3,7364
 8009dbc:	2005883a 	mov	r2,r4
 8009dc0:	19000017 	ldw	r4,0(r3)
 8009dc4:	280d883a 	mov	r6,r5
 8009dc8:	100b883a 	mov	r5,r2
 8009dcc:	8009c7c1 	jmpi	8009c7c <__swbuf_r>

08009dd0 <_wcrtomb_r>:
 8009dd0:	defff604 	addi	sp,sp,-40
 8009dd4:	00820074 	movhi	r2,2049
 8009dd8:	dc800815 	stw	r18,32(sp)
 8009ddc:	dc400715 	stw	r17,28(sp)
 8009de0:	dc000615 	stw	r16,24(sp)
 8009de4:	10873504 	addi	r2,r2,7380
 8009de8:	dfc00915 	stw	ra,36(sp)
 8009dec:	2021883a 	mov	r16,r4
 8009df0:	3823883a 	mov	r17,r7
 8009df4:	14800017 	ldw	r18,0(r2)
 8009df8:	28001426 	beq	r5,zero,8009e4c <_wcrtomb_r+0x7c>
 8009dfc:	d9400415 	stw	r5,16(sp)
 8009e00:	d9800515 	stw	r6,20(sp)
 8009e04:	80055940 	call	8005594 <__locale_charset>
 8009e08:	d9400417 	ldw	r5,16(sp)
 8009e0c:	d9800517 	ldw	r6,20(sp)
 8009e10:	8009883a 	mov	r4,r16
 8009e14:	dc400015 	stw	r17,0(sp)
 8009e18:	100f883a 	mov	r7,r2
 8009e1c:	903ee83a 	callr	r18
 8009e20:	00ffffc4 	movi	r3,-1
 8009e24:	10c0031e 	bne	r2,r3,8009e34 <_wcrtomb_r+0x64>
 8009e28:	88000015 	stw	zero,0(r17)
 8009e2c:	00c02284 	movi	r3,138
 8009e30:	80c00015 	stw	r3,0(r16)
 8009e34:	dfc00917 	ldw	ra,36(sp)
 8009e38:	dc800817 	ldw	r18,32(sp)
 8009e3c:	dc400717 	ldw	r17,28(sp)
 8009e40:	dc000617 	ldw	r16,24(sp)
 8009e44:	dec00a04 	addi	sp,sp,40
 8009e48:	f800283a 	ret
 8009e4c:	80055940 	call	8005594 <__locale_charset>
 8009e50:	8009883a 	mov	r4,r16
 8009e54:	dc400015 	stw	r17,0(sp)
 8009e58:	d9400104 	addi	r5,sp,4
 8009e5c:	000d883a 	mov	r6,zero
 8009e60:	100f883a 	mov	r7,r2
 8009e64:	903ee83a 	callr	r18
 8009e68:	003fed06 	br	8009e20 <_wcrtomb_r+0x50>

08009e6c <wcrtomb>:
 8009e6c:	defff604 	addi	sp,sp,-40
 8009e70:	00820074 	movhi	r2,2049
 8009e74:	dc800615 	stw	r18,24(sp)
 8009e78:	dc400515 	stw	r17,20(sp)
 8009e7c:	dc000415 	stw	r16,16(sp)
 8009e80:	10873104 	addi	r2,r2,7364
 8009e84:	dfc00915 	stw	ra,36(sp)
 8009e88:	dd000815 	stw	r20,32(sp)
 8009e8c:	dcc00715 	stw	r19,28(sp)
 8009e90:	2021883a 	mov	r16,r4
 8009e94:	3025883a 	mov	r18,r6
 8009e98:	14400017 	ldw	r17,0(r2)
 8009e9c:	20001826 	beq	r4,zero,8009f00 <wcrtomb+0x94>
 8009ea0:	00820074 	movhi	r2,2049
 8009ea4:	10873504 	addi	r2,r2,7380
 8009ea8:	15000017 	ldw	r20,0(r2)
 8009eac:	2827883a 	mov	r19,r5
 8009eb0:	80055940 	call	8005594 <__locale_charset>
 8009eb4:	8809883a 	mov	r4,r17
 8009eb8:	dc800015 	stw	r18,0(sp)
 8009ebc:	800b883a 	mov	r5,r16
 8009ec0:	980d883a 	mov	r6,r19
 8009ec4:	100f883a 	mov	r7,r2
 8009ec8:	a03ee83a 	callr	r20
 8009ecc:	00ffffc4 	movi	r3,-1
 8009ed0:	10c0031e 	bne	r2,r3,8009ee0 <wcrtomb+0x74>
 8009ed4:	90000015 	stw	zero,0(r18)
 8009ed8:	00c02284 	movi	r3,138
 8009edc:	88c00015 	stw	r3,0(r17)
 8009ee0:	dfc00917 	ldw	ra,36(sp)
 8009ee4:	dd000817 	ldw	r20,32(sp)
 8009ee8:	dcc00717 	ldw	r19,28(sp)
 8009eec:	dc800617 	ldw	r18,24(sp)
 8009ef0:	dc400517 	ldw	r17,20(sp)
 8009ef4:	dc000417 	ldw	r16,16(sp)
 8009ef8:	dec00a04 	addi	sp,sp,40
 8009efc:	f800283a 	ret
 8009f00:	00820074 	movhi	r2,2049
 8009f04:	10873504 	addi	r2,r2,7380
 8009f08:	14000017 	ldw	r16,0(r2)
 8009f0c:	80055940 	call	8005594 <__locale_charset>
 8009f10:	8809883a 	mov	r4,r17
 8009f14:	dc800015 	stw	r18,0(sp)
 8009f18:	d9400104 	addi	r5,sp,4
 8009f1c:	000d883a 	mov	r6,zero
 8009f20:	100f883a 	mov	r7,r2
 8009f24:	803ee83a 	callr	r16
 8009f28:	003fe806 	br	8009ecc <wcrtomb+0x60>

08009f2c <__ascii_wctomb>:
 8009f2c:	28000526 	beq	r5,zero,8009f44 <__ascii_wctomb+0x18>
 8009f30:	00803fc4 	movi	r2,255
 8009f34:	11800536 	bltu	r2,r6,8009f4c <__ascii_wctomb+0x20>
 8009f38:	29800005 	stb	r6,0(r5)
 8009f3c:	00800044 	movi	r2,1
 8009f40:	f800283a 	ret
 8009f44:	0005883a 	mov	r2,zero
 8009f48:	f800283a 	ret
 8009f4c:	00802284 	movi	r2,138
 8009f50:	20800015 	stw	r2,0(r4)
 8009f54:	00bfffc4 	movi	r2,-1
 8009f58:	f800283a 	ret

08009f5c <_wctomb_r>:
 8009f5c:	00820074 	movhi	r2,2049
 8009f60:	defff904 	addi	sp,sp,-28
 8009f64:	10873504 	addi	r2,r2,7380
 8009f68:	dfc00615 	stw	ra,24(sp)
 8009f6c:	dc400515 	stw	r17,20(sp)
 8009f70:	dc000415 	stw	r16,16(sp)
 8009f74:	3823883a 	mov	r17,r7
 8009f78:	14000017 	ldw	r16,0(r2)
 8009f7c:	d9000115 	stw	r4,4(sp)
 8009f80:	d9400215 	stw	r5,8(sp)
 8009f84:	d9800315 	stw	r6,12(sp)
 8009f88:	80055940 	call	8005594 <__locale_charset>
 8009f8c:	d9000117 	ldw	r4,4(sp)
 8009f90:	d9400217 	ldw	r5,8(sp)
 8009f94:	d9800317 	ldw	r6,12(sp)
 8009f98:	dc400015 	stw	r17,0(sp)
 8009f9c:	100f883a 	mov	r7,r2
 8009fa0:	803ee83a 	callr	r16
 8009fa4:	dfc00617 	ldw	ra,24(sp)
 8009fa8:	dc400517 	ldw	r17,20(sp)
 8009fac:	dc000417 	ldw	r16,16(sp)
 8009fb0:	dec00704 	addi	sp,sp,28
 8009fb4:	f800283a 	ret

08009fb8 <__udivdi3>:
 8009fb8:	defff504 	addi	sp,sp,-44
 8009fbc:	dcc00415 	stw	r19,16(sp)
 8009fc0:	dc000115 	stw	r16,4(sp)
 8009fc4:	dfc00a15 	stw	ra,40(sp)
 8009fc8:	df000915 	stw	fp,36(sp)
 8009fcc:	ddc00815 	stw	r23,32(sp)
 8009fd0:	dd800715 	stw	r22,28(sp)
 8009fd4:	dd400615 	stw	r21,24(sp)
 8009fd8:	dd000515 	stw	r20,20(sp)
 8009fdc:	dc800315 	stw	r18,12(sp)
 8009fe0:	dc400215 	stw	r17,8(sp)
 8009fe4:	2027883a 	mov	r19,r4
 8009fe8:	2821883a 	mov	r16,r5
 8009fec:	3800471e 	bne	r7,zero,800a10c <__udivdi3+0x154>
 8009ff0:	3025883a 	mov	r18,r6
 8009ff4:	2023883a 	mov	r17,r4
 8009ff8:	2980592e 	bgeu	r5,r6,800a160 <__udivdi3+0x1a8>
 8009ffc:	00bfffd4 	movui	r2,65535
 800a000:	2829883a 	mov	r20,r5
 800a004:	1180b236 	bltu	r2,r6,800a2d0 <__udivdi3+0x318>
 800a008:	00803fc4 	movi	r2,255
 800a00c:	1181622e 	bgeu	r2,r6,800a598 <__udivdi3+0x5e0>
 800a010:	00800204 	movi	r2,8
 800a014:	1007883a 	mov	r3,r2
 800a018:	3084d83a 	srl	r2,r6,r2
 800a01c:	01020074 	movhi	r4,2049
 800a020:	213fc604 	addi	r4,r4,-232
 800a024:	2085883a 	add	r2,r4,r2
 800a028:	11000003 	ldbu	r4,0(r2)
 800a02c:	20c9883a 	add	r4,r4,r3
 800a030:	00c00804 	movi	r3,32
 800a034:	1907c83a 	sub	r3,r3,r4
 800a038:	18000526 	beq	r3,zero,800a050 <__udivdi3+0x98>
 800a03c:	80e0983a 	sll	r16,r16,r3
 800a040:	9908d83a 	srl	r4,r19,r4
 800a044:	30e4983a 	sll	r18,r6,r3
 800a048:	98e2983a 	sll	r17,r19,r3
 800a04c:	8128b03a 	or	r20,r16,r4
 800a050:	902ad43a 	srli	r21,r18,16
 800a054:	a009883a 	mov	r4,r20
 800a058:	95bfffcc 	andi	r22,r18,65535
 800a05c:	a80b883a 	mov	r5,r21
 800a060:	800ad380 	call	800ad38 <__umodsi3>
 800a064:	a009883a 	mov	r4,r20
 800a068:	a80b883a 	mov	r5,r21
 800a06c:	102f883a 	mov	r23,r2
 800a070:	800ad300 	call	800ad30 <__udivsi3>
 800a074:	1009883a 	mov	r4,r2
 800a078:	b00b883a 	mov	r5,r22
 800a07c:	1021883a 	mov	r16,r2
 800a080:	80005f80 	call	80005f8 <__mulsi3>
 800a084:	b82e943a 	slli	r23,r23,16
 800a088:	8808d43a 	srli	r4,r17,16
 800a08c:	b906b03a 	or	r3,r23,r4
 800a090:	1880052e 	bgeu	r3,r2,800a0a8 <__udivdi3+0xf0>
 800a094:	1c87883a 	add	r3,r3,r18
 800a098:	813fffc4 	addi	r4,r16,-1
 800a09c:	1c800136 	bltu	r3,r18,800a0a4 <__udivdi3+0xec>
 800a0a0:	18815236 	bltu	r3,r2,800a5ec <__udivdi3+0x634>
 800a0a4:	2021883a 	mov	r16,r4
 800a0a8:	18a7c83a 	sub	r19,r3,r2
 800a0ac:	9809883a 	mov	r4,r19
 800a0b0:	a80b883a 	mov	r5,r21
 800a0b4:	800ad380 	call	800ad38 <__umodsi3>
 800a0b8:	1029883a 	mov	r20,r2
 800a0bc:	9809883a 	mov	r4,r19
 800a0c0:	a80b883a 	mov	r5,r21
 800a0c4:	a028943a 	slli	r20,r20,16
 800a0c8:	800ad300 	call	800ad30 <__udivsi3>
 800a0cc:	1009883a 	mov	r4,r2
 800a0d0:	b00b883a 	mov	r5,r22
 800a0d4:	8c7fffcc 	andi	r17,r17,65535
 800a0d8:	1027883a 	mov	r19,r2
 800a0dc:	a462b03a 	or	r17,r20,r17
 800a0e0:	80005f80 	call	80005f8 <__mulsi3>
 800a0e4:	8880052e 	bgeu	r17,r2,800a0fc <__udivdi3+0x144>
 800a0e8:	8ca3883a 	add	r17,r17,r18
 800a0ec:	98ffffc4 	addi	r3,r19,-1
 800a0f0:	8c811036 	bltu	r17,r18,800a534 <__udivdi3+0x57c>
 800a0f4:	88810f2e 	bgeu	r17,r2,800a534 <__udivdi3+0x57c>
 800a0f8:	9cffff84 	addi	r19,r19,-2
 800a0fc:	8020943a 	slli	r16,r16,16
 800a100:	0007883a 	mov	r3,zero
 800a104:	9c04b03a 	or	r2,r19,r16
 800a108:	00006006 	br	800a28c <__udivdi3+0x2d4>
 800a10c:	29c05d36 	bltu	r5,r7,800a284 <__udivdi3+0x2cc>
 800a110:	00bfffd4 	movui	r2,65535
 800a114:	11c0692e 	bgeu	r2,r7,800a2bc <__udivdi3+0x304>
 800a118:	00804034 	movhi	r2,256
 800a11c:	10bfffc4 	addi	r2,r2,-1
 800a120:	11c10e2e 	bgeu	r2,r7,800a55c <__udivdi3+0x5a4>
 800a124:	01400604 	movi	r5,24
 800a128:	2811883a 	mov	r8,r5
 800a12c:	394ad83a 	srl	r5,r7,r5
 800a130:	00820074 	movhi	r2,2049
 800a134:	10bfc604 	addi	r2,r2,-232
 800a138:	114b883a 	add	r5,r2,r5
 800a13c:	29400003 	ldbu	r5,0(r5)
 800a140:	00c00804 	movi	r3,32
 800a144:	2a0b883a 	add	r5,r5,r8
 800a148:	196fc83a 	sub	r23,r3,r5
 800a14c:	b8006b1e 	bne	r23,zero,800a2fc <__udivdi3+0x344>
 800a150:	3c011436 	bltu	r7,r16,800a5a4 <__udivdi3+0x5ec>
 800a154:	9985403a 	cmpgeu	r2,r19,r6
 800a158:	0007883a 	mov	r3,zero
 800a15c:	00004b06 	br	800a28c <__udivdi3+0x2d4>
 800a160:	3000041e 	bne	r6,zero,800a174 <__udivdi3+0x1bc>
 800a164:	01000044 	movi	r4,1
 800a168:	000b883a 	mov	r5,zero
 800a16c:	800ad300 	call	800ad30 <__udivsi3>
 800a170:	1025883a 	mov	r18,r2
 800a174:	00bfffd4 	movui	r2,65535
 800a178:	14805b2e 	bgeu	r2,r18,800a2e8 <__udivdi3+0x330>
 800a17c:	00804034 	movhi	r2,256
 800a180:	10bfffc4 	addi	r2,r2,-1
 800a184:	1480fe2e 	bgeu	r2,r18,800a580 <__udivdi3+0x5c8>
 800a188:	00800604 	movi	r2,24
 800a18c:	1007883a 	mov	r3,r2
 800a190:	9084d83a 	srl	r2,r18,r2
 800a194:	01020074 	movhi	r4,2049
 800a198:	213fc604 	addi	r4,r4,-232
 800a19c:	2085883a 	add	r2,r4,r2
 800a1a0:	11800003 	ldbu	r6,0(r2)
 800a1a4:	01c00804 	movi	r7,32
 800a1a8:	30c7883a 	add	r3,r6,r3
 800a1ac:	38cfc83a 	sub	r7,r7,r3
 800a1b0:	3800a71e 	bne	r7,zero,800a450 <__udivdi3+0x498>
 800a1b4:	9028d43a 	srli	r20,r18,16
 800a1b8:	84a1c83a 	sub	r16,r16,r18
 800a1bc:	957fffcc 	andi	r21,r18,65535
 800a1c0:	00c00044 	movi	r3,1
 800a1c4:	8009883a 	mov	r4,r16
 800a1c8:	a00b883a 	mov	r5,r20
 800a1cc:	d8c00015 	stw	r3,0(sp)
 800a1d0:	800ad380 	call	800ad38 <__umodsi3>
 800a1d4:	8009883a 	mov	r4,r16
 800a1d8:	a00b883a 	mov	r5,r20
 800a1dc:	102d883a 	mov	r22,r2
 800a1e0:	800ad300 	call	800ad30 <__udivsi3>
 800a1e4:	1009883a 	mov	r4,r2
 800a1e8:	a80b883a 	mov	r5,r21
 800a1ec:	1021883a 	mov	r16,r2
 800a1f0:	80005f80 	call	80005f8 <__mulsi3>
 800a1f4:	b02c943a 	slli	r22,r22,16
 800a1f8:	880ed43a 	srli	r7,r17,16
 800a1fc:	d8c00017 	ldw	r3,0(sp)
 800a200:	b1ccb03a 	or	r6,r22,r7
 800a204:	3080052e 	bgeu	r6,r2,800a21c <__udivdi3+0x264>
 800a208:	348d883a 	add	r6,r6,r18
 800a20c:	813fffc4 	addi	r4,r16,-1
 800a210:	34800136 	bltu	r6,r18,800a218 <__udivdi3+0x260>
 800a214:	3080f236 	bltu	r6,r2,800a5e0 <__udivdi3+0x628>
 800a218:	2021883a 	mov	r16,r4
 800a21c:	30a7c83a 	sub	r19,r6,r2
 800a220:	9809883a 	mov	r4,r19
 800a224:	a00b883a 	mov	r5,r20
 800a228:	d8c00015 	stw	r3,0(sp)
 800a22c:	800ad380 	call	800ad38 <__umodsi3>
 800a230:	102d883a 	mov	r22,r2
 800a234:	9809883a 	mov	r4,r19
 800a238:	a00b883a 	mov	r5,r20
 800a23c:	b02c943a 	slli	r22,r22,16
 800a240:	800ad300 	call	800ad30 <__udivsi3>
 800a244:	1009883a 	mov	r4,r2
 800a248:	a80b883a 	mov	r5,r21
 800a24c:	8c7fffcc 	andi	r17,r17,65535
 800a250:	1027883a 	mov	r19,r2
 800a254:	b462b03a 	or	r17,r22,r17
 800a258:	80005f80 	call	80005f8 <__mulsi3>
 800a25c:	d8c00017 	ldw	r3,0(sp)
 800a260:	8880052e 	bgeu	r17,r2,800a278 <__udivdi3+0x2c0>
 800a264:	8ca3883a 	add	r17,r17,r18
 800a268:	993fffc4 	addi	r4,r19,-1
 800a26c:	8c80af36 	bltu	r17,r18,800a52c <__udivdi3+0x574>
 800a270:	8880ae2e 	bgeu	r17,r2,800a52c <__udivdi3+0x574>
 800a274:	9cffff84 	addi	r19,r19,-2
 800a278:	8020943a 	slli	r16,r16,16
 800a27c:	9c04b03a 	or	r2,r19,r16
 800a280:	00000206 	br	800a28c <__udivdi3+0x2d4>
 800a284:	0007883a 	mov	r3,zero
 800a288:	0005883a 	mov	r2,zero
 800a28c:	dfc00a17 	ldw	ra,40(sp)
 800a290:	df000917 	ldw	fp,36(sp)
 800a294:	ddc00817 	ldw	r23,32(sp)
 800a298:	dd800717 	ldw	r22,28(sp)
 800a29c:	dd400617 	ldw	r21,24(sp)
 800a2a0:	dd000517 	ldw	r20,20(sp)
 800a2a4:	dcc00417 	ldw	r19,16(sp)
 800a2a8:	dc800317 	ldw	r18,12(sp)
 800a2ac:	dc400217 	ldw	r17,8(sp)
 800a2b0:	dc000117 	ldw	r16,4(sp)
 800a2b4:	dec00b04 	addi	sp,sp,44
 800a2b8:	f800283a 	ret
 800a2bc:	00803fc4 	movi	r2,255
 800a2c0:	11c0a92e 	bgeu	r2,r7,800a568 <__udivdi3+0x5b0>
 800a2c4:	01400204 	movi	r5,8
 800a2c8:	2811883a 	mov	r8,r5
 800a2cc:	003f9706 	br	800a12c <__udivdi3+0x174>
 800a2d0:	00804034 	movhi	r2,256
 800a2d4:	10bfffc4 	addi	r2,r2,-1
 800a2d8:	1180a62e 	bgeu	r2,r6,800a574 <__udivdi3+0x5bc>
 800a2dc:	00800604 	movi	r2,24
 800a2e0:	1007883a 	mov	r3,r2
 800a2e4:	003f4c06 	br	800a018 <__udivdi3+0x60>
 800a2e8:	00803fc4 	movi	r2,255
 800a2ec:	1480a72e 	bgeu	r2,r18,800a58c <__udivdi3+0x5d4>
 800a2f0:	00800204 	movi	r2,8
 800a2f4:	1007883a 	mov	r3,r2
 800a2f8:	003fa506 	br	800a190 <__udivdi3+0x1d8>
 800a2fc:	3178d83a 	srl	fp,r6,r5
 800a300:	3dce983a 	sll	r7,r7,r23
 800a304:	8168d83a 	srl	r20,r16,r5
 800a308:	9950d83a 	srl	r8,r19,r5
 800a30c:	3f38b03a 	or	fp,r7,fp
 800a310:	e024d43a 	srli	r18,fp,16
 800a314:	85e0983a 	sll	r16,r16,r23
 800a318:	a009883a 	mov	r4,r20
 800a31c:	900b883a 	mov	r5,r18
 800a320:	8220b03a 	or	r16,r16,r8
 800a324:	35ea983a 	sll	r21,r6,r23
 800a328:	800ad380 	call	800ad38 <__umodsi3>
 800a32c:	a009883a 	mov	r4,r20
 800a330:	900b883a 	mov	r5,r18
 800a334:	1023883a 	mov	r17,r2
 800a338:	e5bfffcc 	andi	r22,fp,65535
 800a33c:	800ad300 	call	800ad30 <__udivsi3>
 800a340:	1009883a 	mov	r4,r2
 800a344:	b00b883a 	mov	r5,r22
 800a348:	1029883a 	mov	r20,r2
 800a34c:	80005f80 	call	80005f8 <__mulsi3>
 800a350:	8806943a 	slli	r3,r17,16
 800a354:	8014d43a 	srli	r10,r16,16
 800a358:	1a92b03a 	or	r9,r3,r10
 800a35c:	4880042e 	bgeu	r9,r2,800a370 <__udivdi3+0x3b8>
 800a360:	4f13883a 	add	r9,r9,fp
 800a364:	a0ffffc4 	addi	r3,r20,-1
 800a368:	4f00952e 	bgeu	r9,fp,800a5c0 <__udivdi3+0x608>
 800a36c:	1829883a 	mov	r20,r3
 800a370:	48a3c83a 	sub	r17,r9,r2
 800a374:	8809883a 	mov	r4,r17
 800a378:	900b883a 	mov	r5,r18
 800a37c:	800ad380 	call	800ad38 <__umodsi3>
 800a380:	8809883a 	mov	r4,r17
 800a384:	900b883a 	mov	r5,r18
 800a388:	d8800015 	stw	r2,0(sp)
 800a38c:	800ad300 	call	800ad30 <__udivsi3>
 800a390:	1009883a 	mov	r4,r2
 800a394:	b00b883a 	mov	r5,r22
 800a398:	1023883a 	mov	r17,r2
 800a39c:	80005f80 	call	80005f8 <__mulsi3>
 800a3a0:	d8c00017 	ldw	r3,0(sp)
 800a3a4:	823fffcc 	andi	r8,r16,65535
 800a3a8:	1806943a 	slli	r3,r3,16
 800a3ac:	1a20b03a 	or	r16,r3,r8
 800a3b0:	8080042e 	bgeu	r16,r2,800a3c4 <__udivdi3+0x40c>
 800a3b4:	8721883a 	add	r16,r16,fp
 800a3b8:	88ffffc4 	addi	r3,r17,-1
 800a3bc:	87007c2e 	bgeu	r16,fp,800a5b0 <__udivdi3+0x5f8>
 800a3c0:	1823883a 	mov	r17,r3
 800a3c4:	a028943a 	slli	r20,r20,16
 800a3c8:	acbfffcc 	andi	r18,r21,65535
 800a3cc:	900b883a 	mov	r5,r18
 800a3d0:	8d28b03a 	or	r20,r17,r20
 800a3d4:	a022d43a 	srli	r17,r20,16
 800a3d8:	a5bfffcc 	andi	r22,r20,65535
 800a3dc:	b009883a 	mov	r4,r22
 800a3e0:	a82ad43a 	srli	r21,r21,16
 800a3e4:	80a1c83a 	sub	r16,r16,r2
 800a3e8:	80005f80 	call	80005f8 <__mulsi3>
 800a3ec:	8809883a 	mov	r4,r17
 800a3f0:	900b883a 	mov	r5,r18
 800a3f4:	1039883a 	mov	fp,r2
 800a3f8:	80005f80 	call	80005f8 <__mulsi3>
 800a3fc:	8809883a 	mov	r4,r17
 800a400:	a80b883a 	mov	r5,r21
 800a404:	1025883a 	mov	r18,r2
 800a408:	80005f80 	call	80005f8 <__mulsi3>
 800a40c:	b009883a 	mov	r4,r22
 800a410:	a80b883a 	mov	r5,r21
 800a414:	1023883a 	mov	r17,r2
 800a418:	80005f80 	call	80005f8 <__mulsi3>
 800a41c:	e006d43a 	srli	r3,fp,16
 800a420:	9085883a 	add	r2,r18,r2
 800a424:	10c7883a 	add	r3,r2,r3
 800a428:	1c80022e 	bgeu	r3,r18,800a434 <__udivdi3+0x47c>
 800a42c:	00800074 	movhi	r2,1
 800a430:	88a3883a 	add	r17,r17,r2
 800a434:	1808d43a 	srli	r4,r3,16
 800a438:	8909883a 	add	r4,r17,r4
 800a43c:	81004436 	bltu	r16,r4,800a550 <__udivdi3+0x598>
 800a440:	81003e26 	beq	r16,r4,800a53c <__udivdi3+0x584>
 800a444:	a005883a 	mov	r2,r20
 800a448:	0007883a 	mov	r3,zero
 800a44c:	003f8f06 	br	800a28c <__udivdi3+0x2d4>
 800a450:	91e4983a 	sll	r18,r18,r7
 800a454:	80eed83a 	srl	r23,r16,r3
 800a458:	81cc983a 	sll	r6,r16,r7
 800a45c:	9028d43a 	srli	r20,r18,16
 800a460:	98c6d83a 	srl	r3,r19,r3
 800a464:	b809883a 	mov	r4,r23
 800a468:	a00b883a 	mov	r5,r20
 800a46c:	30ecb03a 	or	r22,r6,r3
 800a470:	99e2983a 	sll	r17,r19,r7
 800a474:	800ad380 	call	800ad38 <__umodsi3>
 800a478:	b809883a 	mov	r4,r23
 800a47c:	a00b883a 	mov	r5,r20
 800a480:	1021883a 	mov	r16,r2
 800a484:	957fffcc 	andi	r21,r18,65535
 800a488:	800ad300 	call	800ad30 <__udivsi3>
 800a48c:	a80b883a 	mov	r5,r21
 800a490:	1009883a 	mov	r4,r2
 800a494:	102f883a 	mov	r23,r2
 800a498:	80005f80 	call	80005f8 <__mulsi3>
 800a49c:	8020943a 	slli	r16,r16,16
 800a4a0:	b00ad43a 	srli	r5,r22,16
 800a4a4:	814cb03a 	or	r6,r16,r5
 800a4a8:	3080062e 	bgeu	r6,r2,800a4c4 <__udivdi3+0x50c>
 800a4ac:	348d883a 	add	r6,r6,r18
 800a4b0:	b8ffffc4 	addi	r3,r23,-1
 800a4b4:	34804836 	bltu	r6,r18,800a5d8 <__udivdi3+0x620>
 800a4b8:	3080472e 	bgeu	r6,r2,800a5d8 <__udivdi3+0x620>
 800a4bc:	bdffff84 	addi	r23,r23,-2
 800a4c0:	348d883a 	add	r6,r6,r18
 800a4c4:	30a7c83a 	sub	r19,r6,r2
 800a4c8:	9809883a 	mov	r4,r19
 800a4cc:	a00b883a 	mov	r5,r20
 800a4d0:	800ad380 	call	800ad38 <__umodsi3>
 800a4d4:	9809883a 	mov	r4,r19
 800a4d8:	a00b883a 	mov	r5,r20
 800a4dc:	1039883a 	mov	fp,r2
 800a4e0:	800ad300 	call	800ad30 <__udivsi3>
 800a4e4:	1009883a 	mov	r4,r2
 800a4e8:	a80b883a 	mov	r5,r21
 800a4ec:	e038943a 	slli	fp,fp,16
 800a4f0:	1027883a 	mov	r19,r2
 800a4f4:	80005f80 	call	80005f8 <__mulsi3>
 800a4f8:	b1bfffcc 	andi	r6,r22,65535
 800a4fc:	e18cb03a 	or	r6,fp,r6
 800a500:	3080062e 	bgeu	r6,r2,800a51c <__udivdi3+0x564>
 800a504:	348d883a 	add	r6,r6,r18
 800a508:	98ffffc4 	addi	r3,r19,-1
 800a50c:	34803036 	bltu	r6,r18,800a5d0 <__udivdi3+0x618>
 800a510:	30802f2e 	bgeu	r6,r2,800a5d0 <__udivdi3+0x618>
 800a514:	9cffff84 	addi	r19,r19,-2
 800a518:	348d883a 	add	r6,r6,r18
 800a51c:	b82e943a 	slli	r23,r23,16
 800a520:	30a1c83a 	sub	r16,r6,r2
 800a524:	9dc6b03a 	or	r3,r19,r23
 800a528:	003f2606 	br	800a1c4 <__udivdi3+0x20c>
 800a52c:	2027883a 	mov	r19,r4
 800a530:	003f5106 	br	800a278 <__udivdi3+0x2c0>
 800a534:	1827883a 	mov	r19,r3
 800a538:	003ef006 	br	800a0fc <__udivdi3+0x144>
 800a53c:	1808943a 	slli	r4,r3,16
 800a540:	9dc6983a 	sll	r3,r19,r23
 800a544:	e73fffcc 	andi	fp,fp,65535
 800a548:	2709883a 	add	r4,r4,fp
 800a54c:	193fbd2e 	bgeu	r3,r4,800a444 <__udivdi3+0x48c>
 800a550:	a0bfffc4 	addi	r2,r20,-1
 800a554:	0007883a 	mov	r3,zero
 800a558:	003f4c06 	br	800a28c <__udivdi3+0x2d4>
 800a55c:	01400404 	movi	r5,16
 800a560:	2811883a 	mov	r8,r5
 800a564:	003ef106 	br	800a12c <__udivdi3+0x174>
 800a568:	000b883a 	mov	r5,zero
 800a56c:	0011883a 	mov	r8,zero
 800a570:	003eee06 	br	800a12c <__udivdi3+0x174>
 800a574:	00800404 	movi	r2,16
 800a578:	1007883a 	mov	r3,r2
 800a57c:	003ea606 	br	800a018 <__udivdi3+0x60>
 800a580:	00800404 	movi	r2,16
 800a584:	1007883a 	mov	r3,r2
 800a588:	003f0106 	br	800a190 <__udivdi3+0x1d8>
 800a58c:	0005883a 	mov	r2,zero
 800a590:	0007883a 	mov	r3,zero
 800a594:	003efe06 	br	800a190 <__udivdi3+0x1d8>
 800a598:	0005883a 	mov	r2,zero
 800a59c:	0007883a 	mov	r3,zero
 800a5a0:	003e9d06 	br	800a018 <__udivdi3+0x60>
 800a5a4:	0007883a 	mov	r3,zero
 800a5a8:	00800044 	movi	r2,1
 800a5ac:	003f3706 	br	800a28c <__udivdi3+0x2d4>
 800a5b0:	80bf832e 	bgeu	r16,r2,800a3c0 <__udivdi3+0x408>
 800a5b4:	8c7fff84 	addi	r17,r17,-2
 800a5b8:	8721883a 	add	r16,r16,fp
 800a5bc:	003f8106 	br	800a3c4 <__udivdi3+0x40c>
 800a5c0:	48bf6a2e 	bgeu	r9,r2,800a36c <__udivdi3+0x3b4>
 800a5c4:	a53fff84 	addi	r20,r20,-2
 800a5c8:	4f13883a 	add	r9,r9,fp
 800a5cc:	003f6806 	br	800a370 <__udivdi3+0x3b8>
 800a5d0:	1827883a 	mov	r19,r3
 800a5d4:	003fd106 	br	800a51c <__udivdi3+0x564>
 800a5d8:	182f883a 	mov	r23,r3
 800a5dc:	003fb906 	br	800a4c4 <__udivdi3+0x50c>
 800a5e0:	843fff84 	addi	r16,r16,-2
 800a5e4:	348d883a 	add	r6,r6,r18
 800a5e8:	003f0c06 	br	800a21c <__udivdi3+0x264>
 800a5ec:	843fff84 	addi	r16,r16,-2
 800a5f0:	1c87883a 	add	r3,r3,r18
 800a5f4:	003eac06 	br	800a0a8 <__udivdi3+0xf0>

0800a5f8 <__umoddi3>:
 800a5f8:	defff404 	addi	sp,sp,-48
 800a5fc:	dd800815 	stw	r22,32(sp)
 800a600:	dc400315 	stw	r17,12(sp)
 800a604:	dc000215 	stw	r16,8(sp)
 800a608:	dfc00b15 	stw	ra,44(sp)
 800a60c:	df000a15 	stw	fp,40(sp)
 800a610:	ddc00915 	stw	r23,36(sp)
 800a614:	dd400715 	stw	r21,28(sp)
 800a618:	dd000615 	stw	r20,24(sp)
 800a61c:	dcc00515 	stw	r19,20(sp)
 800a620:	dc800415 	stw	r18,16(sp)
 800a624:	2021883a 	mov	r16,r4
 800a628:	2823883a 	mov	r17,r5
 800a62c:	282d883a 	mov	r22,r5
 800a630:	38003c1e 	bne	r7,zero,800a724 <__umoddi3+0x12c>
 800a634:	3027883a 	mov	r19,r6
 800a638:	2029883a 	mov	r20,r4
 800a63c:	2980522e 	bgeu	r5,r6,800a788 <__umoddi3+0x190>
 800a640:	00bfffd4 	movui	r2,65535
 800a644:	1180a436 	bltu	r2,r6,800a8d8 <__umoddi3+0x2e0>
 800a648:	00803fc4 	movi	r2,255
 800a64c:	11815e2e 	bgeu	r2,r6,800abc8 <__umoddi3+0x5d0>
 800a650:	01400204 	movi	r5,8
 800a654:	2805883a 	mov	r2,r5
 800a658:	314ad83a 	srl	r5,r6,r5
 800a65c:	00c20074 	movhi	r3,2049
 800a660:	18ffc604 	addi	r3,r3,-232
 800a664:	194b883a 	add	r5,r3,r5
 800a668:	29000003 	ldbu	r4,0(r5)
 800a66c:	2089883a 	add	r4,r4,r2
 800a670:	00800804 	movi	r2,32
 800a674:	1105c83a 	sub	r2,r2,r4
 800a678:	10010c26 	beq	r2,zero,800aaac <__umoddi3+0x4b4>
 800a67c:	88a2983a 	sll	r17,r17,r2
 800a680:	8108d83a 	srl	r4,r16,r4
 800a684:	30a6983a 	sll	r19,r6,r2
 800a688:	80a8983a 	sll	r20,r16,r2
 800a68c:	1025883a 	mov	r18,r2
 800a690:	892cb03a 	or	r22,r17,r4
 800a694:	9822d43a 	srli	r17,r19,16
 800a698:	b009883a 	mov	r4,r22
 800a69c:	9d7fffcc 	andi	r21,r19,65535
 800a6a0:	880b883a 	mov	r5,r17
 800a6a4:	800ad380 	call	800ad38 <__umodsi3>
 800a6a8:	b009883a 	mov	r4,r22
 800a6ac:	880b883a 	mov	r5,r17
 800a6b0:	102f883a 	mov	r23,r2
 800a6b4:	800ad300 	call	800ad30 <__udivsi3>
 800a6b8:	1009883a 	mov	r4,r2
 800a6bc:	a80b883a 	mov	r5,r21
 800a6c0:	80005f80 	call	80005f8 <__mulsi3>
 800a6c4:	b82e943a 	slli	r23,r23,16
 800a6c8:	a008d43a 	srli	r4,r20,16
 800a6cc:	b906b03a 	or	r3,r23,r4
 800a6d0:	1880042e 	bgeu	r3,r2,800a6e4 <__umoddi3+0xec>
 800a6d4:	1cc7883a 	add	r3,r3,r19
 800a6d8:	1cc00236 	bltu	r3,r19,800a6e4 <__umoddi3+0xec>
 800a6dc:	1880012e 	bgeu	r3,r2,800a6e4 <__umoddi3+0xec>
 800a6e0:	1cc7883a 	add	r3,r3,r19
 800a6e4:	18a1c83a 	sub	r16,r3,r2
 800a6e8:	8009883a 	mov	r4,r16
 800a6ec:	880b883a 	mov	r5,r17
 800a6f0:	800ad380 	call	800ad38 <__umodsi3>
 800a6f4:	8009883a 	mov	r4,r16
 800a6f8:	880b883a 	mov	r5,r17
 800a6fc:	102d883a 	mov	r22,r2
 800a700:	800ad300 	call	800ad30 <__udivsi3>
 800a704:	1009883a 	mov	r4,r2
 800a708:	a80b883a 	mov	r5,r21
 800a70c:	b02c943a 	slli	r22,r22,16
 800a710:	80005f80 	call	80005f8 <__mulsi3>
 800a714:	a13fffcc 	andi	r4,r20,65535
 800a718:	b106b03a 	or	r3,r22,r4
 800a71c:	1880572e 	bgeu	r3,r2,800a87c <__umoddi3+0x284>
 800a720:	00005206 	br	800a86c <__umoddi3+0x274>
 800a724:	29c05936 	bltu	r5,r7,800a88c <__umoddi3+0x294>
 800a728:	00bfffd4 	movui	r2,65535
 800a72c:	11c0652e 	bgeu	r2,r7,800a8c4 <__umoddi3+0x2cc>
 800a730:	00804034 	movhi	r2,256
 800a734:	10bfffc4 	addi	r2,r2,-1
 800a738:	11c1172e 	bgeu	r2,r7,800ab98 <__umoddi3+0x5a0>
 800a73c:	01400604 	movi	r5,24
 800a740:	282b883a 	mov	r21,r5
 800a744:	394ad83a 	srl	r5,r7,r5
 800a748:	00c20074 	movhi	r3,2049
 800a74c:	18ffc604 	addi	r3,r3,-232
 800a750:	194b883a 	add	r5,r3,r5
 800a754:	28800003 	ldbu	r2,0(r5)
 800a758:	00c00804 	movi	r3,32
 800a75c:	156b883a 	add	r21,r2,r21
 800a760:	1d69c83a 	sub	r20,r3,r21
 800a764:	a000671e 	bne	r20,zero,800a904 <__umoddi3+0x30c>
 800a768:	3c400136 	bltu	r7,r17,800a770 <__umoddi3+0x178>
 800a76c:	81812336 	bltu	r16,r6,800abfc <__umoddi3+0x604>
 800a770:	8185c83a 	sub	r2,r16,r6
 800a774:	89e3c83a 	sub	r17,r17,r7
 800a778:	8087803a 	cmpltu	r3,r16,r2
 800a77c:	88edc83a 	sub	r22,r17,r3
 800a780:	b007883a 	mov	r3,r22
 800a784:	00004306 	br	800a894 <__umoddi3+0x29c>
 800a788:	3000041e 	bne	r6,zero,800a79c <__umoddi3+0x1a4>
 800a78c:	01000044 	movi	r4,1
 800a790:	000b883a 	mov	r5,zero
 800a794:	800ad300 	call	800ad30 <__udivsi3>
 800a798:	1027883a 	mov	r19,r2
 800a79c:	00bfffd4 	movui	r2,65535
 800a7a0:	14c0532e 	bgeu	r2,r19,800a8f0 <__umoddi3+0x2f8>
 800a7a4:	00804034 	movhi	r2,256
 800a7a8:	10bfffc4 	addi	r2,r2,-1
 800a7ac:	14c1032e 	bgeu	r2,r19,800abbc <__umoddi3+0x5c4>
 800a7b0:	00800604 	movi	r2,24
 800a7b4:	1007883a 	mov	r3,r2
 800a7b8:	9884d83a 	srl	r2,r19,r2
 800a7bc:	01020074 	movhi	r4,2049
 800a7c0:	213fc604 	addi	r4,r4,-232
 800a7c4:	2085883a 	add	r2,r4,r2
 800a7c8:	11000003 	ldbu	r4,0(r2)
 800a7cc:	00800804 	movi	r2,32
 800a7d0:	20c7883a 	add	r3,r4,r3
 800a7d4:	10c5c83a 	sub	r2,r2,r3
 800a7d8:	1000b61e 	bne	r2,zero,800aab4 <__umoddi3+0x4bc>
 800a7dc:	982ad43a 	srli	r21,r19,16
 800a7e0:	8ce3c83a 	sub	r17,r17,r19
 800a7e4:	9dbfffcc 	andi	r22,r19,65535
 800a7e8:	0025883a 	mov	r18,zero
 800a7ec:	8809883a 	mov	r4,r17
 800a7f0:	a80b883a 	mov	r5,r21
 800a7f4:	800ad380 	call	800ad38 <__umodsi3>
 800a7f8:	8809883a 	mov	r4,r17
 800a7fc:	a80b883a 	mov	r5,r21
 800a800:	102f883a 	mov	r23,r2
 800a804:	800ad300 	call	800ad30 <__udivsi3>
 800a808:	1009883a 	mov	r4,r2
 800a80c:	b00b883a 	mov	r5,r22
 800a810:	80005f80 	call	80005f8 <__mulsi3>
 800a814:	b82e943a 	slli	r23,r23,16
 800a818:	a008d43a 	srli	r4,r20,16
 800a81c:	b906b03a 	or	r3,r23,r4
 800a820:	1880032e 	bgeu	r3,r2,800a830 <__umoddi3+0x238>
 800a824:	1cc7883a 	add	r3,r3,r19
 800a828:	1cc00136 	bltu	r3,r19,800a830 <__umoddi3+0x238>
 800a82c:	1880f136 	bltu	r3,r2,800abf4 <__umoddi3+0x5fc>
 800a830:	18a1c83a 	sub	r16,r3,r2
 800a834:	8009883a 	mov	r4,r16
 800a838:	a80b883a 	mov	r5,r21
 800a83c:	800ad380 	call	800ad38 <__umodsi3>
 800a840:	8009883a 	mov	r4,r16
 800a844:	a80b883a 	mov	r5,r21
 800a848:	1023883a 	mov	r17,r2
 800a84c:	800ad300 	call	800ad30 <__udivsi3>
 800a850:	1009883a 	mov	r4,r2
 800a854:	b00b883a 	mov	r5,r22
 800a858:	8822943a 	slli	r17,r17,16
 800a85c:	80005f80 	call	80005f8 <__mulsi3>
 800a860:	a13fffcc 	andi	r4,r20,65535
 800a864:	8906b03a 	or	r3,r17,r4
 800a868:	1880042e 	bgeu	r3,r2,800a87c <__umoddi3+0x284>
 800a86c:	1cc7883a 	add	r3,r3,r19
 800a870:	1cc00236 	bltu	r3,r19,800a87c <__umoddi3+0x284>
 800a874:	1880012e 	bgeu	r3,r2,800a87c <__umoddi3+0x284>
 800a878:	1cc7883a 	add	r3,r3,r19
 800a87c:	1887c83a 	sub	r3,r3,r2
 800a880:	1c84d83a 	srl	r2,r3,r18
 800a884:	0007883a 	mov	r3,zero
 800a888:	00000206 	br	800a894 <__umoddi3+0x29c>
 800a88c:	2005883a 	mov	r2,r4
 800a890:	2807883a 	mov	r3,r5
 800a894:	dfc00b17 	ldw	ra,44(sp)
 800a898:	df000a17 	ldw	fp,40(sp)
 800a89c:	ddc00917 	ldw	r23,36(sp)
 800a8a0:	dd800817 	ldw	r22,32(sp)
 800a8a4:	dd400717 	ldw	r21,28(sp)
 800a8a8:	dd000617 	ldw	r20,24(sp)
 800a8ac:	dcc00517 	ldw	r19,20(sp)
 800a8b0:	dc800417 	ldw	r18,16(sp)
 800a8b4:	dc400317 	ldw	r17,12(sp)
 800a8b8:	dc000217 	ldw	r16,8(sp)
 800a8bc:	dec00c04 	addi	sp,sp,48
 800a8c0:	f800283a 	ret
 800a8c4:	00803fc4 	movi	r2,255
 800a8c8:	11c0b02e 	bgeu	r2,r7,800ab8c <__umoddi3+0x594>
 800a8cc:	01400204 	movi	r5,8
 800a8d0:	282b883a 	mov	r21,r5
 800a8d4:	003f9b06 	br	800a744 <__umoddi3+0x14c>
 800a8d8:	00804034 	movhi	r2,256
 800a8dc:	10bfffc4 	addi	r2,r2,-1
 800a8e0:	1180b02e 	bgeu	r2,r6,800aba4 <__umoddi3+0x5ac>
 800a8e4:	01400604 	movi	r5,24
 800a8e8:	2805883a 	mov	r2,r5
 800a8ec:	003f5a06 	br	800a658 <__umoddi3+0x60>
 800a8f0:	00803fc4 	movi	r2,255
 800a8f4:	14c0ae2e 	bgeu	r2,r19,800abb0 <__umoddi3+0x5b8>
 800a8f8:	00800204 	movi	r2,8
 800a8fc:	1007883a 	mov	r3,r2
 800a900:	003fad06 	br	800a7b8 <__umoddi3+0x1c0>
 800a904:	3d0a983a 	sll	r5,r7,r20
 800a908:	356cd83a 	srl	r22,r6,r21
 800a90c:	8d78d83a 	srl	fp,r17,r21
 800a910:	8d10983a 	sll	r8,r17,r20
 800a914:	2dacb03a 	or	r22,r5,r22
 800a918:	b02ed43a 	srli	r23,r22,16
 800a91c:	8564d83a 	srl	r18,r16,r21
 800a920:	e009883a 	mov	r4,fp
 800a924:	b80b883a 	mov	r5,r23
 800a928:	44a4b03a 	or	r18,r8,r18
 800a92c:	3526983a 	sll	r19,r6,r20
 800a930:	800ad380 	call	800ad38 <__umodsi3>
 800a934:	e009883a 	mov	r4,fp
 800a938:	b80b883a 	mov	r5,r23
 800a93c:	b47fffcc 	andi	r17,r22,65535
 800a940:	d8800015 	stw	r2,0(sp)
 800a944:	800ad300 	call	800ad30 <__udivsi3>
 800a948:	1009883a 	mov	r4,r2
 800a94c:	880b883a 	mov	r5,r17
 800a950:	1039883a 	mov	fp,r2
 800a954:	80005f80 	call	80005f8 <__mulsi3>
 800a958:	d9800017 	ldw	r6,0(sp)
 800a95c:	9008d43a 	srli	r4,r18,16
 800a960:	8520983a 	sll	r16,r16,r20
 800a964:	300c943a 	slli	r6,r6,16
 800a968:	3106b03a 	or	r3,r6,r4
 800a96c:	1880042e 	bgeu	r3,r2,800a980 <__umoddi3+0x388>
 800a970:	1d87883a 	add	r3,r3,r22
 800a974:	e13fffc4 	addi	r4,fp,-1
 800a978:	1d809a2e 	bgeu	r3,r22,800abe4 <__umoddi3+0x5ec>
 800a97c:	2039883a 	mov	fp,r4
 800a980:	1887c83a 	sub	r3,r3,r2
 800a984:	1809883a 	mov	r4,r3
 800a988:	b80b883a 	mov	r5,r23
 800a98c:	d8c00115 	stw	r3,4(sp)
 800a990:	800ad380 	call	800ad38 <__umodsi3>
 800a994:	d8c00117 	ldw	r3,4(sp)
 800a998:	b80b883a 	mov	r5,r23
 800a99c:	d8800015 	stw	r2,0(sp)
 800a9a0:	1809883a 	mov	r4,r3
 800a9a4:	800ad300 	call	800ad30 <__udivsi3>
 800a9a8:	880b883a 	mov	r5,r17
 800a9ac:	1009883a 	mov	r4,r2
 800a9b0:	102f883a 	mov	r23,r2
 800a9b4:	80005f80 	call	80005f8 <__mulsi3>
 800a9b8:	d9800017 	ldw	r6,0(sp)
 800a9bc:	947fffcc 	andi	r17,r18,65535
 800a9c0:	300c943a 	slli	r6,r6,16
 800a9c4:	3464b03a 	or	r18,r6,r17
 800a9c8:	9080042e 	bgeu	r18,r2,800a9dc <__umoddi3+0x3e4>
 800a9cc:	95a5883a 	add	r18,r18,r22
 800a9d0:	b8ffffc4 	addi	r3,r23,-1
 800a9d4:	95807f2e 	bgeu	r18,r22,800abd4 <__umoddi3+0x5dc>
 800a9d8:	182f883a 	mov	r23,r3
 800a9dc:	e038943a 	slli	fp,fp,16
 800a9e0:	980cd43a 	srli	r6,r19,16
 800a9e4:	98ffffcc 	andi	r3,r19,65535
 800a9e8:	bf38b03a 	or	fp,r23,fp
 800a9ec:	e02ed43a 	srli	r23,fp,16
 800a9f0:	e73fffcc 	andi	fp,fp,65535
 800a9f4:	180b883a 	mov	r5,r3
 800a9f8:	e009883a 	mov	r4,fp
 800a9fc:	d9800015 	stw	r6,0(sp)
 800aa00:	d8c00115 	stw	r3,4(sp)
 800aa04:	90a5c83a 	sub	r18,r18,r2
 800aa08:	80005f80 	call	80005f8 <__mulsi3>
 800aa0c:	d8c00117 	ldw	r3,4(sp)
 800aa10:	b809883a 	mov	r4,r23
 800aa14:	1023883a 	mov	r17,r2
 800aa18:	180b883a 	mov	r5,r3
 800aa1c:	80005f80 	call	80005f8 <__mulsi3>
 800aa20:	d9800017 	ldw	r6,0(sp)
 800aa24:	b809883a 	mov	r4,r23
 800aa28:	d8800115 	stw	r2,4(sp)
 800aa2c:	300b883a 	mov	r5,r6
 800aa30:	302f883a 	mov	r23,r6
 800aa34:	80005f80 	call	80005f8 <__mulsi3>
 800aa38:	e009883a 	mov	r4,fp
 800aa3c:	b80b883a 	mov	r5,r23
 800aa40:	d8800015 	stw	r2,0(sp)
 800aa44:	80005f80 	call	80005f8 <__mulsi3>
 800aa48:	d8c00117 	ldw	r3,4(sp)
 800aa4c:	880cd43a 	srli	r6,r17,16
 800aa50:	d9c00017 	ldw	r7,0(sp)
 800aa54:	1885883a 	add	r2,r3,r2
 800aa58:	118d883a 	add	r6,r2,r6
 800aa5c:	30c0022e 	bgeu	r6,r3,800aa68 <__umoddi3+0x470>
 800aa60:	00800074 	movhi	r2,1
 800aa64:	388f883a 	add	r7,r7,r2
 800aa68:	3006d43a 	srli	r3,r6,16
 800aa6c:	300c943a 	slli	r6,r6,16
 800aa70:	8c7fffcc 	andi	r17,r17,65535
 800aa74:	38c7883a 	add	r3,r7,r3
 800aa78:	3463883a 	add	r17,r6,r17
 800aa7c:	90c03d36 	bltu	r18,r3,800ab74 <__umoddi3+0x57c>
 800aa80:	90c06026 	beq	r18,r3,800ac04 <__umoddi3+0x60c>
 800aa84:	90c9c83a 	sub	r4,r18,r3
 800aa88:	880f883a 	mov	r7,r17
 800aa8c:	81cfc83a 	sub	r7,r16,r7
 800aa90:	81c7803a 	cmpltu	r3,r16,r7
 800aa94:	20c7c83a 	sub	r3,r4,r3
 800aa98:	1d44983a 	sll	r2,r3,r21
 800aa9c:	3d0ed83a 	srl	r7,r7,r20
 800aaa0:	1d06d83a 	srl	r3,r3,r20
 800aaa4:	11c4b03a 	or	r2,r2,r7
 800aaa8:	003f7a06 	br	800a894 <__umoddi3+0x29c>
 800aaac:	0025883a 	mov	r18,zero
 800aab0:	003ef806 	br	800a694 <__umoddi3+0x9c>
 800aab4:	98a6983a 	sll	r19,r19,r2
 800aab8:	88e8d83a 	srl	r20,r17,r3
 800aabc:	80c6d83a 	srl	r3,r16,r3
 800aac0:	982ad43a 	srli	r21,r19,16
 800aac4:	88a2983a 	sll	r17,r17,r2
 800aac8:	a009883a 	mov	r4,r20
 800aacc:	a80b883a 	mov	r5,r21
 800aad0:	88eeb03a 	or	r23,r17,r3
 800aad4:	1025883a 	mov	r18,r2
 800aad8:	800ad380 	call	800ad38 <__umodsi3>
 800aadc:	a009883a 	mov	r4,r20
 800aae0:	a80b883a 	mov	r5,r21
 800aae4:	1023883a 	mov	r17,r2
 800aae8:	9dbfffcc 	andi	r22,r19,65535
 800aaec:	800ad300 	call	800ad30 <__udivsi3>
 800aaf0:	1009883a 	mov	r4,r2
 800aaf4:	b00b883a 	mov	r5,r22
 800aaf8:	80005f80 	call	80005f8 <__mulsi3>
 800aafc:	8822943a 	slli	r17,r17,16
 800ab00:	b808d43a 	srli	r4,r23,16
 800ab04:	84a8983a 	sll	r20,r16,r18
 800ab08:	8906b03a 	or	r3,r17,r4
 800ab0c:	1880042e 	bgeu	r3,r2,800ab20 <__umoddi3+0x528>
 800ab10:	1cc7883a 	add	r3,r3,r19
 800ab14:	1cc00236 	bltu	r3,r19,800ab20 <__umoddi3+0x528>
 800ab18:	1880012e 	bgeu	r3,r2,800ab20 <__umoddi3+0x528>
 800ab1c:	1cc7883a 	add	r3,r3,r19
 800ab20:	18a1c83a 	sub	r16,r3,r2
 800ab24:	8009883a 	mov	r4,r16
 800ab28:	a80b883a 	mov	r5,r21
 800ab2c:	800ad380 	call	800ad38 <__umodsi3>
 800ab30:	8009883a 	mov	r4,r16
 800ab34:	a80b883a 	mov	r5,r21
 800ab38:	1039883a 	mov	fp,r2
 800ab3c:	800ad300 	call	800ad30 <__udivsi3>
 800ab40:	1009883a 	mov	r4,r2
 800ab44:	b00b883a 	mov	r5,r22
 800ab48:	80005f80 	call	80005f8 <__mulsi3>
 800ab4c:	e006943a 	slli	r3,fp,16
 800ab50:	b93fffcc 	andi	r4,r23,65535
 800ab54:	1906b03a 	or	r3,r3,r4
 800ab58:	1880042e 	bgeu	r3,r2,800ab6c <__umoddi3+0x574>
 800ab5c:	1cc7883a 	add	r3,r3,r19
 800ab60:	1cc00236 	bltu	r3,r19,800ab6c <__umoddi3+0x574>
 800ab64:	1880012e 	bgeu	r3,r2,800ab6c <__umoddi3+0x574>
 800ab68:	1cc7883a 	add	r3,r3,r19
 800ab6c:	18a3c83a 	sub	r17,r3,r2
 800ab70:	003f1e06 	br	800a7ec <__umoddi3+0x1f4>
 800ab74:	8ccfc83a 	sub	r7,r17,r19
 800ab78:	1d89c83a 	sub	r4,r3,r22
 800ab7c:	89e3803a 	cmpltu	r17,r17,r7
 800ab80:	2463c83a 	sub	r17,r4,r17
 800ab84:	9449c83a 	sub	r4,r18,r17
 800ab88:	003fc006 	br	800aa8c <__umoddi3+0x494>
 800ab8c:	000b883a 	mov	r5,zero
 800ab90:	002b883a 	mov	r21,zero
 800ab94:	003eeb06 	br	800a744 <__umoddi3+0x14c>
 800ab98:	01400404 	movi	r5,16
 800ab9c:	282b883a 	mov	r21,r5
 800aba0:	003ee806 	br	800a744 <__umoddi3+0x14c>
 800aba4:	01400404 	movi	r5,16
 800aba8:	2805883a 	mov	r2,r5
 800abac:	003eaa06 	br	800a658 <__umoddi3+0x60>
 800abb0:	0005883a 	mov	r2,zero
 800abb4:	0007883a 	mov	r3,zero
 800abb8:	003eff06 	br	800a7b8 <__umoddi3+0x1c0>
 800abbc:	00800404 	movi	r2,16
 800abc0:	1007883a 	mov	r3,r2
 800abc4:	003efc06 	br	800a7b8 <__umoddi3+0x1c0>
 800abc8:	000b883a 	mov	r5,zero
 800abcc:	0005883a 	mov	r2,zero
 800abd0:	003ea106 	br	800a658 <__umoddi3+0x60>
 800abd4:	90bf802e 	bgeu	r18,r2,800a9d8 <__umoddi3+0x3e0>
 800abd8:	bdffff84 	addi	r23,r23,-2
 800abdc:	95a5883a 	add	r18,r18,r22
 800abe0:	003f7e06 	br	800a9dc <__umoddi3+0x3e4>
 800abe4:	18bf652e 	bgeu	r3,r2,800a97c <__umoddi3+0x384>
 800abe8:	e73fff84 	addi	fp,fp,-2
 800abec:	1d87883a 	add	r3,r3,r22
 800abf0:	003f6306 	br	800a980 <__umoddi3+0x388>
 800abf4:	1cc7883a 	add	r3,r3,r19
 800abf8:	003f0d06 	br	800a830 <__umoddi3+0x238>
 800abfc:	8005883a 	mov	r2,r16
 800ac00:	003edf06 	br	800a780 <__umoddi3+0x188>
 800ac04:	847fdb36 	bltu	r16,r17,800ab74 <__umoddi3+0x57c>
 800ac08:	880f883a 	mov	r7,r17
 800ac0c:	0009883a 	mov	r4,zero
 800ac10:	003f9e06 	br	800aa8c <__umoddi3+0x494>

0800ac14 <udivmodsi4>:
 800ac14:	2900182e 	bgeu	r5,r4,800ac78 <udivmodsi4+0x64>
 800ac18:	28001716 	blt	r5,zero,800ac78 <udivmodsi4+0x64>
 800ac1c:	00800804 	movi	r2,32
 800ac20:	00c00044 	movi	r3,1
 800ac24:	00000206 	br	800ac30 <udivmodsi4+0x1c>
 800ac28:	10001126 	beq	r2,zero,800ac70 <udivmodsi4+0x5c>
 800ac2c:	28000516 	blt	r5,zero,800ac44 <udivmodsi4+0x30>
 800ac30:	294b883a 	add	r5,r5,r5
 800ac34:	10bfffc4 	addi	r2,r2,-1
 800ac38:	18c7883a 	add	r3,r3,r3
 800ac3c:	293ffa36 	bltu	r5,r4,800ac28 <udivmodsi4+0x14>
 800ac40:	18000b26 	beq	r3,zero,800ac70 <udivmodsi4+0x5c>
 800ac44:	0005883a 	mov	r2,zero
 800ac48:	21400236 	bltu	r4,r5,800ac54 <udivmodsi4+0x40>
 800ac4c:	2149c83a 	sub	r4,r4,r5
 800ac50:	10c4b03a 	or	r2,r2,r3
 800ac54:	1806d07a 	srli	r3,r3,1
 800ac58:	280ad07a 	srli	r5,r5,1
 800ac5c:	183ffa1e 	bne	r3,zero,800ac48 <udivmodsi4+0x34>
 800ac60:	3000011e 	bne	r6,zero,800ac68 <udivmodsi4+0x54>
 800ac64:	f800283a 	ret
 800ac68:	2005883a 	mov	r2,r4
 800ac6c:	f800283a 	ret
 800ac70:	0005883a 	mov	r2,zero
 800ac74:	003ffa06 	br	800ac60 <udivmodsi4+0x4c>
 800ac78:	00c00044 	movi	r3,1
 800ac7c:	003ff106 	br	800ac44 <udivmodsi4+0x30>

0800ac80 <__divsi3>:
 800ac80:	defffe04 	addi	sp,sp,-8
 800ac84:	dfc00115 	stw	ra,4(sp)
 800ac88:	dc000015 	stw	r16,0(sp)
 800ac8c:	20000b16 	blt	r4,zero,800acbc <__divsi3+0x3c>
 800ac90:	0021883a 	mov	r16,zero
 800ac94:	28000c16 	blt	r5,zero,800acc8 <__divsi3+0x48>
 800ac98:	000d883a 	mov	r6,zero
 800ac9c:	800ac140 	call	800ac14 <udivmodsi4>
 800aca0:	0407c83a 	sub	r3,zero,r16
 800aca4:	1884f03a 	xor	r2,r3,r2
 800aca8:	1405883a 	add	r2,r2,r16
 800acac:	dfc00117 	ldw	ra,4(sp)
 800acb0:	dc000017 	ldw	r16,0(sp)
 800acb4:	dec00204 	addi	sp,sp,8
 800acb8:	f800283a 	ret
 800acbc:	0109c83a 	sub	r4,zero,r4
 800acc0:	04000044 	movi	r16,1
 800acc4:	283ff40e 	bge	r5,zero,800ac98 <__divsi3+0x18>
 800acc8:	014bc83a 	sub	r5,zero,r5
 800accc:	8400005c 	xori	r16,r16,1
 800acd0:	003ff106 	br	800ac98 <__divsi3+0x18>

0800acd4 <__modsi3>:
 800acd4:	defffd04 	addi	sp,sp,-12
 800acd8:	dfc00215 	stw	ra,8(sp)
 800acdc:	dc400115 	stw	r17,4(sp)
 800ace0:	dc000015 	stw	r16,0(sp)
 800ace4:	20000c16 	blt	r4,zero,800ad18 <__modsi3+0x44>
 800ace8:	0023883a 	mov	r17,zero
 800acec:	0021883a 	mov	r16,zero
 800acf0:	28000d16 	blt	r5,zero,800ad28 <__modsi3+0x54>
 800acf4:	01800044 	movi	r6,1
 800acf8:	800ac140 	call	800ac14 <udivmodsi4>
 800acfc:	1404f03a 	xor	r2,r2,r16
 800ad00:	8885883a 	add	r2,r17,r2
 800ad04:	dfc00217 	ldw	ra,8(sp)
 800ad08:	dc400117 	ldw	r17,4(sp)
 800ad0c:	dc000017 	ldw	r16,0(sp)
 800ad10:	dec00304 	addi	sp,sp,12
 800ad14:	f800283a 	ret
 800ad18:	0109c83a 	sub	r4,zero,r4
 800ad1c:	04400044 	movi	r17,1
 800ad20:	043fffc4 	movi	r16,-1
 800ad24:	283ff30e 	bge	r5,zero,800acf4 <__modsi3+0x20>
 800ad28:	014bc83a 	sub	r5,zero,r5
 800ad2c:	003ff106 	br	800acf4 <__modsi3+0x20>

0800ad30 <__udivsi3>:
 800ad30:	000d883a 	mov	r6,zero
 800ad34:	800ac141 	jmpi	800ac14 <udivmodsi4>

0800ad38 <__umodsi3>:
 800ad38:	01800044 	movi	r6,1
 800ad3c:	800ac141 	jmpi	800ac14 <udivmodsi4>

0800ad40 <__adddf3>:
 800ad40:	02000434 	movhi	r8,16
 800ad44:	423fffc4 	addi	r8,r8,-1
 800ad48:	defffb04 	addi	sp,sp,-20
 800ad4c:	2a12703a 	and	r9,r5,r8
 800ad50:	2806d7fa 	srli	r3,r5,31
 800ad54:	3a10703a 	and	r8,r7,r8
 800ad58:	3804d53a 	srli	r2,r7,20
 800ad5c:	3014d77a 	srli	r10,r6,29
 800ad60:	dc000015 	stw	r16,0(sp)
 800ad64:	481290fa 	slli	r9,r9,3
 800ad68:	2820d53a 	srli	r16,r5,20
 800ad6c:	401090fa 	slli	r8,r8,3
 800ad70:	200ad77a 	srli	r5,r4,29
 800ad74:	380ed7fa 	srli	r7,r7,31
 800ad78:	dc800215 	stw	r18,8(sp)
 800ad7c:	dc400115 	stw	r17,4(sp)
 800ad80:	dfc00415 	stw	ra,16(sp)
 800ad84:	dcc00315 	stw	r19,12(sp)
 800ad88:	1c803fcc 	andi	r18,r3,255
 800ad8c:	8401ffcc 	andi	r16,r16,2047
 800ad90:	494ab03a 	or	r5,r9,r5
 800ad94:	202290fa 	slli	r17,r4,3
 800ad98:	1081ffcc 	andi	r2,r2,2047
 800ad9c:	4290b03a 	or	r8,r8,r10
 800ada0:	300c90fa 	slli	r6,r6,3
 800ada4:	91c07026 	beq	r18,r7,800af68 <__adddf3+0x228>
 800ada8:	8087c83a 	sub	r3,r16,r2
 800adac:	00c0b30e 	bge	zero,r3,800b07c <__adddf3+0x33c>
 800adb0:	10002a1e 	bne	r2,zero,800ae5c <__adddf3+0x11c>
 800adb4:	4184b03a 	or	r2,r8,r6
 800adb8:	1000991e 	bne	r2,zero,800b020 <__adddf3+0x2e0>
 800adbc:	888001cc 	andi	r2,r17,7
 800adc0:	10005b26 	beq	r2,zero,800af30 <__adddf3+0x1f0>
 800adc4:	88c003cc 	andi	r3,r17,15
 800adc8:	00800104 	movi	r2,4
 800adcc:	18805826 	beq	r3,r2,800af30 <__adddf3+0x1f0>
 800add0:	89800104 	addi	r6,r17,4
 800add4:	3463803a 	cmpltu	r17,r6,r17
 800add8:	2c4b883a 	add	r5,r5,r17
 800addc:	2880202c 	andhi	r2,r5,128
 800ade0:	9007883a 	mov	r3,r18
 800ade4:	3023883a 	mov	r17,r6
 800ade8:	10005426 	beq	r2,zero,800af3c <__adddf3+0x1fc>
 800adec:	84000044 	addi	r16,r16,1
 800adf0:	0081ffc4 	movi	r2,2047
 800adf4:	8080c126 	beq	r16,r2,800b0fc <__adddf3+0x3bc>
 800adf8:	013fe034 	movhi	r4,65408
 800adfc:	213fffc4 	addi	r4,r4,-1
 800ae00:	290a703a 	and	r5,r5,r4
 800ae04:	2804977a 	slli	r2,r5,29
 800ae08:	280a927a 	slli	r5,r5,9
 800ae0c:	8822d0fa 	srli	r17,r17,3
 800ae10:	8401ffcc 	andi	r16,r16,2047
 800ae14:	2808d33a 	srli	r4,r5,12
 800ae18:	1444b03a 	or	r2,r2,r17
 800ae1c:	8401ffcc 	andi	r16,r16,2047
 800ae20:	800a953a 	slli	r5,r16,20
 800ae24:	18c03fcc 	andi	r3,r3,255
 800ae28:	04000434 	movhi	r16,16
 800ae2c:	180697fa 	slli	r3,r3,31
 800ae30:	843fffc4 	addi	r16,r16,-1
 800ae34:	2420703a 	and	r16,r4,r16
 800ae38:	8160b03a 	or	r16,r16,r5
 800ae3c:	80c6b03a 	or	r3,r16,r3
 800ae40:	dfc00417 	ldw	ra,16(sp)
 800ae44:	dcc00317 	ldw	r19,12(sp)
 800ae48:	dc800217 	ldw	r18,8(sp)
 800ae4c:	dc400117 	ldw	r17,4(sp)
 800ae50:	dc000017 	ldw	r16,0(sp)
 800ae54:	dec00504 	addi	sp,sp,20
 800ae58:	f800283a 	ret
 800ae5c:	0081ffc4 	movi	r2,2047
 800ae60:	80bfd626 	beq	r16,r2,800adbc <__adddf3+0x7c>
 800ae64:	42002034 	orhi	r8,r8,128
 800ae68:	00800e04 	movi	r2,56
 800ae6c:	10c0a616 	blt	r2,r3,800b108 <__adddf3+0x3c8>
 800ae70:	008007c4 	movi	r2,31
 800ae74:	10c0c916 	blt	r2,r3,800b19c <__adddf3+0x45c>
 800ae78:	00800804 	movi	r2,32
 800ae7c:	10c5c83a 	sub	r2,r2,r3
 800ae80:	408e983a 	sll	r7,r8,r2
 800ae84:	30c8d83a 	srl	r4,r6,r3
 800ae88:	3084983a 	sll	r2,r6,r2
 800ae8c:	40c6d83a 	srl	r3,r8,r3
 800ae90:	390cb03a 	or	r6,r7,r4
 800ae94:	1004c03a 	cmpne	r2,r2,zero
 800ae98:	308cb03a 	or	r6,r6,r2
 800ae9c:	898dc83a 	sub	r6,r17,r6
 800aea0:	89a3803a 	cmpltu	r17,r17,r6
 800aea4:	28cbc83a 	sub	r5,r5,r3
 800aea8:	2c4bc83a 	sub	r5,r5,r17
 800aeac:	3023883a 	mov	r17,r6
 800aeb0:	2880202c 	andhi	r2,r5,128
 800aeb4:	10006d26 	beq	r2,zero,800b06c <__adddf3+0x32c>
 800aeb8:	04c02034 	movhi	r19,128
 800aebc:	9cffffc4 	addi	r19,r19,-1
 800aec0:	2ce6703a 	and	r19,r5,r19
 800aec4:	98007e26 	beq	r19,zero,800b0c0 <__adddf3+0x380>
 800aec8:	9809883a 	mov	r4,r19
 800aecc:	8000c900 	call	8000c90 <__clzsi2>
 800aed0:	10fffe04 	addi	r3,r2,-8
 800aed4:	010007c4 	movi	r4,31
 800aed8:	20c07f16 	blt	r4,r3,800b0d8 <__adddf3+0x398>
 800aedc:	01400a04 	movi	r5,40
 800aee0:	2885c83a 	sub	r2,r5,r2
 800aee4:	888ad83a 	srl	r5,r17,r2
 800aee8:	98e6983a 	sll	r19,r19,r3
 800aeec:	88e2983a 	sll	r17,r17,r3
 800aef0:	2ce6b03a 	or	r19,r5,r19
 800aef4:	1c007c16 	blt	r3,r16,800b0e8 <__adddf3+0x3a8>
 800aef8:	1c21c83a 	sub	r16,r3,r16
 800aefc:	81400044 	addi	r5,r16,1
 800af00:	00c007c4 	movi	r3,31
 800af04:	19409816 	blt	r3,r5,800b168 <__adddf3+0x428>
 800af08:	1c21c83a 	sub	r16,r3,r16
 800af0c:	8c08983a 	sll	r4,r17,r16
 800af10:	8946d83a 	srl	r3,r17,r5
 800af14:	9c20983a 	sll	r16,r19,r16
 800af18:	2008c03a 	cmpne	r4,r4,zero
 800af1c:	994ad83a 	srl	r5,r19,r5
 800af20:	1c06b03a 	or	r3,r3,r16
 800af24:	1922b03a 	or	r17,r3,r4
 800af28:	0021883a 	mov	r16,zero
 800af2c:	003fa306 	br	800adbc <__adddf3+0x7c>
 800af30:	2880202c 	andhi	r2,r5,128
 800af34:	9007883a 	mov	r3,r18
 800af38:	103fac1e 	bne	r2,zero,800adec <__adddf3+0xac>
 800af3c:	2804977a 	slli	r2,r5,29
 800af40:	8822d0fa 	srli	r17,r17,3
 800af44:	0101ffc4 	movi	r4,2047
 800af48:	280ad0fa 	srli	r5,r5,3
 800af4c:	1444b03a 	or	r2,r2,r17
 800af50:	81002c26 	beq	r16,r4,800b004 <__adddf3+0x2c4>
 800af54:	8120703a 	and	r16,r16,r4
 800af58:	01000434 	movhi	r4,16
 800af5c:	213fffc4 	addi	r4,r4,-1
 800af60:	2908703a 	and	r4,r5,r4
 800af64:	003fad06 	br	800ae1c <__adddf3+0xdc>
 800af68:	8089c83a 	sub	r4,r16,r2
 800af6c:	01006a0e 	bge	zero,r4,800b118 <__adddf3+0x3d8>
 800af70:	10003326 	beq	r2,zero,800b040 <__adddf3+0x300>
 800af74:	0081ffc4 	movi	r2,2047
 800af78:	80bf9026 	beq	r16,r2,800adbc <__adddf3+0x7c>
 800af7c:	42002034 	orhi	r8,r8,128
 800af80:	00800e04 	movi	r2,56
 800af84:	1100b116 	blt	r2,r4,800b24c <__adddf3+0x50c>
 800af88:	008007c4 	movi	r2,31
 800af8c:	1100e216 	blt	r2,r4,800b318 <__adddf3+0x5d8>
 800af90:	00800804 	movi	r2,32
 800af94:	1105c83a 	sub	r2,r2,r4
 800af98:	4092983a 	sll	r9,r8,r2
 800af9c:	310ed83a 	srl	r7,r6,r4
 800afa0:	3084983a 	sll	r2,r6,r2
 800afa4:	4110d83a 	srl	r8,r8,r4
 800afa8:	49ccb03a 	or	r6,r9,r7
 800afac:	1004c03a 	cmpne	r2,r2,zero
 800afb0:	308cb03a 	or	r6,r6,r2
 800afb4:	344d883a 	add	r6,r6,r17
 800afb8:	3463803a 	cmpltu	r17,r6,r17
 800afbc:	414b883a 	add	r5,r8,r5
 800afc0:	2c4b883a 	add	r5,r5,r17
 800afc4:	3023883a 	mov	r17,r6
 800afc8:	2880202c 	andhi	r2,r5,128
 800afcc:	10002726 	beq	r2,zero,800b06c <__adddf3+0x32c>
 800afd0:	84000044 	addi	r16,r16,1
 800afd4:	0081ffc4 	movi	r2,2047
 800afd8:	8080ae26 	beq	r16,r2,800b294 <__adddf3+0x554>
 800afdc:	00bfe034 	movhi	r2,65408
 800afe0:	10bfffc4 	addi	r2,r2,-1
 800afe4:	288a703a 	and	r5,r5,r2
 800afe8:	880cd07a 	srli	r6,r17,1
 800afec:	280897fa 	slli	r4,r5,31
 800aff0:	88c0004c 	andi	r3,r17,1
 800aff4:	30e2b03a 	or	r17,r6,r3
 800aff8:	280ad07a 	srli	r5,r5,1
 800affc:	8922b03a 	or	r17,r17,r4
 800b000:	003f6e06 	br	800adbc <__adddf3+0x7c>
 800b004:	1148b03a 	or	r4,r2,r5
 800b008:	20003c26 	beq	r4,zero,800b0fc <__adddf3+0x3bc>
 800b00c:	29000234 	orhi	r4,r5,8
 800b010:	01400434 	movhi	r5,16
 800b014:	297fffc4 	addi	r5,r5,-1
 800b018:	2148703a 	and	r4,r4,r5
 800b01c:	003f7f06 	br	800ae1c <__adddf3+0xdc>
 800b020:	18ffffc4 	addi	r3,r3,-1
 800b024:	18004d1e 	bne	r3,zero,800b15c <__adddf3+0x41c>
 800b028:	898dc83a 	sub	r6,r17,r6
 800b02c:	89a3803a 	cmpltu	r17,r17,r6
 800b030:	2a0bc83a 	sub	r5,r5,r8
 800b034:	2c4bc83a 	sub	r5,r5,r17
 800b038:	3023883a 	mov	r17,r6
 800b03c:	003f9c06 	br	800aeb0 <__adddf3+0x170>
 800b040:	4184b03a 	or	r2,r8,r6
 800b044:	103f5d26 	beq	r2,zero,800adbc <__adddf3+0x7c>
 800b048:	213fffc4 	addi	r4,r4,-1
 800b04c:	203fd926 	beq	r4,zero,800afb4 <__adddf3+0x274>
 800b050:	0081ffc4 	movi	r2,2047
 800b054:	80bfca1e 	bne	r16,r2,800af80 <__adddf3+0x240>
 800b058:	003f5806 	br	800adbc <__adddf3+0x7c>
 800b05c:	10c8b03a 	or	r4,r2,r3
 800b060:	20008b26 	beq	r4,zero,800b290 <__adddf3+0x550>
 800b064:	100b883a 	mov	r5,r2
 800b068:	1823883a 	mov	r17,r3
 800b06c:	888001cc 	andi	r2,r17,7
 800b070:	103f541e 	bne	r2,zero,800adc4 <__adddf3+0x84>
 800b074:	9007883a 	mov	r3,r18
 800b078:	003fb006 	br	800af3c <__adddf3+0x1fc>
 800b07c:	1800531e 	bne	r3,zero,800b1cc <__adddf3+0x48c>
 800b080:	80800044 	addi	r2,r16,1
 800b084:	1081ffcc 	andi	r2,r2,2047
 800b088:	00c00044 	movi	r3,1
 800b08c:	1880990e 	bge	r3,r2,800b2f4 <__adddf3+0x5b4>
 800b090:	8985c83a 	sub	r2,r17,r6
 800b094:	8887803a 	cmpltu	r3,r17,r2
 800b098:	2a27c83a 	sub	r19,r5,r8
 800b09c:	98e7c83a 	sub	r19,r19,r3
 800b0a0:	98c0202c 	andhi	r3,r19,128
 800b0a4:	18006226 	beq	r3,zero,800b230 <__adddf3+0x4f0>
 800b0a8:	3463c83a 	sub	r17,r6,r17
 800b0ac:	4151c83a 	sub	r8,r8,r5
 800b0b0:	344d803a 	cmpltu	r6,r6,r17
 800b0b4:	41a7c83a 	sub	r19,r8,r6
 800b0b8:	3825883a 	mov	r18,r7
 800b0bc:	983f821e 	bne	r19,zero,800aec8 <__adddf3+0x188>
 800b0c0:	8809883a 	mov	r4,r17
 800b0c4:	8000c900 	call	8000c90 <__clzsi2>
 800b0c8:	10800804 	addi	r2,r2,32
 800b0cc:	10fffe04 	addi	r3,r2,-8
 800b0d0:	010007c4 	movi	r4,31
 800b0d4:	20ff810e 	bge	r4,r3,800aedc <__adddf3+0x19c>
 800b0d8:	14fff604 	addi	r19,r2,-40
 800b0dc:	8ce6983a 	sll	r19,r17,r19
 800b0e0:	0023883a 	mov	r17,zero
 800b0e4:	1c3f840e 	bge	r3,r16,800aef8 <__adddf3+0x1b8>
 800b0e8:	017fe034 	movhi	r5,65408
 800b0ec:	297fffc4 	addi	r5,r5,-1
 800b0f0:	80e1c83a 	sub	r16,r16,r3
 800b0f4:	994a703a 	and	r5,r19,r5
 800b0f8:	003f3006 	br	800adbc <__adddf3+0x7c>
 800b0fc:	0009883a 	mov	r4,zero
 800b100:	0005883a 	mov	r2,zero
 800b104:	003f4506 	br	800ae1c <__adddf3+0xdc>
 800b108:	418cb03a 	or	r6,r8,r6
 800b10c:	300cc03a 	cmpne	r6,r6,zero
 800b110:	0007883a 	mov	r3,zero
 800b114:	003f6106 	br	800ae9c <__adddf3+0x15c>
 800b118:	2000921e 	bne	r4,zero,800b364 <__adddf3+0x624>
 800b11c:	80800044 	addi	r2,r16,1
 800b120:	11c1ffcc 	andi	r7,r2,2047
 800b124:	01000044 	movi	r4,1
 800b128:	21c0610e 	bge	r4,r7,800b2b0 <__adddf3+0x570>
 800b12c:	0101ffc4 	movi	r4,2047
 800b130:	1100a326 	beq	r2,r4,800b3c0 <__adddf3+0x680>
 800b134:	344d883a 	add	r6,r6,r17
 800b138:	3463803a 	cmpltu	r17,r6,r17
 800b13c:	414b883a 	add	r5,r8,r5
 800b140:	2c4b883a 	add	r5,r5,r17
 800b144:	282297fa 	slli	r17,r5,31
 800b148:	300cd07a 	srli	r6,r6,1
 800b14c:	280ad07a 	srli	r5,r5,1
 800b150:	1021883a 	mov	r16,r2
 800b154:	89a2b03a 	or	r17,r17,r6
 800b158:	003f1806 	br	800adbc <__adddf3+0x7c>
 800b15c:	0081ffc4 	movi	r2,2047
 800b160:	80bf411e 	bne	r16,r2,800ae68 <__adddf3+0x128>
 800b164:	003f1506 	br	800adbc <__adddf3+0x7c>
 800b168:	80bff844 	addi	r2,r16,-31
 800b16c:	00c00804 	movi	r3,32
 800b170:	9884d83a 	srl	r2,r19,r2
 800b174:	28c04a26 	beq	r5,r3,800b2a0 <__adddf3+0x560>
 800b178:	00c00fc4 	movi	r3,63
 800b17c:	1c21c83a 	sub	r16,r3,r16
 800b180:	9c26983a 	sll	r19,r19,r16
 800b184:	9c62b03a 	or	r17,r19,r17
 800b188:	8822c03a 	cmpne	r17,r17,zero
 800b18c:	88a2b03a 	or	r17,r17,r2
 800b190:	000b883a 	mov	r5,zero
 800b194:	0021883a 	mov	r16,zero
 800b198:	003fb406 	br	800b06c <__adddf3+0x32c>
 800b19c:	18bff804 	addi	r2,r3,-32
 800b1a0:	01000804 	movi	r4,32
 800b1a4:	4084d83a 	srl	r2,r8,r2
 800b1a8:	19003f26 	beq	r3,r4,800b2a8 <__adddf3+0x568>
 800b1ac:	01001004 	movi	r4,64
 800b1b0:	20c7c83a 	sub	r3,r4,r3
 800b1b4:	40d0983a 	sll	r8,r8,r3
 800b1b8:	418cb03a 	or	r6,r8,r6
 800b1bc:	300cc03a 	cmpne	r6,r6,zero
 800b1c0:	308cb03a 	or	r6,r6,r2
 800b1c4:	0007883a 	mov	r3,zero
 800b1c8:	003f3406 	br	800ae9c <__adddf3+0x15c>
 800b1cc:	80002326 	beq	r16,zero,800b25c <__adddf3+0x51c>
 800b1d0:	0101ffc4 	movi	r4,2047
 800b1d4:	11005e26 	beq	r2,r4,800b350 <__adddf3+0x610>
 800b1d8:	00c7c83a 	sub	r3,zero,r3
 800b1dc:	29402034 	orhi	r5,r5,128
 800b1e0:	01000e04 	movi	r4,56
 800b1e4:	20c07216 	blt	r4,r3,800b3b0 <__adddf3+0x670>
 800b1e8:	010007c4 	movi	r4,31
 800b1ec:	20c0ce16 	blt	r4,r3,800b528 <__adddf3+0x7e8>
 800b1f0:	01000804 	movi	r4,32
 800b1f4:	20c9c83a 	sub	r4,r4,r3
 800b1f8:	2914983a 	sll	r10,r5,r4
 800b1fc:	88d2d83a 	srl	r9,r17,r3
 800b200:	8908983a 	sll	r4,r17,r4
 800b204:	28c6d83a 	srl	r3,r5,r3
 800b208:	5262b03a 	or	r17,r10,r9
 800b20c:	2008c03a 	cmpne	r4,r4,zero
 800b210:	8922b03a 	or	r17,r17,r4
 800b214:	3463c83a 	sub	r17,r6,r17
 800b218:	40c7c83a 	sub	r3,r8,r3
 800b21c:	344d803a 	cmpltu	r6,r6,r17
 800b220:	198bc83a 	sub	r5,r3,r6
 800b224:	1021883a 	mov	r16,r2
 800b228:	3825883a 	mov	r18,r7
 800b22c:	003f2006 	br	800aeb0 <__adddf3+0x170>
 800b230:	9886b03a 	or	r3,r19,r2
 800b234:	1800141e 	bne	r3,zero,800b288 <__adddf3+0x548>
 800b238:	0007883a 	mov	r3,zero
 800b23c:	000b883a 	mov	r5,zero
 800b240:	0023883a 	mov	r17,zero
 800b244:	0021883a 	mov	r16,zero
 800b248:	003f3c06 	br	800af3c <__adddf3+0x1fc>
 800b24c:	418cb03a 	or	r6,r8,r6
 800b250:	300cc03a 	cmpne	r6,r6,zero
 800b254:	0011883a 	mov	r8,zero
 800b258:	003f5606 	br	800afb4 <__adddf3+0x274>
 800b25c:	2c48b03a 	or	r4,r5,r17
 800b260:	20003b26 	beq	r4,zero,800b350 <__adddf3+0x610>
 800b264:	00c6303a 	nor	r3,zero,r3
 800b268:	1800371e 	bne	r3,zero,800b348 <__adddf3+0x608>
 800b26c:	3463c83a 	sub	r17,r6,r17
 800b270:	414bc83a 	sub	r5,r8,r5
 800b274:	344d803a 	cmpltu	r6,r6,r17
 800b278:	298bc83a 	sub	r5,r5,r6
 800b27c:	1021883a 	mov	r16,r2
 800b280:	3825883a 	mov	r18,r7
 800b284:	003f0a06 	br	800aeb0 <__adddf3+0x170>
 800b288:	1023883a 	mov	r17,r2
 800b28c:	003f0d06 	br	800aec4 <__adddf3+0x184>
 800b290:	0007883a 	mov	r3,zero
 800b294:	000b883a 	mov	r5,zero
 800b298:	0023883a 	mov	r17,zero
 800b29c:	003f2706 	br	800af3c <__adddf3+0x1fc>
 800b2a0:	0027883a 	mov	r19,zero
 800b2a4:	003fb706 	br	800b184 <__adddf3+0x444>
 800b2a8:	0011883a 	mov	r8,zero
 800b2ac:	003fc206 	br	800b1b8 <__adddf3+0x478>
 800b2b0:	2c44b03a 	or	r2,r5,r17
 800b2b4:	8000871e 	bne	r16,zero,800b4d4 <__adddf3+0x794>
 800b2b8:	1000b126 	beq	r2,zero,800b580 <__adddf3+0x840>
 800b2bc:	4184b03a 	or	r2,r8,r6
 800b2c0:	103ebe26 	beq	r2,zero,800adbc <__adddf3+0x7c>
 800b2c4:	3445883a 	add	r2,r6,r17
 800b2c8:	1463803a 	cmpltu	r17,r2,r17
 800b2cc:	414b883a 	add	r5,r8,r5
 800b2d0:	2c4b883a 	add	r5,r5,r17
 800b2d4:	28c0202c 	andhi	r3,r5,128
 800b2d8:	1023883a 	mov	r17,r2
 800b2dc:	183f6326 	beq	r3,zero,800b06c <__adddf3+0x32c>
 800b2e0:	00bfe034 	movhi	r2,65408
 800b2e4:	10bfffc4 	addi	r2,r2,-1
 800b2e8:	2021883a 	mov	r16,r4
 800b2ec:	288a703a 	and	r5,r5,r2
 800b2f0:	003eb206 	br	800adbc <__adddf3+0x7c>
 800b2f4:	2c44b03a 	or	r2,r5,r17
 800b2f8:	8000251e 	bne	r16,zero,800b390 <__adddf3+0x650>
 800b2fc:	10004b1e 	bne	r2,zero,800b42c <__adddf3+0x6ec>
 800b300:	4184b03a 	or	r2,r8,r6
 800b304:	103fe226 	beq	r2,zero,800b290 <__adddf3+0x550>
 800b308:	400b883a 	mov	r5,r8
 800b30c:	3023883a 	mov	r17,r6
 800b310:	3825883a 	mov	r18,r7
 800b314:	003ea906 	br	800adbc <__adddf3+0x7c>
 800b318:	20bff804 	addi	r2,r4,-32
 800b31c:	01c00804 	movi	r7,32
 800b320:	4084d83a 	srl	r2,r8,r2
 800b324:	21c07e26 	beq	r4,r7,800b520 <__adddf3+0x7e0>
 800b328:	01c01004 	movi	r7,64
 800b32c:	3909c83a 	sub	r4,r7,r4
 800b330:	4110983a 	sll	r8,r8,r4
 800b334:	418cb03a 	or	r6,r8,r6
 800b338:	300cc03a 	cmpne	r6,r6,zero
 800b33c:	308cb03a 	or	r6,r6,r2
 800b340:	0011883a 	mov	r8,zero
 800b344:	003f1b06 	br	800afb4 <__adddf3+0x274>
 800b348:	0101ffc4 	movi	r4,2047
 800b34c:	113fa41e 	bne	r2,r4,800b1e0 <__adddf3+0x4a0>
 800b350:	400b883a 	mov	r5,r8
 800b354:	3023883a 	mov	r17,r6
 800b358:	1021883a 	mov	r16,r2
 800b35c:	3825883a 	mov	r18,r7
 800b360:	003e9606 	br	800adbc <__adddf3+0x7c>
 800b364:	80001a1e 	bne	r16,zero,800b3d0 <__adddf3+0x690>
 800b368:	2c4eb03a 	or	r7,r5,r17
 800b36c:	38005526 	beq	r7,zero,800b4c4 <__adddf3+0x784>
 800b370:	0108303a 	nor	r4,zero,r4
 800b374:	2000511e 	bne	r4,zero,800b4bc <__adddf3+0x77c>
 800b378:	89a3883a 	add	r17,r17,r6
 800b37c:	414b883a 	add	r5,r8,r5
 800b380:	898d803a 	cmpltu	r6,r17,r6
 800b384:	298b883a 	add	r5,r5,r6
 800b388:	1021883a 	mov	r16,r2
 800b38c:	003f0e06 	br	800afc8 <__adddf3+0x288>
 800b390:	1000341e 	bne	r2,zero,800b464 <__adddf3+0x724>
 800b394:	4184b03a 	or	r2,r8,r6
 800b398:	10006f26 	beq	r2,zero,800b558 <__adddf3+0x818>
 800b39c:	400b883a 	mov	r5,r8
 800b3a0:	3023883a 	mov	r17,r6
 800b3a4:	3825883a 	mov	r18,r7
 800b3a8:	0401ffc4 	movi	r16,2047
 800b3ac:	003e8306 	br	800adbc <__adddf3+0x7c>
 800b3b0:	2c62b03a 	or	r17,r5,r17
 800b3b4:	8822c03a 	cmpne	r17,r17,zero
 800b3b8:	0007883a 	mov	r3,zero
 800b3bc:	003f9506 	br	800b214 <__adddf3+0x4d4>
 800b3c0:	1021883a 	mov	r16,r2
 800b3c4:	000b883a 	mov	r5,zero
 800b3c8:	0023883a 	mov	r17,zero
 800b3cc:	003edb06 	br	800af3c <__adddf3+0x1fc>
 800b3d0:	01c1ffc4 	movi	r7,2047
 800b3d4:	11c03b26 	beq	r2,r7,800b4c4 <__adddf3+0x784>
 800b3d8:	0109c83a 	sub	r4,zero,r4
 800b3dc:	29402034 	orhi	r5,r5,128
 800b3e0:	01c00e04 	movi	r7,56
 800b3e4:	39006216 	blt	r7,r4,800b570 <__adddf3+0x830>
 800b3e8:	01c007c4 	movi	r7,31
 800b3ec:	39006b16 	blt	r7,r4,800b59c <__adddf3+0x85c>
 800b3f0:	01c00804 	movi	r7,32
 800b3f4:	390fc83a 	sub	r7,r7,r4
 800b3f8:	29d4983a 	sll	r10,r5,r7
 800b3fc:	8912d83a 	srl	r9,r17,r4
 800b400:	89ce983a 	sll	r7,r17,r7
 800b404:	2908d83a 	srl	r4,r5,r4
 800b408:	5262b03a 	or	r17,r10,r9
 800b40c:	380ac03a 	cmpne	r5,r7,zero
 800b410:	8962b03a 	or	r17,r17,r5
 800b414:	89a3883a 	add	r17,r17,r6
 800b418:	2211883a 	add	r8,r4,r8
 800b41c:	898d803a 	cmpltu	r6,r17,r6
 800b420:	418b883a 	add	r5,r8,r6
 800b424:	1021883a 	mov	r16,r2
 800b428:	003ee706 	br	800afc8 <__adddf3+0x288>
 800b42c:	4184b03a 	or	r2,r8,r6
 800b430:	103e6226 	beq	r2,zero,800adbc <__adddf3+0x7c>
 800b434:	8987c83a 	sub	r3,r17,r6
 800b438:	88c9803a 	cmpltu	r4,r17,r3
 800b43c:	2a05c83a 	sub	r2,r5,r8
 800b440:	1105c83a 	sub	r2,r2,r4
 800b444:	1100202c 	andhi	r4,r2,128
 800b448:	203f0426 	beq	r4,zero,800b05c <__adddf3+0x31c>
 800b44c:	3463c83a 	sub	r17,r6,r17
 800b450:	414bc83a 	sub	r5,r8,r5
 800b454:	344d803a 	cmpltu	r6,r6,r17
 800b458:	298bc83a 	sub	r5,r5,r6
 800b45c:	3825883a 	mov	r18,r7
 800b460:	003e5606 	br	800adbc <__adddf3+0x7c>
 800b464:	4184b03a 	or	r2,r8,r6
 800b468:	10002b26 	beq	r2,zero,800b518 <__adddf3+0x7d8>
 800b46c:	2804d0fa 	srli	r2,r5,3
 800b470:	8822d0fa 	srli	r17,r17,3
 800b474:	280a977a 	slli	r5,r5,29
 800b478:	10c0022c 	andhi	r3,r2,8
 800b47c:	2c62b03a 	or	r17,r5,r17
 800b480:	18000826 	beq	r3,zero,800b4a4 <__adddf3+0x764>
 800b484:	4008d0fa 	srli	r4,r8,3
 800b488:	20c0022c 	andhi	r3,r4,8
 800b48c:	1800051e 	bne	r3,zero,800b4a4 <__adddf3+0x764>
 800b490:	300cd0fa 	srli	r6,r6,3
 800b494:	4010977a 	slli	r8,r8,29
 800b498:	2005883a 	mov	r2,r4
 800b49c:	3825883a 	mov	r18,r7
 800b4a0:	41a2b03a 	or	r17,r8,r6
 800b4a4:	880ad77a 	srli	r5,r17,29
 800b4a8:	100490fa 	slli	r2,r2,3
 800b4ac:	882290fa 	slli	r17,r17,3
 800b4b0:	0401ffc4 	movi	r16,2047
 800b4b4:	288ab03a 	or	r5,r5,r2
 800b4b8:	003e4006 	br	800adbc <__adddf3+0x7c>
 800b4bc:	01c1ffc4 	movi	r7,2047
 800b4c0:	11ffc71e 	bne	r2,r7,800b3e0 <__adddf3+0x6a0>
 800b4c4:	400b883a 	mov	r5,r8
 800b4c8:	3023883a 	mov	r17,r6
 800b4cc:	1021883a 	mov	r16,r2
 800b4d0:	003e3a06 	br	800adbc <__adddf3+0x7c>
 800b4d4:	10002d26 	beq	r2,zero,800b58c <__adddf3+0x84c>
 800b4d8:	4184b03a 	or	r2,r8,r6
 800b4dc:	10000e26 	beq	r2,zero,800b518 <__adddf3+0x7d8>
 800b4e0:	2804d0fa 	srli	r2,r5,3
 800b4e4:	8822d0fa 	srli	r17,r17,3
 800b4e8:	280a977a 	slli	r5,r5,29
 800b4ec:	10c0022c 	andhi	r3,r2,8
 800b4f0:	2c62b03a 	or	r17,r5,r17
 800b4f4:	183feb26 	beq	r3,zero,800b4a4 <__adddf3+0x764>
 800b4f8:	4008d0fa 	srli	r4,r8,3
 800b4fc:	20c0022c 	andhi	r3,r4,8
 800b500:	183fe81e 	bne	r3,zero,800b4a4 <__adddf3+0x764>
 800b504:	300cd0fa 	srli	r6,r6,3
 800b508:	4010977a 	slli	r8,r8,29
 800b50c:	2005883a 	mov	r2,r4
 800b510:	41a2b03a 	or	r17,r8,r6
 800b514:	003fe306 	br	800b4a4 <__adddf3+0x764>
 800b518:	0401ffc4 	movi	r16,2047
 800b51c:	003e2706 	br	800adbc <__adddf3+0x7c>
 800b520:	0011883a 	mov	r8,zero
 800b524:	003f8306 	br	800b334 <__adddf3+0x5f4>
 800b528:	193ff804 	addi	r4,r3,-32
 800b52c:	02400804 	movi	r9,32
 800b530:	2908d83a 	srl	r4,r5,r4
 800b534:	1a402526 	beq	r3,r9,800b5cc <__adddf3+0x88c>
 800b538:	02401004 	movi	r9,64
 800b53c:	48c7c83a 	sub	r3,r9,r3
 800b540:	28ca983a 	sll	r5,r5,r3
 800b544:	2c62b03a 	or	r17,r5,r17
 800b548:	8822c03a 	cmpne	r17,r17,zero
 800b54c:	8922b03a 	or	r17,r17,r4
 800b550:	0007883a 	mov	r3,zero
 800b554:	003f2f06 	br	800b214 <__adddf3+0x4d4>
 800b558:	01402034 	movhi	r5,128
 800b55c:	0007883a 	mov	r3,zero
 800b560:	297fffc4 	addi	r5,r5,-1
 800b564:	047ffe04 	movi	r17,-8
 800b568:	0401ffc4 	movi	r16,2047
 800b56c:	003e7306 	br	800af3c <__adddf3+0x1fc>
 800b570:	2c62b03a 	or	r17,r5,r17
 800b574:	8822c03a 	cmpne	r17,r17,zero
 800b578:	0009883a 	mov	r4,zero
 800b57c:	003fa506 	br	800b414 <__adddf3+0x6d4>
 800b580:	400b883a 	mov	r5,r8
 800b584:	3023883a 	mov	r17,r6
 800b588:	003e0c06 	br	800adbc <__adddf3+0x7c>
 800b58c:	400b883a 	mov	r5,r8
 800b590:	3023883a 	mov	r17,r6
 800b594:	0401ffc4 	movi	r16,2047
 800b598:	003e0806 	br	800adbc <__adddf3+0x7c>
 800b59c:	21fff804 	addi	r7,r4,-32
 800b5a0:	02400804 	movi	r9,32
 800b5a4:	29ced83a 	srl	r7,r5,r7
 800b5a8:	22400a26 	beq	r4,r9,800b5d4 <__adddf3+0x894>
 800b5ac:	02401004 	movi	r9,64
 800b5b0:	4909c83a 	sub	r4,r9,r4
 800b5b4:	290a983a 	sll	r5,r5,r4
 800b5b8:	2c62b03a 	or	r17,r5,r17
 800b5bc:	8822c03a 	cmpne	r17,r17,zero
 800b5c0:	89e2b03a 	or	r17,r17,r7
 800b5c4:	0009883a 	mov	r4,zero
 800b5c8:	003f9206 	br	800b414 <__adddf3+0x6d4>
 800b5cc:	000b883a 	mov	r5,zero
 800b5d0:	003fdc06 	br	800b544 <__adddf3+0x804>
 800b5d4:	000b883a 	mov	r5,zero
 800b5d8:	003ff706 	br	800b5b8 <__adddf3+0x878>

0800b5dc <__divdf3>:
 800b5dc:	defff004 	addi	sp,sp,-64
 800b5e0:	dc800815 	stw	r18,32(sp)
 800b5e4:	2824d53a 	srli	r18,r5,20
 800b5e8:	dd800c15 	stw	r22,48(sp)
 800b5ec:	282cd7fa 	srli	r22,r5,31
 800b5f0:	dc000615 	stw	r16,24(sp)
 800b5f4:	04000434 	movhi	r16,16
 800b5f8:	df000e15 	stw	fp,56(sp)
 800b5fc:	dd000a15 	stw	r20,40(sp)
 800b600:	dcc00915 	stw	r19,36(sp)
 800b604:	dc400715 	stw	r17,28(sp)
 800b608:	843fffc4 	addi	r16,r16,-1
 800b60c:	dfc00f15 	stw	ra,60(sp)
 800b610:	ddc00d15 	stw	r23,52(sp)
 800b614:	dd400b15 	stw	r21,44(sp)
 800b618:	9481ffcc 	andi	r18,r18,2047
 800b61c:	2029883a 	mov	r20,r4
 800b620:	2027883a 	mov	r19,r4
 800b624:	2c22703a 	and	r17,r5,r16
 800b628:	b7003fcc 	andi	fp,r22,255
 800b62c:	90005e26 	beq	r18,zero,800b7a8 <__divdf3+0x1cc>
 800b630:	0081ffc4 	movi	r2,2047
 800b634:	90803526 	beq	r18,r2,800b70c <__divdf3+0x130>
 800b638:	8c000434 	orhi	r16,r17,16
 800b63c:	2004d77a 	srli	r2,r4,29
 800b640:	802090fa 	slli	r16,r16,3
 800b644:	202690fa 	slli	r19,r4,3
 800b648:	94bf0044 	addi	r18,r18,-1023
 800b64c:	80a2b03a 	or	r17,r16,r2
 800b650:	0029883a 	mov	r20,zero
 800b654:	0011883a 	mov	r8,zero
 800b658:	380ad53a 	srli	r5,r7,20
 800b65c:	382ed7fa 	srli	r23,r7,31
 800b660:	04000434 	movhi	r16,16
 800b664:	843fffc4 	addi	r16,r16,-1
 800b668:	2941ffcc 	andi	r5,r5,2047
 800b66c:	302b883a 	mov	r21,r6
 800b670:	3c20703a 	and	r16,r7,r16
 800b674:	ba403fcc 	andi	r9,r23,255
 800b678:	28006726 	beq	r5,zero,800b818 <__divdf3+0x23c>
 800b67c:	0081ffc4 	movi	r2,2047
 800b680:	28805f26 	beq	r5,r2,800b800 <__divdf3+0x224>
 800b684:	84000434 	orhi	r16,r16,16
 800b688:	3004d77a 	srli	r2,r6,29
 800b68c:	802090fa 	slli	r16,r16,3
 800b690:	302a90fa 	slli	r21,r6,3
 800b694:	297f0044 	addi	r5,r5,-1023
 800b698:	80a0b03a 	or	r16,r16,r2
 800b69c:	000f883a 	mov	r7,zero
 800b6a0:	3d06b03a 	or	r3,r7,r20
 800b6a4:	180690ba 	slli	r3,r3,2
 800b6a8:	00820074 	movhi	r2,2049
 800b6ac:	10adb304 	addi	r2,r2,-18740
 800b6b0:	1885883a 	add	r2,r3,r2
 800b6b4:	10800017 	ldw	r2,0(r2)
 800b6b8:	b5c8f03a 	xor	r4,r22,r23
 800b6bc:	200d883a 	mov	r6,r4
 800b6c0:	25003fcc 	andi	r20,r4,255
 800b6c4:	9165c83a 	sub	r18,r18,r5
 800b6c8:	1000683a 	jmp	r2
 800b6cc:	0800b914 	ori	zero,at,740
 800b6d0:	0800b744 	addi	zero,at,733
 800b6d4:	0800b8d8 	cmpnei	zero,at,739
 800b6d8:	0800b728 	cmpgeui	zero,at,732
 800b6dc:	0800b8d8 	cmpnei	zero,at,739
 800b6e0:	0800b8ac 	andhi	zero,at,738
 800b6e4:	0800b8d8 	cmpnei	zero,at,739
 800b6e8:	0800b728 	cmpgeui	zero,at,732
 800b6ec:	0800b744 	addi	zero,at,733
 800b6f0:	0800b744 	addi	zero,at,733
 800b6f4:	0800b8ac 	andhi	zero,at,738
 800b6f8:	0800b728 	cmpgeui	zero,at,732
 800b6fc:	0800b738 	rdprs	zero,at,732
 800b700:	0800b738 	rdprs	zero,at,732
 800b704:	0800b738 	rdprs	zero,at,732
 800b708:	0800b8e8 	cmpgeui	zero,at,739
 800b70c:	8904b03a 	or	r2,r17,r4
 800b710:	1000631e 	bne	r2,zero,800b8a0 <__divdf3+0x2c4>
 800b714:	05000204 	movi	r20,8
 800b718:	0023883a 	mov	r17,zero
 800b71c:	0027883a 	mov	r19,zero
 800b720:	02000084 	movi	r8,2
 800b724:	003fcc06 	br	800b658 <__divdf3+0x7c>
 800b728:	8023883a 	mov	r17,r16
 800b72c:	a827883a 	mov	r19,r21
 800b730:	4839883a 	mov	fp,r9
 800b734:	3811883a 	mov	r8,r7
 800b738:	00800084 	movi	r2,2
 800b73c:	4081531e 	bne	r8,r2,800bc8c <__divdf3+0x6b0>
 800b740:	e029883a 	mov	r20,fp
 800b744:	a180004c 	andi	r6,r20,1
 800b748:	0201ffc4 	movi	r8,2047
 800b74c:	000b883a 	mov	r5,zero
 800b750:	0027883a 	mov	r19,zero
 800b754:	4010953a 	slli	r8,r8,20
 800b758:	30c03fcc 	andi	r3,r6,255
 800b75c:	04000434 	movhi	r16,16
 800b760:	180697fa 	slli	r3,r3,31
 800b764:	843fffc4 	addi	r16,r16,-1
 800b768:	2c20703a 	and	r16,r5,r16
 800b76c:	8220b03a 	or	r16,r16,r8
 800b770:	80c6b03a 	or	r3,r16,r3
 800b774:	9805883a 	mov	r2,r19
 800b778:	dfc00f17 	ldw	ra,60(sp)
 800b77c:	df000e17 	ldw	fp,56(sp)
 800b780:	ddc00d17 	ldw	r23,52(sp)
 800b784:	dd800c17 	ldw	r22,48(sp)
 800b788:	dd400b17 	ldw	r21,44(sp)
 800b78c:	dd000a17 	ldw	r20,40(sp)
 800b790:	dcc00917 	ldw	r19,36(sp)
 800b794:	dc800817 	ldw	r18,32(sp)
 800b798:	dc400717 	ldw	r17,28(sp)
 800b79c:	dc000617 	ldw	r16,24(sp)
 800b7a0:	dec01004 	addi	sp,sp,64
 800b7a4:	f800283a 	ret
 800b7a8:	8904b03a 	or	r2,r17,r4
 800b7ac:	10003726 	beq	r2,zero,800b88c <__divdf3+0x2b0>
 800b7b0:	88014d26 	beq	r17,zero,800bce8 <__divdf3+0x70c>
 800b7b4:	8809883a 	mov	r4,r17
 800b7b8:	d9800215 	stw	r6,8(sp)
 800b7bc:	d9c00515 	stw	r7,20(sp)
 800b7c0:	8000c900 	call	8000c90 <__clzsi2>
 800b7c4:	d9800217 	ldw	r6,8(sp)
 800b7c8:	d9c00517 	ldw	r7,20(sp)
 800b7cc:	1007883a 	mov	r3,r2
 800b7d0:	01000a04 	movi	r4,40
 800b7d4:	1cfffe04 	addi	r19,r3,-8
 800b7d8:	20c9c83a 	sub	r4,r4,r3
 800b7dc:	8cca983a 	sll	r5,r17,r19
 800b7e0:	a108d83a 	srl	r4,r20,r4
 800b7e4:	a4e6983a 	sll	r19,r20,r19
 800b7e8:	2162b03a 	or	r17,r4,r5
 800b7ec:	04bf0344 	movi	r18,-1011
 800b7f0:	90e5c83a 	sub	r18,r18,r3
 800b7f4:	0029883a 	mov	r20,zero
 800b7f8:	0011883a 	mov	r8,zero
 800b7fc:	003f9606 	br	800b658 <__divdf3+0x7c>
 800b800:	8184b03a 	or	r2,r16,r6
 800b804:	10001f1e 	bne	r2,zero,800b884 <__divdf3+0x2a8>
 800b808:	0021883a 	mov	r16,zero
 800b80c:	002b883a 	mov	r21,zero
 800b810:	01c00084 	movi	r7,2
 800b814:	003fa206 	br	800b6a0 <__divdf3+0xc4>
 800b818:	8184b03a 	or	r2,r16,r6
 800b81c:	10001526 	beq	r2,zero,800b874 <__divdf3+0x298>
 800b820:	80013d26 	beq	r16,zero,800bd18 <__divdf3+0x73c>
 800b824:	8009883a 	mov	r4,r16
 800b828:	d9800215 	stw	r6,8(sp)
 800b82c:	da000315 	stw	r8,12(sp)
 800b830:	da400415 	stw	r9,16(sp)
 800b834:	8000c900 	call	8000c90 <__clzsi2>
 800b838:	d9800217 	ldw	r6,8(sp)
 800b83c:	da000317 	ldw	r8,12(sp)
 800b840:	da400417 	ldw	r9,16(sp)
 800b844:	1007883a 	mov	r3,r2
 800b848:	01000a04 	movi	r4,40
 800b84c:	1d7ffe04 	addi	r21,r3,-8
 800b850:	20c9c83a 	sub	r4,r4,r3
 800b854:	8560983a 	sll	r16,r16,r21
 800b858:	3108d83a 	srl	r4,r6,r4
 800b85c:	356a983a 	sll	r21,r6,r21
 800b860:	2420b03a 	or	r16,r4,r16
 800b864:	017f0344 	movi	r5,-1011
 800b868:	28cbc83a 	sub	r5,r5,r3
 800b86c:	000f883a 	mov	r7,zero
 800b870:	003f8b06 	br	800b6a0 <__divdf3+0xc4>
 800b874:	0021883a 	mov	r16,zero
 800b878:	002b883a 	mov	r21,zero
 800b87c:	01c00044 	movi	r7,1
 800b880:	003f8706 	br	800b6a0 <__divdf3+0xc4>
 800b884:	01c000c4 	movi	r7,3
 800b888:	003f8506 	br	800b6a0 <__divdf3+0xc4>
 800b88c:	05000104 	movi	r20,4
 800b890:	0023883a 	mov	r17,zero
 800b894:	0027883a 	mov	r19,zero
 800b898:	02000044 	movi	r8,1
 800b89c:	003f6e06 	br	800b658 <__divdf3+0x7c>
 800b8a0:	05000304 	movi	r20,12
 800b8a4:	020000c4 	movi	r8,3
 800b8a8:	003f6b06 	br	800b658 <__divdf3+0x7c>
 800b8ac:	01400434 	movhi	r5,16
 800b8b0:	000d883a 	mov	r6,zero
 800b8b4:	297fffc4 	addi	r5,r5,-1
 800b8b8:	04ffffc4 	movi	r19,-1
 800b8bc:	0201ffc4 	movi	r8,2047
 800b8c0:	003fa406 	br	800b754 <__divdf3+0x178>
 800b8c4:	043f0084 	movi	r16,-1022
 800b8c8:	84a1c83a 	sub	r16,r16,r18
 800b8cc:	00800e04 	movi	r2,56
 800b8d0:	14014d0e 	bge	r2,r16,800be08 <__divdf3+0x82c>
 800b8d4:	a180004c 	andi	r6,r20,1
 800b8d8:	0011883a 	mov	r8,zero
 800b8dc:	000b883a 	mov	r5,zero
 800b8e0:	0027883a 	mov	r19,zero
 800b8e4:	003f9b06 	br	800b754 <__divdf3+0x178>
 800b8e8:	8880022c 	andhi	r2,r17,8
 800b8ec:	1000f026 	beq	r2,zero,800bcb0 <__divdf3+0x6d4>
 800b8f0:	8080022c 	andhi	r2,r16,8
 800b8f4:	1000ee1e 	bne	r2,zero,800bcb0 <__divdf3+0x6d4>
 800b8f8:	00800434 	movhi	r2,16
 800b8fc:	81400234 	orhi	r5,r16,8
 800b900:	10bfffc4 	addi	r2,r2,-1
 800b904:	b80d883a 	mov	r6,r23
 800b908:	288a703a 	and	r5,r5,r2
 800b90c:	a827883a 	mov	r19,r21
 800b910:	003fea06 	br	800b8bc <__divdf3+0x2e0>
 800b914:	84411c36 	bltu	r16,r17,800bd88 <__divdf3+0x7ac>
 800b918:	8c011a26 	beq	r17,r16,800bd84 <__divdf3+0x7a8>
 800b91c:	94bfffc4 	addi	r18,r18,-1
 800b920:	dcc00015 	stw	r19,0(sp)
 800b924:	8811883a 	mov	r8,r17
 800b928:	002d883a 	mov	r22,zero
 800b92c:	a80cd63a 	srli	r6,r21,24
 800b930:	8020923a 	slli	r16,r16,8
 800b934:	a82a923a 	slli	r21,r21,8
 800b938:	4009883a 	mov	r4,r8
 800b93c:	342eb03a 	or	r23,r6,r16
 800b940:	dd400115 	stw	r21,4(sp)
 800b944:	b82ad43a 	srli	r21,r23,16
 800b948:	da000315 	stw	r8,12(sp)
 800b94c:	bcffffcc 	andi	r19,r23,65535
 800b950:	a80b883a 	mov	r5,r21
 800b954:	800ad300 	call	800ad30 <__udivsi3>
 800b958:	1009883a 	mov	r4,r2
 800b95c:	980b883a 	mov	r5,r19
 800b960:	1023883a 	mov	r17,r2
 800b964:	80005f80 	call	80005f8 <__mulsi3>
 800b968:	da000317 	ldw	r8,12(sp)
 800b96c:	a80b883a 	mov	r5,r21
 800b970:	1039883a 	mov	fp,r2
 800b974:	4009883a 	mov	r4,r8
 800b978:	800ad380 	call	800ad38 <__umodsi3>
 800b97c:	d8c00017 	ldw	r3,0(sp)
 800b980:	1004943a 	slli	r2,r2,16
 800b984:	1810d43a 	srli	r8,r3,16
 800b988:	120eb03a 	or	r7,r2,r8
 800b98c:	3f00062e 	bgeu	r7,fp,800b9a8 <__divdf3+0x3cc>
 800b990:	3dcf883a 	add	r7,r7,r23
 800b994:	88bfffc4 	addi	r2,r17,-1
 800b998:	3dc10a36 	bltu	r7,r23,800bdc4 <__divdf3+0x7e8>
 800b99c:	3f01092e 	bgeu	r7,fp,800bdc4 <__divdf3+0x7e8>
 800b9a0:	8c7fff84 	addi	r17,r17,-2
 800b9a4:	3dcf883a 	add	r7,r7,r23
 800b9a8:	3f39c83a 	sub	fp,r7,fp
 800b9ac:	e009883a 	mov	r4,fp
 800b9b0:	a80b883a 	mov	r5,r21
 800b9b4:	800ad300 	call	800ad30 <__udivsi3>
 800b9b8:	1009883a 	mov	r4,r2
 800b9bc:	980b883a 	mov	r5,r19
 800b9c0:	1021883a 	mov	r16,r2
 800b9c4:	80005f80 	call	80005f8 <__mulsi3>
 800b9c8:	e009883a 	mov	r4,fp
 800b9cc:	a80b883a 	mov	r5,r21
 800b9d0:	d8800315 	stw	r2,12(sp)
 800b9d4:	800ad380 	call	800ad38 <__umodsi3>
 800b9d8:	d9000017 	ldw	r4,0(sp)
 800b9dc:	1004943a 	slli	r2,r2,16
 800b9e0:	da000317 	ldw	r8,12(sp)
 800b9e4:	20ffffcc 	andi	r3,r4,65535
 800b9e8:	10ceb03a 	or	r7,r2,r3
 800b9ec:	3a00062e 	bgeu	r7,r8,800ba08 <__divdf3+0x42c>
 800b9f0:	3dcf883a 	add	r7,r7,r23
 800b9f4:	80bfffc4 	addi	r2,r16,-1
 800b9f8:	3dc0f036 	bltu	r7,r23,800bdbc <__divdf3+0x7e0>
 800b9fc:	3a00ef2e 	bgeu	r7,r8,800bdbc <__divdf3+0x7e0>
 800ba00:	843fff84 	addi	r16,r16,-2
 800ba04:	3dcf883a 	add	r7,r7,r23
 800ba08:	d8c00117 	ldw	r3,4(sp)
 800ba0c:	8822943a 	slli	r17,r17,16
 800ba10:	3a0fc83a 	sub	r7,r7,r8
 800ba14:	1806d43a 	srli	r3,r3,16
 800ba18:	8462b03a 	or	r17,r16,r17
 800ba1c:	8affffcc 	andi	r11,r17,65535
 800ba20:	d8c00015 	stw	r3,0(sp)
 800ba24:	d8c00117 	ldw	r3,4(sp)
 800ba28:	8820d43a 	srli	r16,r17,16
 800ba2c:	5809883a 	mov	r4,r11
 800ba30:	1f3fffcc 	andi	fp,r3,65535
 800ba34:	e00b883a 	mov	r5,fp
 800ba38:	d9c00515 	stw	r7,20(sp)
 800ba3c:	dac00215 	stw	r11,8(sp)
 800ba40:	80005f80 	call	80005f8 <__mulsi3>
 800ba44:	8009883a 	mov	r4,r16
 800ba48:	e00b883a 	mov	r5,fp
 800ba4c:	d8800415 	stw	r2,16(sp)
 800ba50:	80005f80 	call	80005f8 <__mulsi3>
 800ba54:	d9400017 	ldw	r5,0(sp)
 800ba58:	8009883a 	mov	r4,r16
 800ba5c:	d8800315 	stw	r2,12(sp)
 800ba60:	80005f80 	call	80005f8 <__mulsi3>
 800ba64:	dac00217 	ldw	r11,8(sp)
 800ba68:	d9400017 	ldw	r5,0(sp)
 800ba6c:	d8800215 	stw	r2,8(sp)
 800ba70:	5809883a 	mov	r4,r11
 800ba74:	80005f80 	call	80005f8 <__mulsi3>
 800ba78:	da400417 	ldw	r9,16(sp)
 800ba7c:	da800317 	ldw	r10,12(sp)
 800ba80:	d9c00517 	ldw	r7,20(sp)
 800ba84:	480ad43a 	srli	r5,r9,16
 800ba88:	5085883a 	add	r2,r10,r2
 800ba8c:	db000217 	ldw	r12,8(sp)
 800ba90:	1151883a 	add	r8,r2,r5
 800ba94:	4280022e 	bgeu	r8,r10,800baa0 <__divdf3+0x4c4>
 800ba98:	00800074 	movhi	r2,1
 800ba9c:	6099883a 	add	r12,r12,r2
 800baa0:	400ad43a 	srli	r5,r8,16
 800baa4:	4010943a 	slli	r8,r8,16
 800baa8:	4c3fffcc 	andi	r16,r9,65535
 800baac:	6149883a 	add	r4,r12,r5
 800bab0:	4411883a 	add	r8,r8,r16
 800bab4:	3900a736 	bltu	r7,r4,800bd54 <__divdf3+0x778>
 800bab8:	3900c426 	beq	r7,r4,800bdcc <__divdf3+0x7f0>
 800babc:	3909c83a 	sub	r4,r7,r4
 800bac0:	b221c83a 	sub	r16,r22,r8
 800bac4:	b42d803a 	cmpltu	r22,r22,r16
 800bac8:	25adc83a 	sub	r22,r4,r22
 800bacc:	b5c0c626 	beq	r22,r23,800bde8 <__divdf3+0x80c>
 800bad0:	b009883a 	mov	r4,r22
 800bad4:	a80b883a 	mov	r5,r21
 800bad8:	800ad300 	call	800ad30 <__udivsi3>
 800badc:	1009883a 	mov	r4,r2
 800bae0:	980b883a 	mov	r5,r19
 800bae4:	d8800315 	stw	r2,12(sp)
 800bae8:	80005f80 	call	80005f8 <__mulsi3>
 800baec:	a80b883a 	mov	r5,r21
 800baf0:	b009883a 	mov	r4,r22
 800baf4:	d8800415 	stw	r2,16(sp)
 800baf8:	800ad380 	call	800ad38 <__umodsi3>
 800bafc:	1004943a 	slli	r2,r2,16
 800bb00:	800ed43a 	srli	r7,r16,16
 800bb04:	da400417 	ldw	r9,16(sp)
 800bb08:	da000317 	ldw	r8,12(sp)
 800bb0c:	11cab03a 	or	r5,r2,r7
 800bb10:	2a40062e 	bgeu	r5,r9,800bb2c <__divdf3+0x550>
 800bb14:	2dcb883a 	add	r5,r5,r23
 800bb18:	40bfffc4 	addi	r2,r8,-1
 800bb1c:	2dc0b436 	bltu	r5,r23,800bdf0 <__divdf3+0x814>
 800bb20:	2a40b32e 	bgeu	r5,r9,800bdf0 <__divdf3+0x814>
 800bb24:	423fff84 	addi	r8,r8,-2
 800bb28:	2dcb883a 	add	r5,r5,r23
 800bb2c:	2a6dc83a 	sub	r22,r5,r9
 800bb30:	b009883a 	mov	r4,r22
 800bb34:	a80b883a 	mov	r5,r21
 800bb38:	da000315 	stw	r8,12(sp)
 800bb3c:	800ad300 	call	800ad30 <__udivsi3>
 800bb40:	980b883a 	mov	r5,r19
 800bb44:	1009883a 	mov	r4,r2
 800bb48:	d8800415 	stw	r2,16(sp)
 800bb4c:	80005f80 	call	80005f8 <__mulsi3>
 800bb50:	b009883a 	mov	r4,r22
 800bb54:	a80b883a 	mov	r5,r21
 800bb58:	1027883a 	mov	r19,r2
 800bb5c:	800ad380 	call	800ad38 <__umodsi3>
 800bb60:	1004943a 	slli	r2,r2,16
 800bb64:	843fffcc 	andi	r16,r16,65535
 800bb68:	da000317 	ldw	r8,12(sp)
 800bb6c:	140eb03a 	or	r7,r2,r16
 800bb70:	da400417 	ldw	r9,16(sp)
 800bb74:	3cc0062e 	bgeu	r7,r19,800bb90 <__divdf3+0x5b4>
 800bb78:	3dcf883a 	add	r7,r7,r23
 800bb7c:	48bfffc4 	addi	r2,r9,-1
 800bb80:	3dc09d36 	bltu	r7,r23,800bdf8 <__divdf3+0x81c>
 800bb84:	3cc09c2e 	bgeu	r7,r19,800bdf8 <__divdf3+0x81c>
 800bb88:	4a7fff84 	addi	r9,r9,-2
 800bb8c:	3dcf883a 	add	r7,r7,r23
 800bb90:	4010943a 	slli	r8,r8,16
 800bb94:	3cebc83a 	sub	r21,r7,r19
 800bb98:	e00b883a 	mov	r5,fp
 800bb9c:	4a26b03a 	or	r19,r9,r8
 800bba0:	99ffffcc 	andi	r7,r19,65535
 800bba4:	9820d43a 	srli	r16,r19,16
 800bba8:	3809883a 	mov	r4,r7
 800bbac:	d9c00515 	stw	r7,20(sp)
 800bbb0:	80005f80 	call	80005f8 <__mulsi3>
 800bbb4:	8009883a 	mov	r4,r16
 800bbb8:	e00b883a 	mov	r5,fp
 800bbbc:	102d883a 	mov	r22,r2
 800bbc0:	80005f80 	call	80005f8 <__mulsi3>
 800bbc4:	d9400017 	ldw	r5,0(sp)
 800bbc8:	8009883a 	mov	r4,r16
 800bbcc:	1039883a 	mov	fp,r2
 800bbd0:	80005f80 	call	80005f8 <__mulsi3>
 800bbd4:	d9c00517 	ldw	r7,20(sp)
 800bbd8:	d9400017 	ldw	r5,0(sp)
 800bbdc:	1021883a 	mov	r16,r2
 800bbe0:	3809883a 	mov	r4,r7
 800bbe4:	80005f80 	call	80005f8 <__mulsi3>
 800bbe8:	b008d43a 	srli	r4,r22,16
 800bbec:	e085883a 	add	r2,fp,r2
 800bbf0:	1109883a 	add	r4,r2,r4
 800bbf4:	2700022e 	bgeu	r4,fp,800bc00 <__divdf3+0x624>
 800bbf8:	00800074 	movhi	r2,1
 800bbfc:	80a1883a 	add	r16,r16,r2
 800bc00:	200ad43a 	srli	r5,r4,16
 800bc04:	2008943a 	slli	r4,r4,16
 800bc08:	b5bfffcc 	andi	r22,r22,65535
 800bc0c:	8145883a 	add	r2,r16,r5
 800bc10:	2589883a 	add	r4,r4,r22
 800bc14:	a8802c36 	bltu	r21,r2,800bcc8 <__divdf3+0x6ec>
 800bc18:	a880a426 	beq	r21,r2,800beac <__divdf3+0x8d0>
 800bc1c:	9cc00054 	ori	r19,r19,1
 800bc20:	9200ffc4 	addi	r8,r18,1023
 800bc24:	023f270e 	bge	zero,r8,800b8c4 <__divdf3+0x2e8>
 800bc28:	988001cc 	andi	r2,r19,7
 800bc2c:	10000726 	beq	r2,zero,800bc4c <__divdf3+0x670>
 800bc30:	990003cc 	andi	r4,r19,15
 800bc34:	00800104 	movi	r2,4
 800bc38:	20800426 	beq	r4,r2,800bc4c <__divdf3+0x670>
 800bc3c:	9885883a 	add	r2,r19,r2
 800bc40:	14e7803a 	cmpltu	r19,r2,r19
 800bc44:	8ce3883a 	add	r17,r17,r19
 800bc48:	1027883a 	mov	r19,r2
 800bc4c:	8880402c 	andhi	r2,r17,256
 800bc50:	10000426 	beq	r2,zero,800bc64 <__divdf3+0x688>
 800bc54:	00bfc034 	movhi	r2,65280
 800bc58:	10bfffc4 	addi	r2,r2,-1
 800bc5c:	92010004 	addi	r8,r18,1024
 800bc60:	88a2703a 	and	r17,r17,r2
 800bc64:	0081ff84 	movi	r2,2046
 800bc68:	123eb616 	blt	r2,r8,800b744 <__divdf3+0x168>
 800bc6c:	9826d0fa 	srli	r19,r19,3
 800bc70:	8804977a 	slli	r2,r17,29
 800bc74:	8820927a 	slli	r16,r17,9
 800bc78:	4201ffcc 	andi	r8,r8,2047
 800bc7c:	14e6b03a 	or	r19,r2,r19
 800bc80:	800ad33a 	srli	r5,r16,12
 800bc84:	a180004c 	andi	r6,r20,1
 800bc88:	003eb206 	br	800b754 <__divdf3+0x178>
 800bc8c:	008000c4 	movi	r2,3
 800bc90:	4080ac26 	beq	r8,r2,800bf44 <__divdf3+0x968>
 800bc94:	00800044 	movi	r2,1
 800bc98:	4080591e 	bne	r8,r2,800be00 <__divdf3+0x824>
 800bc9c:	e00d883a 	mov	r6,fp
 800bca0:	0011883a 	mov	r8,zero
 800bca4:	000b883a 	mov	r5,zero
 800bca8:	0027883a 	mov	r19,zero
 800bcac:	003ea906 	br	800b754 <__divdf3+0x178>
 800bcb0:	00800434 	movhi	r2,16
 800bcb4:	89400234 	orhi	r5,r17,8
 800bcb8:	10bfffc4 	addi	r2,r2,-1
 800bcbc:	b00d883a 	mov	r6,r22
 800bcc0:	288a703a 	and	r5,r5,r2
 800bcc4:	003efd06 	br	800b8bc <__divdf3+0x2e0>
 800bcc8:	adcf883a 	add	r7,r21,r23
 800bccc:	997fffc4 	addi	r5,r19,-1
 800bcd0:	3dc0412e 	bgeu	r7,r23,800bdd8 <__divdf3+0x7fc>
 800bcd4:	2827883a 	mov	r19,r5
 800bcd8:	38bfd01e 	bne	r7,r2,800bc1c <__divdf3+0x640>
 800bcdc:	d8c00117 	ldw	r3,4(sp)
 800bce0:	193fce1e 	bne	r3,r4,800bc1c <__divdf3+0x640>
 800bce4:	003fce06 	br	800bc20 <__divdf3+0x644>
 800bce8:	d9800215 	stw	r6,8(sp)
 800bcec:	d9c00515 	stw	r7,20(sp)
 800bcf0:	8000c900 	call	8000c90 <__clzsi2>
 800bcf4:	10c00804 	addi	r3,r2,32
 800bcf8:	010009c4 	movi	r4,39
 800bcfc:	d9800217 	ldw	r6,8(sp)
 800bd00:	d9c00517 	ldw	r7,20(sp)
 800bd04:	20feb20e 	bge	r4,r3,800b7d0 <__divdf3+0x1f4>
 800bd08:	117ffe04 	addi	r5,r2,-8
 800bd0c:	a162983a 	sll	r17,r20,r5
 800bd10:	0027883a 	mov	r19,zero
 800bd14:	003eb506 	br	800b7ec <__divdf3+0x210>
 800bd18:	3009883a 	mov	r4,r6
 800bd1c:	d9800215 	stw	r6,8(sp)
 800bd20:	da000315 	stw	r8,12(sp)
 800bd24:	da400415 	stw	r9,16(sp)
 800bd28:	8000c900 	call	8000c90 <__clzsi2>
 800bd2c:	10c00804 	addi	r3,r2,32
 800bd30:	010009c4 	movi	r4,39
 800bd34:	d9800217 	ldw	r6,8(sp)
 800bd38:	da000317 	ldw	r8,12(sp)
 800bd3c:	da400417 	ldw	r9,16(sp)
 800bd40:	20fec10e 	bge	r4,r3,800b848 <__divdf3+0x26c>
 800bd44:	10bffe04 	addi	r2,r2,-8
 800bd48:	a8a0983a 	sll	r16,r21,r2
 800bd4c:	002b883a 	mov	r21,zero
 800bd50:	003ec406 	br	800b864 <__divdf3+0x288>
 800bd54:	d8c00117 	ldw	r3,4(sp)
 800bd58:	b0ed883a 	add	r22,r22,r3
 800bd5c:	b0c5803a 	cmpltu	r2,r22,r3
 800bd60:	15c5883a 	add	r2,r2,r23
 800bd64:	11cf883a 	add	r7,r2,r7
 800bd68:	88bfffc4 	addi	r2,r17,-1
 800bd6c:	b9c00d2e 	bgeu	r23,r7,800bda4 <__divdf3+0x7c8>
 800bd70:	39003f36 	bltu	r7,r4,800be70 <__divdf3+0x894>
 800bd74:	21c06a26 	beq	r4,r7,800bf20 <__divdf3+0x944>
 800bd78:	3909c83a 	sub	r4,r7,r4
 800bd7c:	1023883a 	mov	r17,r2
 800bd80:	003f4f06 	br	800bac0 <__divdf3+0x4e4>
 800bd84:	9d7ee536 	bltu	r19,r21,800b91c <__divdf3+0x340>
 800bd88:	982ed07a 	srli	r23,r19,1
 800bd8c:	880497fa 	slli	r2,r17,31
 800bd90:	8810d07a 	srli	r8,r17,1
 800bd94:	982c97fa 	slli	r22,r19,31
 800bd98:	b884b03a 	or	r2,r23,r2
 800bd9c:	d8800015 	stw	r2,0(sp)
 800bda0:	003ee206 	br	800b92c <__divdf3+0x350>
 800bda4:	3dfff41e 	bne	r7,r23,800bd78 <__divdf3+0x79c>
 800bda8:	d8c00117 	ldw	r3,4(sp)
 800bdac:	b0fff02e 	bgeu	r22,r3,800bd70 <__divdf3+0x794>
 800bdb0:	b909c83a 	sub	r4,r23,r4
 800bdb4:	1023883a 	mov	r17,r2
 800bdb8:	003f4106 	br	800bac0 <__divdf3+0x4e4>
 800bdbc:	1021883a 	mov	r16,r2
 800bdc0:	003f1106 	br	800ba08 <__divdf3+0x42c>
 800bdc4:	1023883a 	mov	r17,r2
 800bdc8:	003ef706 	br	800b9a8 <__divdf3+0x3cc>
 800bdcc:	b23fe136 	bltu	r22,r8,800bd54 <__divdf3+0x778>
 800bdd0:	0009883a 	mov	r4,zero
 800bdd4:	003f3a06 	br	800bac0 <__divdf3+0x4e4>
 800bdd8:	38802c36 	bltu	r7,r2,800be8c <__divdf3+0x8b0>
 800bddc:	11c05326 	beq	r2,r7,800bf2c <__divdf3+0x950>
 800bde0:	2827883a 	mov	r19,r5
 800bde4:	003f8d06 	br	800bc1c <__divdf3+0x640>
 800bde8:	04ffffc4 	movi	r19,-1
 800bdec:	003f8c06 	br	800bc20 <__divdf3+0x644>
 800bdf0:	1011883a 	mov	r8,r2
 800bdf4:	003f4d06 	br	800bb2c <__divdf3+0x550>
 800bdf8:	1013883a 	mov	r9,r2
 800bdfc:	003f6406 	br	800bb90 <__divdf3+0x5b4>
 800be00:	e029883a 	mov	r20,fp
 800be04:	003f8606 	br	800bc20 <__divdf3+0x644>
 800be08:	008007c4 	movi	r2,31
 800be0c:	14002a16 	blt	r2,r16,800beb8 <__divdf3+0x8dc>
 800be10:	91410784 	addi	r5,r18,1054
 800be14:	9c0cd83a 	srl	r6,r19,r16
 800be18:	8948983a 	sll	r4,r17,r5
 800be1c:	9944983a 	sll	r2,r19,r5
 800be20:	8c20d83a 	srl	r16,r17,r16
 800be24:	3108b03a 	or	r4,r6,r4
 800be28:	1004c03a 	cmpne	r2,r2,zero
 800be2c:	2084b03a 	or	r2,r4,r2
 800be30:	110001cc 	andi	r4,r2,7
 800be34:	20000726 	beq	r4,zero,800be54 <__divdf3+0x878>
 800be38:	114003cc 	andi	r5,r2,15
 800be3c:	01000104 	movi	r4,4
 800be40:	29000426 	beq	r5,r4,800be54 <__divdf3+0x878>
 800be44:	11000104 	addi	r4,r2,4
 800be48:	2085803a 	cmpltu	r2,r4,r2
 800be4c:	80a1883a 	add	r16,r16,r2
 800be50:	2005883a 	mov	r2,r4
 800be54:	8100202c 	andhi	r4,r16,128
 800be58:	20002d26 	beq	r4,zero,800bf10 <__divdf3+0x934>
 800be5c:	a180004c 	andi	r6,r20,1
 800be60:	02000044 	movi	r8,1
 800be64:	000b883a 	mov	r5,zero
 800be68:	0027883a 	mov	r19,zero
 800be6c:	003e3906 	br	800b754 <__divdf3+0x178>
 800be70:	d8c00117 	ldw	r3,4(sp)
 800be74:	8c7fff84 	addi	r17,r17,-2
 800be78:	b0ed883a 	add	r22,r22,r3
 800be7c:	b0c5803a 	cmpltu	r2,r22,r3
 800be80:	15c5883a 	add	r2,r2,r23
 800be84:	11cf883a 	add	r7,r2,r7
 800be88:	003f0c06 	br	800babc <__divdf3+0x4e0>
 800be8c:	d8c00117 	ldw	r3,4(sp)
 800be90:	997fff84 	addi	r5,r19,-2
 800be94:	18d1883a 	add	r8,r3,r3
 800be98:	40c7803a 	cmpltu	r3,r8,r3
 800be9c:	1dcd883a 	add	r6,r3,r23
 800bea0:	398f883a 	add	r7,r7,r6
 800bea4:	da000115 	stw	r8,4(sp)
 800bea8:	003f8a06 	br	800bcd4 <__divdf3+0x6f8>
 800beac:	203f861e 	bne	r4,zero,800bcc8 <__divdf3+0x6ec>
 800beb0:	d8000115 	stw	zero,4(sp)
 800beb4:	003f8906 	br	800bcdc <__divdf3+0x700>
 800beb8:	00bef884 	movi	r2,-1054
 800bebc:	1485c83a 	sub	r2,r2,r18
 800bec0:	01000804 	movi	r4,32
 800bec4:	8884d83a 	srl	r2,r17,r2
 800bec8:	81001c26 	beq	r16,r4,800bf3c <__divdf3+0x960>
 800becc:	91010f84 	addi	r4,r18,1086
 800bed0:	8908983a 	sll	r4,r17,r4
 800bed4:	24c8b03a 	or	r4,r4,r19
 800bed8:	2008c03a 	cmpne	r4,r4,zero
 800bedc:	2084b03a 	or	r2,r4,r2
 800bee0:	140001cc 	andi	r16,r2,7
 800bee4:	8000061e 	bne	r16,zero,800bf00 <__divdf3+0x924>
 800bee8:	000b883a 	mov	r5,zero
 800beec:	1004d0fa 	srli	r2,r2,3
 800bef0:	a180004c 	andi	r6,r20,1
 800bef4:	0011883a 	mov	r8,zero
 800bef8:	1426b03a 	or	r19,r2,r16
 800befc:	003e1506 	br	800b754 <__divdf3+0x178>
 800bf00:	114003cc 	andi	r5,r2,15
 800bf04:	01000104 	movi	r4,4
 800bf08:	0021883a 	mov	r16,zero
 800bf0c:	293fcd1e 	bne	r5,r4,800be44 <__divdf3+0x868>
 800bf10:	800a927a 	slli	r5,r16,9
 800bf14:	8020977a 	slli	r16,r16,29
 800bf18:	280ad33a 	srli	r5,r5,12
 800bf1c:	003ff306 	br	800beec <__divdf3+0x910>
 800bf20:	b23fd336 	bltu	r22,r8,800be70 <__divdf3+0x894>
 800bf24:	1023883a 	mov	r17,r2
 800bf28:	003fa906 	br	800bdd0 <__divdf3+0x7f4>
 800bf2c:	d8c00117 	ldw	r3,4(sp)
 800bf30:	193fd636 	bltu	r3,r4,800be8c <__divdf3+0x8b0>
 800bf34:	2827883a 	mov	r19,r5
 800bf38:	003f6806 	br	800bcdc <__divdf3+0x700>
 800bf3c:	0009883a 	mov	r4,zero
 800bf40:	003fe406 	br	800bed4 <__divdf3+0x8f8>
 800bf44:	00800434 	movhi	r2,16
 800bf48:	89400234 	orhi	r5,r17,8
 800bf4c:	10bfffc4 	addi	r2,r2,-1
 800bf50:	e00d883a 	mov	r6,fp
 800bf54:	288a703a 	and	r5,r5,r2
 800bf58:	003e5806 	br	800b8bc <__divdf3+0x2e0>

0800bf5c <__eqdf2>:
 800bf5c:	2804d53a 	srli	r2,r5,20
 800bf60:	3806d53a 	srli	r3,r7,20
 800bf64:	02000434 	movhi	r8,16
 800bf68:	423fffc4 	addi	r8,r8,-1
 800bf6c:	1081ffcc 	andi	r2,r2,2047
 800bf70:	0241ffc4 	movi	r9,2047
 800bf74:	2a14703a 	and	r10,r5,r8
 800bf78:	18c1ffcc 	andi	r3,r3,2047
 800bf7c:	3a10703a 	and	r8,r7,r8
 800bf80:	280ad7fa 	srli	r5,r5,31
 800bf84:	380ed7fa 	srli	r7,r7,31
 800bf88:	12400f26 	beq	r2,r9,800bfc8 <__eqdf2+0x6c>
 800bf8c:	0241ffc4 	movi	r9,2047
 800bf90:	1a400326 	beq	r3,r9,800bfa0 <__eqdf2+0x44>
 800bf94:	10c00526 	beq	r2,r3,800bfac <__eqdf2+0x50>
 800bf98:	00800044 	movi	r2,1
 800bf9c:	f800283a 	ret
 800bfa0:	4192b03a 	or	r9,r8,r6
 800bfa4:	483ffc1e 	bne	r9,zero,800bf98 <__eqdf2+0x3c>
 800bfa8:	10fffb1e 	bne	r2,r3,800bf98 <__eqdf2+0x3c>
 800bfac:	523ffa1e 	bne	r10,r8,800bf98 <__eqdf2+0x3c>
 800bfb0:	21bff91e 	bne	r4,r6,800bf98 <__eqdf2+0x3c>
 800bfb4:	29c00826 	beq	r5,r7,800bfd8 <__eqdf2+0x7c>
 800bfb8:	103ff71e 	bne	r2,zero,800bf98 <__eqdf2+0x3c>
 800bfbc:	5104b03a 	or	r2,r10,r4
 800bfc0:	1004c03a 	cmpne	r2,r2,zero
 800bfc4:	f800283a 	ret
 800bfc8:	5112b03a 	or	r9,r10,r4
 800bfcc:	483fef26 	beq	r9,zero,800bf8c <__eqdf2+0x30>
 800bfd0:	00800044 	movi	r2,1
 800bfd4:	f800283a 	ret
 800bfd8:	0005883a 	mov	r2,zero
 800bfdc:	f800283a 	ret

0800bfe0 <__gedf2>:
 800bfe0:	2804d53a 	srli	r2,r5,20
 800bfe4:	3806d53a 	srli	r3,r7,20
 800bfe8:	02000434 	movhi	r8,16
 800bfec:	423fffc4 	addi	r8,r8,-1
 800bff0:	0241ffc4 	movi	r9,2047
 800bff4:	1081ffcc 	andi	r2,r2,2047
 800bff8:	2a14703a 	and	r10,r5,r8
 800bffc:	1a46703a 	and	r3,r3,r9
 800c000:	3a10703a 	and	r8,r7,r8
 800c004:	280ad7fa 	srli	r5,r5,31
 800c008:	380ed7fa 	srli	r7,r7,31
 800c00c:	12400b26 	beq	r2,r9,800c03c <__gedf2+0x5c>
 800c010:	1a401626 	beq	r3,r9,800c06c <__gedf2+0x8c>
 800c014:	10000c1e 	bne	r2,zero,800c048 <__gedf2+0x68>
 800c018:	5112b03a 	or	r9,r10,r4
 800c01c:	4813003a 	cmpeq	r9,r9,zero
 800c020:	4817883a 	mov	r11,r9
 800c024:	18000c1e 	bne	r3,zero,800c058 <__gedf2+0x78>
 800c028:	4198b03a 	or	r12,r8,r6
 800c02c:	60000a1e 	bne	r12,zero,800c058 <__gedf2+0x78>
 800c030:	48001326 	beq	r9,zero,800c080 <__gedf2+0xa0>
 800c034:	0005883a 	mov	r2,zero
 800c038:	f800283a 	ret
 800c03c:	5112b03a 	or	r9,r10,r4
 800c040:	4800191e 	bne	r9,zero,800c0a8 <__gedf2+0xc8>
 800c044:	18800926 	beq	r3,r2,800c06c <__gedf2+0x8c>
 800c048:	18000b1e 	bne	r3,zero,800c078 <__gedf2+0x98>
 800c04c:	4192b03a 	or	r9,r8,r6
 800c050:	0017883a 	mov	r11,zero
 800c054:	48000a26 	beq	r9,zero,800c080 <__gedf2+0xa0>
 800c058:	39c03fcc 	andi	r7,r7,255
 800c05c:	58000726 	beq	r11,zero,800c07c <__gedf2+0x9c>
 800c060:	3800081e 	bne	r7,zero,800c084 <__gedf2+0xa4>
 800c064:	00bfffc4 	movi	r2,-1
 800c068:	f800283a 	ret
 800c06c:	4192b03a 	or	r9,r8,r6
 800c070:	48000d1e 	bne	r9,zero,800c0a8 <__gedf2+0xc8>
 800c074:	103fe826 	beq	r2,zero,800c018 <__gedf2+0x38>
 800c078:	39c03fcc 	andi	r7,r7,255
 800c07c:	29c00326 	beq	r5,r7,800c08c <__gedf2+0xac>
 800c080:	283ff81e 	bne	r5,zero,800c064 <__gedf2+0x84>
 800c084:	00800044 	movi	r2,1
 800c088:	f800283a 	ret
 800c08c:	18bffc16 	blt	r3,r2,800c080 <__gedf2+0xa0>
 800c090:	10c00316 	blt	r2,r3,800c0a0 <__gedf2+0xc0>
 800c094:	42bffa36 	bltu	r8,r10,800c080 <__gedf2+0xa0>
 800c098:	52000526 	beq	r10,r8,800c0b0 <__gedf2+0xd0>
 800c09c:	523fe52e 	bgeu	r10,r8,800c034 <__gedf2+0x54>
 800c0a0:	283ff026 	beq	r5,zero,800c064 <__gedf2+0x84>
 800c0a4:	003ff706 	br	800c084 <__gedf2+0xa4>
 800c0a8:	00bfff84 	movi	r2,-2
 800c0ac:	f800283a 	ret
 800c0b0:	313ff336 	bltu	r6,r4,800c080 <__gedf2+0xa0>
 800c0b4:	21bfdf2e 	bgeu	r4,r6,800c034 <__gedf2+0x54>
 800c0b8:	283fea26 	beq	r5,zero,800c064 <__gedf2+0x84>
 800c0bc:	003ff106 	br	800c084 <__gedf2+0xa4>

0800c0c0 <__ledf2>:
 800c0c0:	2804d53a 	srli	r2,r5,20
 800c0c4:	3810d53a 	srli	r8,r7,20
 800c0c8:	00c00434 	movhi	r3,16
 800c0cc:	18ffffc4 	addi	r3,r3,-1
 800c0d0:	0241ffc4 	movi	r9,2047
 800c0d4:	1081ffcc 	andi	r2,r2,2047
 800c0d8:	28d4703a 	and	r10,r5,r3
 800c0dc:	4250703a 	and	r8,r8,r9
 800c0e0:	38c6703a 	and	r3,r7,r3
 800c0e4:	280ad7fa 	srli	r5,r5,31
 800c0e8:	380ed7fa 	srli	r7,r7,31
 800c0ec:	12400b26 	beq	r2,r9,800c11c <__ledf2+0x5c>
 800c0f0:	42401926 	beq	r8,r9,800c158 <__ledf2+0x98>
 800c0f4:	10000c1e 	bne	r2,zero,800c128 <__ledf2+0x68>
 800c0f8:	5112b03a 	or	r9,r10,r4
 800c0fc:	4813003a 	cmpeq	r9,r9,zero
 800c100:	4817883a 	mov	r11,r9
 800c104:	40000f26 	beq	r8,zero,800c144 <__ledf2+0x84>
 800c108:	39c03fcc 	andi	r7,r7,255
 800c10c:	58001826 	beq	r11,zero,800c170 <__ledf2+0xb0>
 800c110:	38000a1e 	bne	r7,zero,800c13c <__ledf2+0x7c>
 800c114:	00bfffc4 	movi	r2,-1
 800c118:	f800283a 	ret
 800c11c:	5112b03a 	or	r9,r10,r4
 800c120:	48000f1e 	bne	r9,zero,800c160 <__ledf2+0xa0>
 800c124:	40800c26 	beq	r8,r2,800c158 <__ledf2+0x98>
 800c128:	4000101e 	bne	r8,zero,800c16c <__ledf2+0xac>
 800c12c:	1992b03a 	or	r9,r3,r6
 800c130:	0017883a 	mov	r11,zero
 800c134:	483ff41e 	bne	r9,zero,800c108 <__ledf2+0x48>
 800c138:	283ff61e 	bne	r5,zero,800c114 <__ledf2+0x54>
 800c13c:	00800044 	movi	r2,1
 800c140:	f800283a 	ret
 800c144:	1998b03a 	or	r12,r3,r6
 800c148:	603fef1e 	bne	r12,zero,800c108 <__ledf2+0x48>
 800c14c:	483ffa26 	beq	r9,zero,800c138 <__ledf2+0x78>
 800c150:	0005883a 	mov	r2,zero
 800c154:	f800283a 	ret
 800c158:	1992b03a 	or	r9,r3,r6
 800c15c:	48000226 	beq	r9,zero,800c168 <__ledf2+0xa8>
 800c160:	00800084 	movi	r2,2
 800c164:	f800283a 	ret
 800c168:	103fe326 	beq	r2,zero,800c0f8 <__ledf2+0x38>
 800c16c:	39c03fcc 	andi	r7,r7,255
 800c170:	29fff11e 	bne	r5,r7,800c138 <__ledf2+0x78>
 800c174:	40bff016 	blt	r8,r2,800c138 <__ledf2+0x78>
 800c178:	12000316 	blt	r2,r8,800c188 <__ledf2+0xc8>
 800c17c:	1abfee36 	bltu	r3,r10,800c138 <__ledf2+0x78>
 800c180:	50c00326 	beq	r10,r3,800c190 <__ledf2+0xd0>
 800c184:	50fff22e 	bgeu	r10,r3,800c150 <__ledf2+0x90>
 800c188:	283fe226 	beq	r5,zero,800c114 <__ledf2+0x54>
 800c18c:	003feb06 	br	800c13c <__ledf2+0x7c>
 800c190:	313fe936 	bltu	r6,r4,800c138 <__ledf2+0x78>
 800c194:	21bfee2e 	bgeu	r4,r6,800c150 <__ledf2+0x90>
 800c198:	283fde26 	beq	r5,zero,800c114 <__ledf2+0x54>
 800c19c:	003fe706 	br	800c13c <__ledf2+0x7c>

0800c1a0 <__muldf3>:
 800c1a0:	deffee04 	addi	sp,sp,-72
 800c1a4:	dd000c15 	stw	r20,48(sp)
 800c1a8:	2828d53a 	srli	r20,r5,20
 800c1ac:	dd400d15 	stw	r21,52(sp)
 800c1b0:	282ad7fa 	srli	r21,r5,31
 800c1b4:	dc000815 	stw	r16,32(sp)
 800c1b8:	04000434 	movhi	r16,16
 800c1bc:	ddc00f15 	stw	r23,60(sp)
 800c1c0:	dcc00b15 	stw	r19,44(sp)
 800c1c4:	dc800a15 	stw	r18,40(sp)
 800c1c8:	843fffc4 	addi	r16,r16,-1
 800c1cc:	dfc01115 	stw	ra,68(sp)
 800c1d0:	df001015 	stw	fp,64(sp)
 800c1d4:	dd800e15 	stw	r22,56(sp)
 800c1d8:	dc400915 	stw	r17,36(sp)
 800c1dc:	a501ffcc 	andi	r20,r20,2047
 800c1e0:	2025883a 	mov	r18,r4
 800c1e4:	202f883a 	mov	r23,r4
 800c1e8:	2c20703a 	and	r16,r5,r16
 800c1ec:	a827883a 	mov	r19,r21
 800c1f0:	aa403fcc 	andi	r9,r21,255
 800c1f4:	a0005926 	beq	r20,zero,800c35c <__muldf3+0x1bc>
 800c1f8:	0081ffc4 	movi	r2,2047
 800c1fc:	a0803426 	beq	r20,r2,800c2d0 <__muldf3+0x130>
 800c200:	84000434 	orhi	r16,r16,16
 800c204:	2004d77a 	srli	r2,r4,29
 800c208:	802090fa 	slli	r16,r16,3
 800c20c:	202e90fa 	slli	r23,r4,3
 800c210:	a53f0044 	addi	r20,r20,-1023
 800c214:	80a0b03a 	or	r16,r16,r2
 800c218:	000b883a 	mov	r5,zero
 800c21c:	0039883a 	mov	fp,zero
 800c220:	3806d53a 	srli	r3,r7,20
 800c224:	382cd7fa 	srli	r22,r7,31
 800c228:	00800434 	movhi	r2,16
 800c22c:	10bfffc4 	addi	r2,r2,-1
 800c230:	18c1ffcc 	andi	r3,r3,2047
 800c234:	3025883a 	mov	r18,r6
 800c238:	38a2703a 	and	r17,r7,r2
 800c23c:	b2803fcc 	andi	r10,r22,255
 800c240:	18006426 	beq	r3,zero,800c3d4 <__muldf3+0x234>
 800c244:	0081ffc4 	movi	r2,2047
 800c248:	18805c26 	beq	r3,r2,800c3bc <__muldf3+0x21c>
 800c24c:	8c400434 	orhi	r17,r17,16
 800c250:	3004d77a 	srli	r2,r6,29
 800c254:	882290fa 	slli	r17,r17,3
 800c258:	302490fa 	slli	r18,r6,3
 800c25c:	18ff0044 	addi	r3,r3,-1023
 800c260:	88a2b03a 	or	r17,r17,r2
 800c264:	000f883a 	mov	r7,zero
 800c268:	394ab03a 	or	r5,r7,r5
 800c26c:	280a90ba 	slli	r5,r5,2
 800c270:	00820074 	movhi	r2,2049
 800c274:	10b0a404 	addi	r2,r2,-15728
 800c278:	288b883a 	add	r5,r5,r2
 800c27c:	28800017 	ldw	r2,0(r5)
 800c280:	a0c7883a 	add	r3,r20,r3
 800c284:	b54cf03a 	xor	r6,r22,r21
 800c288:	1a000044 	addi	r8,r3,1
 800c28c:	1000683a 	jmp	r2
 800c290:	0800c4d4 	ori	zero,at,787
 800c294:	0800c4c0 	call	800c4c <__alt_mem_onchip_memory2_0+0x800c4c>
 800c298:	0800c4c0 	call	800c4c <__alt_mem_onchip_memory2_0+0x800c4c>
 800c29c:	0800c4ac 	andhi	zero,at,786
 800c2a0:	0800c2ec 	andhi	zero,at,779
 800c2a4:	0800c2ec 	andhi	zero,at,779
 800c2a8:	0800c494 	ori	zero,at,786
 800c2ac:	0800c4ac 	andhi	zero,at,786
 800c2b0:	0800c2ec 	andhi	zero,at,779
 800c2b4:	0800c494 	ori	zero,at,786
 800c2b8:	0800c2ec 	andhi	zero,at,779
 800c2bc:	0800c4ac 	andhi	zero,at,786
 800c2c0:	0800c2f0 	cmpltui	zero,at,779
 800c2c4:	0800c2f0 	cmpltui	zero,at,779
 800c2c8:	0800c2f0 	cmpltui	zero,at,779
 800c2cc:	0800c810 	cmplti	zero,at,800
 800c2d0:	8104b03a 	or	r2,r16,r4
 800c2d4:	10006c1e 	bne	r2,zero,800c488 <__muldf3+0x2e8>
 800c2d8:	01400204 	movi	r5,8
 800c2dc:	0021883a 	mov	r16,zero
 800c2e0:	002f883a 	mov	r23,zero
 800c2e4:	07000084 	movi	fp,2
 800c2e8:	003fcd06 	br	800c220 <__muldf3+0x80>
 800c2ec:	3013883a 	mov	r9,r6
 800c2f0:	00800084 	movi	r2,2
 800c2f4:	e080501e 	bne	fp,r2,800c438 <__muldf3+0x298>
 800c2f8:	4cc0004c 	andi	r19,r9,1
 800c2fc:	0101ffc4 	movi	r4,2047
 800c300:	0021883a 	mov	r16,zero
 800c304:	002f883a 	mov	r23,zero
 800c308:	2008953a 	slli	r4,r4,20
 800c30c:	98c03fcc 	andi	r3,r19,255
 800c310:	04400434 	movhi	r17,16
 800c314:	8c7fffc4 	addi	r17,r17,-1
 800c318:	180697fa 	slli	r3,r3,31
 800c31c:	8460703a 	and	r16,r16,r17
 800c320:	8120b03a 	or	r16,r16,r4
 800c324:	80c6b03a 	or	r3,r16,r3
 800c328:	b805883a 	mov	r2,r23
 800c32c:	dfc01117 	ldw	ra,68(sp)
 800c330:	df001017 	ldw	fp,64(sp)
 800c334:	ddc00f17 	ldw	r23,60(sp)
 800c338:	dd800e17 	ldw	r22,56(sp)
 800c33c:	dd400d17 	ldw	r21,52(sp)
 800c340:	dd000c17 	ldw	r20,48(sp)
 800c344:	dcc00b17 	ldw	r19,44(sp)
 800c348:	dc800a17 	ldw	r18,40(sp)
 800c34c:	dc400917 	ldw	r17,36(sp)
 800c350:	dc000817 	ldw	r16,32(sp)
 800c354:	dec01204 	addi	sp,sp,72
 800c358:	f800283a 	ret
 800c35c:	8104b03a 	or	r2,r16,r4
 800c360:	10004426 	beq	r2,zero,800c474 <__muldf3+0x2d4>
 800c364:	80014b26 	beq	r16,zero,800c894 <__muldf3+0x6f4>
 800c368:	8009883a 	mov	r4,r16
 800c36c:	d9800715 	stw	r6,28(sp)
 800c370:	d9c00215 	stw	r7,8(sp)
 800c374:	da400415 	stw	r9,16(sp)
 800c378:	8000c900 	call	8000c90 <__clzsi2>
 800c37c:	d9800717 	ldw	r6,28(sp)
 800c380:	d9c00217 	ldw	r7,8(sp)
 800c384:	da400417 	ldw	r9,16(sp)
 800c388:	1007883a 	mov	r3,r2
 800c38c:	01000a04 	movi	r4,40
 800c390:	1dfffe04 	addi	r23,r3,-8
 800c394:	20c9c83a 	sub	r4,r4,r3
 800c398:	85e0983a 	sll	r16,r16,r23
 800c39c:	9108d83a 	srl	r4,r18,r4
 800c3a0:	95ee983a 	sll	r23,r18,r23
 800c3a4:	2420b03a 	or	r16,r4,r16
 800c3a8:	053f0344 	movi	r20,-1011
 800c3ac:	a0e9c83a 	sub	r20,r20,r3
 800c3b0:	000b883a 	mov	r5,zero
 800c3b4:	0039883a 	mov	fp,zero
 800c3b8:	003f9906 	br	800c220 <__muldf3+0x80>
 800c3bc:	8984b03a 	or	r2,r17,r6
 800c3c0:	10002a1e 	bne	r2,zero,800c46c <__muldf3+0x2cc>
 800c3c4:	0023883a 	mov	r17,zero
 800c3c8:	0025883a 	mov	r18,zero
 800c3cc:	01c00084 	movi	r7,2
 800c3d0:	003fa506 	br	800c268 <__muldf3+0xc8>
 800c3d4:	8984b03a 	or	r2,r17,r6
 800c3d8:	10002026 	beq	r2,zero,800c45c <__muldf3+0x2bc>
 800c3dc:	88011c26 	beq	r17,zero,800c850 <__muldf3+0x6b0>
 800c3e0:	8809883a 	mov	r4,r17
 800c3e4:	d9400215 	stw	r5,8(sp)
 800c3e8:	d9800715 	stw	r6,28(sp)
 800c3ec:	da400415 	stw	r9,16(sp)
 800c3f0:	da800315 	stw	r10,12(sp)
 800c3f4:	8000c900 	call	8000c90 <__clzsi2>
 800c3f8:	d9400217 	ldw	r5,8(sp)
 800c3fc:	d9800717 	ldw	r6,28(sp)
 800c400:	da400417 	ldw	r9,16(sp)
 800c404:	da800317 	ldw	r10,12(sp)
 800c408:	1007883a 	mov	r3,r2
 800c40c:	01000a04 	movi	r4,40
 800c410:	1cbffe04 	addi	r18,r3,-8
 800c414:	20c9c83a 	sub	r4,r4,r3
 800c418:	8ca2983a 	sll	r17,r17,r18
 800c41c:	3108d83a 	srl	r4,r6,r4
 800c420:	34a4983a 	sll	r18,r6,r18
 800c424:	2462b03a 	or	r17,r4,r17
 800c428:	00bf0344 	movi	r2,-1011
 800c42c:	10c7c83a 	sub	r3,r2,r3
 800c430:	000f883a 	mov	r7,zero
 800c434:	003f8c06 	br	800c268 <__muldf3+0xc8>
 800c438:	008000c4 	movi	r2,3
 800c43c:	e0816d26 	beq	fp,r2,800c9f4 <__muldf3+0x854>
 800c440:	00800044 	movi	r2,1
 800c444:	e081321e 	bne	fp,r2,800c910 <__muldf3+0x770>
 800c448:	48a6703a 	and	r19,r9,r2
 800c44c:	0009883a 	mov	r4,zero
 800c450:	0021883a 	mov	r16,zero
 800c454:	002f883a 	mov	r23,zero
 800c458:	003fab06 	br	800c308 <__muldf3+0x168>
 800c45c:	0023883a 	mov	r17,zero
 800c460:	0025883a 	mov	r18,zero
 800c464:	01c00044 	movi	r7,1
 800c468:	003f7f06 	br	800c268 <__muldf3+0xc8>
 800c46c:	01c000c4 	movi	r7,3
 800c470:	003f7d06 	br	800c268 <__muldf3+0xc8>
 800c474:	01400104 	movi	r5,4
 800c478:	0021883a 	mov	r16,zero
 800c47c:	002f883a 	mov	r23,zero
 800c480:	07000044 	movi	fp,1
 800c484:	003f6606 	br	800c220 <__muldf3+0x80>
 800c488:	01400304 	movi	r5,12
 800c48c:	070000c4 	movi	fp,3
 800c490:	003f6306 	br	800c220 <__muldf3+0x80>
 800c494:	04000434 	movhi	r16,16
 800c498:	0027883a 	mov	r19,zero
 800c49c:	843fffc4 	addi	r16,r16,-1
 800c4a0:	05ffffc4 	movi	r23,-1
 800c4a4:	0101ffc4 	movi	r4,2047
 800c4a8:	003f9706 	br	800c308 <__muldf3+0x168>
 800c4ac:	8821883a 	mov	r16,r17
 800c4b0:	902f883a 	mov	r23,r18
 800c4b4:	5013883a 	mov	r9,r10
 800c4b8:	3839883a 	mov	fp,r7
 800c4bc:	003f8c06 	br	800c2f0 <__muldf3+0x150>
 800c4c0:	8821883a 	mov	r16,r17
 800c4c4:	902f883a 	mov	r23,r18
 800c4c8:	3013883a 	mov	r9,r6
 800c4cc:	3839883a 	mov	fp,r7
 800c4d0:	003f8706 	br	800c2f0 <__muldf3+0x150>
 800c4d4:	b82ad43a 	srli	r21,r23,16
 800c4d8:	9038d43a 	srli	fp,r18,16
 800c4dc:	bdffffcc 	andi	r23,r23,65535
 800c4e0:	94bfffcc 	andi	r18,r18,65535
 800c4e4:	9009883a 	mov	r4,r18
 800c4e8:	b80b883a 	mov	r5,r23
 800c4ec:	d8c00515 	stw	r3,20(sp)
 800c4f0:	d9800715 	stw	r6,28(sp)
 800c4f4:	da000615 	stw	r8,24(sp)
 800c4f8:	80005f80 	call	80005f8 <__mulsi3>
 800c4fc:	9009883a 	mov	r4,r18
 800c500:	a80b883a 	mov	r5,r21
 800c504:	1029883a 	mov	r20,r2
 800c508:	80005f80 	call	80005f8 <__mulsi3>
 800c50c:	e009883a 	mov	r4,fp
 800c510:	a80b883a 	mov	r5,r21
 800c514:	102d883a 	mov	r22,r2
 800c518:	80005f80 	call	80005f8 <__mulsi3>
 800c51c:	e009883a 	mov	r4,fp
 800c520:	b80b883a 	mov	r5,r23
 800c524:	1027883a 	mov	r19,r2
 800c528:	80005f80 	call	80005f8 <__mulsi3>
 800c52c:	a008d43a 	srli	r4,r20,16
 800c530:	b085883a 	add	r2,r22,r2
 800c534:	d8c00517 	ldw	r3,20(sp)
 800c538:	110f883a 	add	r7,r2,r4
 800c53c:	d9800717 	ldw	r6,28(sp)
 800c540:	da000617 	ldw	r8,24(sp)
 800c544:	3d80022e 	bgeu	r7,r22,800c550 <__muldf3+0x3b0>
 800c548:	00800074 	movhi	r2,1
 800c54c:	98a7883a 	add	r19,r19,r2
 800c550:	3804943a 	slli	r2,r7,16
 800c554:	380ed43a 	srli	r7,r7,16
 800c558:	882cd43a 	srli	r22,r17,16
 800c55c:	a53fffcc 	andi	r20,r20,65535
 800c560:	8c7fffcc 	andi	r17,r17,65535
 800c564:	1529883a 	add	r20,r2,r20
 800c568:	8809883a 	mov	r4,r17
 800c56c:	b80b883a 	mov	r5,r23
 800c570:	d8c00515 	stw	r3,20(sp)
 800c574:	d9800715 	stw	r6,28(sp)
 800c578:	da000615 	stw	r8,24(sp)
 800c57c:	d9c00015 	stw	r7,0(sp)
 800c580:	dd000115 	stw	r20,4(sp)
 800c584:	80005f80 	call	80005f8 <__mulsi3>
 800c588:	a80b883a 	mov	r5,r21
 800c58c:	8809883a 	mov	r4,r17
 800c590:	d8800415 	stw	r2,16(sp)
 800c594:	80005f80 	call	80005f8 <__mulsi3>
 800c598:	a80b883a 	mov	r5,r21
 800c59c:	b009883a 	mov	r4,r22
 800c5a0:	1029883a 	mov	r20,r2
 800c5a4:	80005f80 	call	80005f8 <__mulsi3>
 800c5a8:	b009883a 	mov	r4,r22
 800c5ac:	b80b883a 	mov	r5,r23
 800c5b0:	102b883a 	mov	r21,r2
 800c5b4:	80005f80 	call	80005f8 <__mulsi3>
 800c5b8:	da400417 	ldw	r9,16(sp)
 800c5bc:	a085883a 	add	r2,r20,r2
 800c5c0:	d8c00517 	ldw	r3,20(sp)
 800c5c4:	4808d43a 	srli	r4,r9,16
 800c5c8:	d9800717 	ldw	r6,28(sp)
 800c5cc:	da000617 	ldw	r8,24(sp)
 800c5d0:	1109883a 	add	r4,r2,r4
 800c5d4:	2500022e 	bgeu	r4,r20,800c5e0 <__muldf3+0x440>
 800c5d8:	00800074 	movhi	r2,1
 800c5dc:	a8ab883a 	add	r21,r21,r2
 800c5e0:	200e943a 	slli	r7,r4,16
 800c5e4:	2004d43a 	srli	r2,r4,16
 800c5e8:	802ed43a 	srli	r23,r16,16
 800c5ec:	843fffcc 	andi	r16,r16,65535
 800c5f0:	4d3fffcc 	andi	r20,r9,65535
 800c5f4:	9009883a 	mov	r4,r18
 800c5f8:	800b883a 	mov	r5,r16
 800c5fc:	3d29883a 	add	r20,r7,r20
 800c600:	d8c00515 	stw	r3,20(sp)
 800c604:	d9800715 	stw	r6,28(sp)
 800c608:	da000615 	stw	r8,24(sp)
 800c60c:	a8ab883a 	add	r21,r21,r2
 800c610:	80005f80 	call	80005f8 <__mulsi3>
 800c614:	9009883a 	mov	r4,r18
 800c618:	b80b883a 	mov	r5,r23
 800c61c:	d8800315 	stw	r2,12(sp)
 800c620:	80005f80 	call	80005f8 <__mulsi3>
 800c624:	e009883a 	mov	r4,fp
 800c628:	b80b883a 	mov	r5,r23
 800c62c:	1025883a 	mov	r18,r2
 800c630:	80005f80 	call	80005f8 <__mulsi3>
 800c634:	e009883a 	mov	r4,fp
 800c638:	800b883a 	mov	r5,r16
 800c63c:	d8800215 	stw	r2,8(sp)
 800c640:	80005f80 	call	80005f8 <__mulsi3>
 800c644:	da800317 	ldw	r10,12(sp)
 800c648:	d9400017 	ldw	r5,0(sp)
 800c64c:	9085883a 	add	r2,r18,r2
 800c650:	5008d43a 	srli	r4,r10,16
 800c654:	a153883a 	add	r9,r20,r5
 800c658:	d8c00517 	ldw	r3,20(sp)
 800c65c:	1109883a 	add	r4,r2,r4
 800c660:	d9800717 	ldw	r6,28(sp)
 800c664:	da000617 	ldw	r8,24(sp)
 800c668:	dac00217 	ldw	r11,8(sp)
 800c66c:	2480022e 	bgeu	r4,r18,800c678 <__muldf3+0x4d8>
 800c670:	00800074 	movhi	r2,1
 800c674:	5897883a 	add	r11,r11,r2
 800c678:	200e943a 	slli	r7,r4,16
 800c67c:	2038d43a 	srli	fp,r4,16
 800c680:	52bfffcc 	andi	r10,r10,65535
 800c684:	3a8f883a 	add	r7,r7,r10
 800c688:	8809883a 	mov	r4,r17
 800c68c:	800b883a 	mov	r5,r16
 800c690:	d8c00515 	stw	r3,20(sp)
 800c694:	d9800715 	stw	r6,28(sp)
 800c698:	d9c00215 	stw	r7,8(sp)
 800c69c:	da000615 	stw	r8,24(sp)
 800c6a0:	da400415 	stw	r9,16(sp)
 800c6a4:	5f39883a 	add	fp,r11,fp
 800c6a8:	80005f80 	call	80005f8 <__mulsi3>
 800c6ac:	8809883a 	mov	r4,r17
 800c6b0:	b80b883a 	mov	r5,r23
 800c6b4:	1025883a 	mov	r18,r2
 800c6b8:	80005f80 	call	80005f8 <__mulsi3>
 800c6bc:	b009883a 	mov	r4,r22
 800c6c0:	b80b883a 	mov	r5,r23
 800c6c4:	d8800315 	stw	r2,12(sp)
 800c6c8:	80005f80 	call	80005f8 <__mulsi3>
 800c6cc:	b009883a 	mov	r4,r22
 800c6d0:	800b883a 	mov	r5,r16
 800c6d4:	1023883a 	mov	r17,r2
 800c6d8:	80005f80 	call	80005f8 <__mulsi3>
 800c6dc:	da800317 	ldw	r10,12(sp)
 800c6e0:	9008d43a 	srli	r4,r18,16
 800c6e4:	d8c00517 	ldw	r3,20(sp)
 800c6e8:	5085883a 	add	r2,r10,r2
 800c6ec:	1109883a 	add	r4,r2,r4
 800c6f0:	d9800717 	ldw	r6,28(sp)
 800c6f4:	d9c00217 	ldw	r7,8(sp)
 800c6f8:	da000617 	ldw	r8,24(sp)
 800c6fc:	da400417 	ldw	r9,16(sp)
 800c700:	2280022e 	bgeu	r4,r10,800c70c <__muldf3+0x56c>
 800c704:	00800074 	movhi	r2,1
 800c708:	88a3883a 	add	r17,r17,r2
 800c70c:	2004943a 	slli	r2,r4,16
 800c710:	94bfffcc 	andi	r18,r18,65535
 800c714:	4ce7883a 	add	r19,r9,r19
 800c718:	14a5883a 	add	r18,r2,r18
 800c71c:	9d29803a 	cmpltu	r20,r19,r20
 800c720:	9565883a 	add	r18,r18,r21
 800c724:	9505883a 	add	r2,r18,r20
 800c728:	99e7883a 	add	r19,r19,r7
 800c72c:	99cf803a 	cmpltu	r7,r19,r7
 800c730:	e08b883a 	add	r5,fp,r2
 800c734:	2008d43a 	srli	r4,r4,16
 800c738:	29ef883a 	add	r23,r5,r7
 800c73c:	1529803a 	cmpltu	r20,r2,r20
 800c740:	956b803a 	cmpltu	r21,r18,r21
 800c744:	b9cf803a 	cmpltu	r7,r23,r7
 800c748:	a564b03a 	or	r18,r20,r21
 800c74c:	2f39803a 	cmpltu	fp,r5,fp
 800c750:	9125883a 	add	r18,r18,r4
 800c754:	3f38b03a 	or	fp,r7,fp
 800c758:	9725883a 	add	r18,r18,fp
 800c75c:	9804927a 	slli	r2,r19,9
 800c760:	9463883a 	add	r17,r18,r17
 800c764:	d9000117 	ldw	r4,4(sp)
 800c768:	b820d5fa 	srli	r16,r23,23
 800c76c:	8822927a 	slli	r17,r17,9
 800c770:	9826d5fa 	srli	r19,r19,23
 800c774:	1104b03a 	or	r2,r2,r4
 800c778:	b82e927a 	slli	r23,r23,9
 800c77c:	1004c03a 	cmpne	r2,r2,zero
 800c780:	8c20b03a 	or	r16,r17,r16
 800c784:	14e6b03a 	or	r19,r2,r19
 800c788:	8080402c 	andhi	r2,r16,256
 800c78c:	9deeb03a 	or	r23,r19,r23
 800c790:	10000726 	beq	r2,zero,800c7b0 <__muldf3+0x610>
 800c794:	b804d07a 	srli	r2,r23,1
 800c798:	800697fa 	slli	r3,r16,31
 800c79c:	bdc0004c 	andi	r23,r23,1
 800c7a0:	8020d07a 	srli	r16,r16,1
 800c7a4:	b8aeb03a 	or	r23,r23,r2
 800c7a8:	b8eeb03a 	or	r23,r23,r3
 800c7ac:	4007883a 	mov	r3,r8
 800c7b0:	1900ffc4 	addi	r4,r3,1023
 800c7b4:	01004d0e 	bge	zero,r4,800c8ec <__muldf3+0x74c>
 800c7b8:	b88001cc 	andi	r2,r23,7
 800c7bc:	10000726 	beq	r2,zero,800c7dc <__muldf3+0x63c>
 800c7c0:	b94003cc 	andi	r5,r23,15
 800c7c4:	00800104 	movi	r2,4
 800c7c8:	28800426 	beq	r5,r2,800c7dc <__muldf3+0x63c>
 800c7cc:	b885883a 	add	r2,r23,r2
 800c7d0:	15ef803a 	cmpltu	r23,r2,r23
 800c7d4:	85e1883a 	add	r16,r16,r23
 800c7d8:	102f883a 	mov	r23,r2
 800c7dc:	8080402c 	andhi	r2,r16,256
 800c7e0:	10000426 	beq	r2,zero,800c7f4 <__muldf3+0x654>
 800c7e4:	00bfc034 	movhi	r2,65280
 800c7e8:	10bfffc4 	addi	r2,r2,-1
 800c7ec:	19010004 	addi	r4,r3,1024
 800c7f0:	80a0703a 	and	r16,r16,r2
 800c7f4:	0081ff84 	movi	r2,2046
 800c7f8:	1100340e 	bge	r2,r4,800c8cc <__muldf3+0x72c>
 800c7fc:	34c0004c 	andi	r19,r6,1
 800c800:	0101ffc4 	movi	r4,2047
 800c804:	0021883a 	mov	r16,zero
 800c808:	002f883a 	mov	r23,zero
 800c80c:	003ebe06 	br	800c308 <__muldf3+0x168>
 800c810:	8080022c 	andhi	r2,r16,8
 800c814:	10000926 	beq	r2,zero,800c83c <__muldf3+0x69c>
 800c818:	8880022c 	andhi	r2,r17,8
 800c81c:	1000071e 	bne	r2,zero,800c83c <__muldf3+0x69c>
 800c820:	00800434 	movhi	r2,16
 800c824:	8c000234 	orhi	r16,r17,8
 800c828:	10bfffc4 	addi	r2,r2,-1
 800c82c:	b027883a 	mov	r19,r22
 800c830:	80a0703a 	and	r16,r16,r2
 800c834:	902f883a 	mov	r23,r18
 800c838:	003f1a06 	br	800c4a4 <__muldf3+0x304>
 800c83c:	00800434 	movhi	r2,16
 800c840:	84000234 	orhi	r16,r16,8
 800c844:	10bfffc4 	addi	r2,r2,-1
 800c848:	80a0703a 	and	r16,r16,r2
 800c84c:	003f1506 	br	800c4a4 <__muldf3+0x304>
 800c850:	3009883a 	mov	r4,r6
 800c854:	d9400215 	stw	r5,8(sp)
 800c858:	d9800715 	stw	r6,28(sp)
 800c85c:	da400415 	stw	r9,16(sp)
 800c860:	da800315 	stw	r10,12(sp)
 800c864:	8000c900 	call	8000c90 <__clzsi2>
 800c868:	10c00804 	addi	r3,r2,32
 800c86c:	010009c4 	movi	r4,39
 800c870:	d9400217 	ldw	r5,8(sp)
 800c874:	d9800717 	ldw	r6,28(sp)
 800c878:	da400417 	ldw	r9,16(sp)
 800c87c:	da800317 	ldw	r10,12(sp)
 800c880:	20fee20e 	bge	r4,r3,800c40c <__muldf3+0x26c>
 800c884:	147ffe04 	addi	r17,r2,-8
 800c888:	9462983a 	sll	r17,r18,r17
 800c88c:	0025883a 	mov	r18,zero
 800c890:	003ee506 	br	800c428 <__muldf3+0x288>
 800c894:	d9800715 	stw	r6,28(sp)
 800c898:	d9c00215 	stw	r7,8(sp)
 800c89c:	da400415 	stw	r9,16(sp)
 800c8a0:	8000c900 	call	8000c90 <__clzsi2>
 800c8a4:	10c00804 	addi	r3,r2,32
 800c8a8:	010009c4 	movi	r4,39
 800c8ac:	d9800717 	ldw	r6,28(sp)
 800c8b0:	d9c00217 	ldw	r7,8(sp)
 800c8b4:	da400417 	ldw	r9,16(sp)
 800c8b8:	20feb40e 	bge	r4,r3,800c38c <__muldf3+0x1ec>
 800c8bc:	143ffe04 	addi	r16,r2,-8
 800c8c0:	9420983a 	sll	r16,r18,r16
 800c8c4:	002f883a 	mov	r23,zero
 800c8c8:	003eb706 	br	800c3a8 <__muldf3+0x208>
 800c8cc:	8004977a 	slli	r2,r16,29
 800c8d0:	b82ed0fa 	srli	r23,r23,3
 800c8d4:	8020927a 	slli	r16,r16,9
 800c8d8:	2101ffcc 	andi	r4,r4,2047
 800c8dc:	15eeb03a 	or	r23,r2,r23
 800c8e0:	8020d33a 	srli	r16,r16,12
 800c8e4:	34c0004c 	andi	r19,r6,1
 800c8e8:	003e8706 	br	800c308 <__muldf3+0x168>
 800c8ec:	00bf0084 	movi	r2,-1022
 800c8f0:	10c5c83a 	sub	r2,r2,r3
 800c8f4:	01000e04 	movi	r4,56
 800c8f8:	2080080e 	bge	r4,r2,800c91c <__muldf3+0x77c>
 800c8fc:	34c0004c 	andi	r19,r6,1
 800c900:	0009883a 	mov	r4,zero
 800c904:	0021883a 	mov	r16,zero
 800c908:	002f883a 	mov	r23,zero
 800c90c:	003e7e06 	br	800c308 <__muldf3+0x168>
 800c910:	4007883a 	mov	r3,r8
 800c914:	480d883a 	mov	r6,r9
 800c918:	003fa506 	br	800c7b0 <__muldf3+0x610>
 800c91c:	010007c4 	movi	r4,31
 800c920:	20801816 	blt	r4,r2,800c984 <__muldf3+0x7e4>
 800c924:	18c10784 	addi	r3,r3,1054
 800c928:	80c8983a 	sll	r4,r16,r3
 800c92c:	b88ad83a 	srl	r5,r23,r2
 800c930:	b8c6983a 	sll	r3,r23,r3
 800c934:	80a0d83a 	srl	r16,r16,r2
 800c938:	2908b03a 	or	r4,r5,r4
 800c93c:	1804c03a 	cmpne	r2,r3,zero
 800c940:	2088b03a 	or	r4,r4,r2
 800c944:	208001cc 	andi	r2,r4,7
 800c948:	10000726 	beq	r2,zero,800c968 <__muldf3+0x7c8>
 800c94c:	20c003cc 	andi	r3,r4,15
 800c950:	00800104 	movi	r2,4
 800c954:	18800426 	beq	r3,r2,800c968 <__muldf3+0x7c8>
 800c958:	20c00104 	addi	r3,r4,4
 800c95c:	1905803a 	cmpltu	r2,r3,r4
 800c960:	80a1883a 	add	r16,r16,r2
 800c964:	1809883a 	mov	r4,r3
 800c968:	8080202c 	andhi	r2,r16,128
 800c96c:	10001b26 	beq	r2,zero,800c9dc <__muldf3+0x83c>
 800c970:	34c0004c 	andi	r19,r6,1
 800c974:	01000044 	movi	r4,1
 800c978:	0021883a 	mov	r16,zero
 800c97c:	002f883a 	mov	r23,zero
 800c980:	003e6106 	br	800c308 <__muldf3+0x168>
 800c984:	013ef884 	movi	r4,-1054
 800c988:	20c9c83a 	sub	r4,r4,r3
 800c98c:	01400804 	movi	r5,32
 800c990:	8108d83a 	srl	r4,r16,r4
 800c994:	11401526 	beq	r2,r5,800c9ec <__muldf3+0x84c>
 800c998:	18c10f84 	addi	r3,r3,1086
 800c99c:	80e0983a 	sll	r16,r16,r3
 800c9a0:	85eeb03a 	or	r23,r16,r23
 800c9a4:	b804c03a 	cmpne	r2,r23,zero
 800c9a8:	1108b03a 	or	r4,r2,r4
 800c9ac:	20c001cc 	andi	r3,r4,7
 800c9b0:	1800061e 	bne	r3,zero,800c9cc <__muldf3+0x82c>
 800c9b4:	0021883a 	mov	r16,zero
 800c9b8:	202ed0fa 	srli	r23,r4,3
 800c9bc:	34c0004c 	andi	r19,r6,1
 800c9c0:	0009883a 	mov	r4,zero
 800c9c4:	b8eeb03a 	or	r23,r23,r3
 800c9c8:	003e4f06 	br	800c308 <__muldf3+0x168>
 800c9cc:	20c003cc 	andi	r3,r4,15
 800c9d0:	00800104 	movi	r2,4
 800c9d4:	0021883a 	mov	r16,zero
 800c9d8:	18bfdf1e 	bne	r3,r2,800c958 <__muldf3+0x7b8>
 800c9dc:	8004927a 	slli	r2,r16,9
 800c9e0:	8006977a 	slli	r3,r16,29
 800c9e4:	1020d33a 	srli	r16,r2,12
 800c9e8:	003ff306 	br	800c9b8 <__muldf3+0x818>
 800c9ec:	0021883a 	mov	r16,zero
 800c9f0:	003feb06 	br	800c9a0 <__muldf3+0x800>
 800c9f4:	00800434 	movhi	r2,16
 800c9f8:	84000234 	orhi	r16,r16,8
 800c9fc:	10bfffc4 	addi	r2,r2,-1
 800ca00:	4cc0004c 	andi	r19,r9,1
 800ca04:	80a0703a 	and	r16,r16,r2
 800ca08:	003ea606 	br	800c4a4 <__muldf3+0x304>

0800ca0c <__subdf3>:
 800ca0c:	00c00434 	movhi	r3,16
 800ca10:	18ffffc4 	addi	r3,r3,-1
 800ca14:	defffb04 	addi	sp,sp,-20
 800ca18:	28d2703a 	and	r9,r5,r3
 800ca1c:	3814d53a 	srli	r10,r7,20
 800ca20:	38c6703a 	and	r3,r7,r3
 800ca24:	3004d77a 	srli	r2,r6,29
 800ca28:	dc800215 	stw	r18,8(sp)
 800ca2c:	dc000015 	stw	r16,0(sp)
 800ca30:	2824d7fa 	srli	r18,r5,31
 800ca34:	2820d53a 	srli	r16,r5,20
 800ca38:	481290fa 	slli	r9,r9,3
 800ca3c:	200ad77a 	srli	r5,r4,29
 800ca40:	180690fa 	slli	r3,r3,3
 800ca44:	dc400115 	stw	r17,4(sp)
 800ca48:	dfc00415 	stw	ra,16(sp)
 800ca4c:	202290fa 	slli	r17,r4,3
 800ca50:	dcc00315 	stw	r19,12(sp)
 800ca54:	5281ffcc 	andi	r10,r10,2047
 800ca58:	0101ffc4 	movi	r4,2047
 800ca5c:	9011883a 	mov	r8,r18
 800ca60:	8401ffcc 	andi	r16,r16,2047
 800ca64:	94803fcc 	andi	r18,r18,255
 800ca68:	494ab03a 	or	r5,r9,r5
 800ca6c:	380ed7fa 	srli	r7,r7,31
 800ca70:	1886b03a 	or	r3,r3,r2
 800ca74:	300c90fa 	slli	r6,r6,3
 800ca78:	51009026 	beq	r10,r4,800ccbc <__subdf3+0x2b0>
 800ca7c:	39c0005c 	xori	r7,r7,1
 800ca80:	8285c83a 	sub	r2,r16,r10
 800ca84:	91c06f26 	beq	r18,r7,800cc44 <__subdf3+0x238>
 800ca88:	0080b10e 	bge	zero,r2,800cd50 <__subdf3+0x344>
 800ca8c:	50002a1e 	bne	r10,zero,800cb38 <__subdf3+0x12c>
 800ca90:	1988b03a 	or	r4,r3,r6
 800ca94:	2000941e 	bne	r4,zero,800cce8 <__subdf3+0x2dc>
 800ca98:	888001cc 	andi	r2,r17,7
 800ca9c:	10005b26 	beq	r2,zero,800cc0c <__subdf3+0x200>
 800caa0:	88c003cc 	andi	r3,r17,15
 800caa4:	00800104 	movi	r2,4
 800caa8:	18805826 	beq	r3,r2,800cc0c <__subdf3+0x200>
 800caac:	88c00104 	addi	r3,r17,4
 800cab0:	1c63803a 	cmpltu	r17,r3,r17
 800cab4:	2c4b883a 	add	r5,r5,r17
 800cab8:	2880202c 	andhi	r2,r5,128
 800cabc:	9200004c 	andi	r8,r18,1
 800cac0:	1823883a 	mov	r17,r3
 800cac4:	10005426 	beq	r2,zero,800cc18 <__subdf3+0x20c>
 800cac8:	84000044 	addi	r16,r16,1
 800cacc:	0081ffc4 	movi	r2,2047
 800cad0:	8080bf26 	beq	r16,r2,800cdd0 <__subdf3+0x3c4>
 800cad4:	013fe034 	movhi	r4,65408
 800cad8:	213fffc4 	addi	r4,r4,-1
 800cadc:	290a703a 	and	r5,r5,r4
 800cae0:	2804977a 	slli	r2,r5,29
 800cae4:	280a927a 	slli	r5,r5,9
 800cae8:	8822d0fa 	srli	r17,r17,3
 800caec:	8401ffcc 	andi	r16,r16,2047
 800caf0:	2808d33a 	srli	r4,r5,12
 800caf4:	1444b03a 	or	r2,r2,r17
 800caf8:	8401ffcc 	andi	r16,r16,2047
 800cafc:	800a953a 	slli	r5,r16,20
 800cb00:	40c03fcc 	andi	r3,r8,255
 800cb04:	04000434 	movhi	r16,16
 800cb08:	180697fa 	slli	r3,r3,31
 800cb0c:	843fffc4 	addi	r16,r16,-1
 800cb10:	2420703a 	and	r16,r4,r16
 800cb14:	8160b03a 	or	r16,r16,r5
 800cb18:	80c6b03a 	or	r3,r16,r3
 800cb1c:	dfc00417 	ldw	ra,16(sp)
 800cb20:	dcc00317 	ldw	r19,12(sp)
 800cb24:	dc800217 	ldw	r18,8(sp)
 800cb28:	dc400117 	ldw	r17,4(sp)
 800cb2c:	dc000017 	ldw	r16,0(sp)
 800cb30:	dec00504 	addi	sp,sp,20
 800cb34:	f800283a 	ret
 800cb38:	0101ffc4 	movi	r4,2047
 800cb3c:	813fd626 	beq	r16,r4,800ca98 <__subdf3+0x8c>
 800cb40:	18c02034 	orhi	r3,r3,128
 800cb44:	01000e04 	movi	r4,56
 800cb48:	2080a416 	blt	r4,r2,800cddc <__subdf3+0x3d0>
 800cb4c:	010007c4 	movi	r4,31
 800cb50:	2080c716 	blt	r4,r2,800ce70 <__subdf3+0x464>
 800cb54:	01000804 	movi	r4,32
 800cb58:	2089c83a 	sub	r4,r4,r2
 800cb5c:	1910983a 	sll	r8,r3,r4
 800cb60:	308ed83a 	srl	r7,r6,r2
 800cb64:	3108983a 	sll	r4,r6,r4
 800cb68:	1884d83a 	srl	r2,r3,r2
 800cb6c:	41ccb03a 	or	r6,r8,r7
 800cb70:	2008c03a 	cmpne	r4,r4,zero
 800cb74:	310cb03a 	or	r6,r6,r4
 800cb78:	898dc83a 	sub	r6,r17,r6
 800cb7c:	89a3803a 	cmpltu	r17,r17,r6
 800cb80:	288bc83a 	sub	r5,r5,r2
 800cb84:	2c4bc83a 	sub	r5,r5,r17
 800cb88:	3023883a 	mov	r17,r6
 800cb8c:	2880202c 	andhi	r2,r5,128
 800cb90:	10006b26 	beq	r2,zero,800cd40 <__subdf3+0x334>
 800cb94:	04c02034 	movhi	r19,128
 800cb98:	9cffffc4 	addi	r19,r19,-1
 800cb9c:	2ce6703a 	and	r19,r5,r19
 800cba0:	98007c26 	beq	r19,zero,800cd94 <__subdf3+0x388>
 800cba4:	9809883a 	mov	r4,r19
 800cba8:	8000c900 	call	8000c90 <__clzsi2>
 800cbac:	10fffe04 	addi	r3,r2,-8
 800cbb0:	010007c4 	movi	r4,31
 800cbb4:	20c07d16 	blt	r4,r3,800cdac <__subdf3+0x3a0>
 800cbb8:	01400a04 	movi	r5,40
 800cbbc:	2885c83a 	sub	r2,r5,r2
 800cbc0:	888ad83a 	srl	r5,r17,r2
 800cbc4:	98e6983a 	sll	r19,r19,r3
 800cbc8:	88e2983a 	sll	r17,r17,r3
 800cbcc:	2ce6b03a 	or	r19,r5,r19
 800cbd0:	1c007a16 	blt	r3,r16,800cdbc <__subdf3+0x3b0>
 800cbd4:	1c21c83a 	sub	r16,r3,r16
 800cbd8:	81400044 	addi	r5,r16,1
 800cbdc:	00c007c4 	movi	r3,31
 800cbe0:	19409616 	blt	r3,r5,800ce3c <__subdf3+0x430>
 800cbe4:	1c21c83a 	sub	r16,r3,r16
 800cbe8:	8c08983a 	sll	r4,r17,r16
 800cbec:	8946d83a 	srl	r3,r17,r5
 800cbf0:	9c20983a 	sll	r16,r19,r16
 800cbf4:	2008c03a 	cmpne	r4,r4,zero
 800cbf8:	994ad83a 	srl	r5,r19,r5
 800cbfc:	1c06b03a 	or	r3,r3,r16
 800cc00:	1922b03a 	or	r17,r3,r4
 800cc04:	0021883a 	mov	r16,zero
 800cc08:	003fa306 	br	800ca98 <__subdf3+0x8c>
 800cc0c:	2880202c 	andhi	r2,r5,128
 800cc10:	9200004c 	andi	r8,r18,1
 800cc14:	103fac1e 	bne	r2,zero,800cac8 <__subdf3+0xbc>
 800cc18:	2804977a 	slli	r2,r5,29
 800cc1c:	8822d0fa 	srli	r17,r17,3
 800cc20:	00c1ffc4 	movi	r3,2047
 800cc24:	280ad0fa 	srli	r5,r5,3
 800cc28:	1444b03a 	or	r2,r2,r17
 800cc2c:	80c02726 	beq	r16,r3,800cccc <__subdf3+0x2c0>
 800cc30:	01000434 	movhi	r4,16
 800cc34:	213fffc4 	addi	r4,r4,-1
 800cc38:	80e0703a 	and	r16,r16,r3
 800cc3c:	2908703a 	and	r4,r5,r4
 800cc40:	003fad06 	br	800caf8 <__subdf3+0xec>
 800cc44:	0080690e 	bge	zero,r2,800cdec <__subdf3+0x3e0>
 800cc48:	50002f26 	beq	r10,zero,800cd08 <__subdf3+0x2fc>
 800cc4c:	0101ffc4 	movi	r4,2047
 800cc50:	813f9126 	beq	r16,r4,800ca98 <__subdf3+0x8c>
 800cc54:	18c02034 	orhi	r3,r3,128
 800cc58:	01000e04 	movi	r4,56
 800cc5c:	2080b00e 	bge	r4,r2,800cf20 <__subdf3+0x514>
 800cc60:	198cb03a 	or	r6,r3,r6
 800cc64:	300ec03a 	cmpne	r7,r6,zero
 800cc68:	0005883a 	mov	r2,zero
 800cc6c:	3c4f883a 	add	r7,r7,r17
 800cc70:	3c63803a 	cmpltu	r17,r7,r17
 800cc74:	114b883a 	add	r5,r2,r5
 800cc78:	2c4b883a 	add	r5,r5,r17
 800cc7c:	3823883a 	mov	r17,r7
 800cc80:	2880202c 	andhi	r2,r5,128
 800cc84:	10002e26 	beq	r2,zero,800cd40 <__subdf3+0x334>
 800cc88:	84000044 	addi	r16,r16,1
 800cc8c:	0081ffc4 	movi	r2,2047
 800cc90:	8080de26 	beq	r16,r2,800d00c <__subdf3+0x600>
 800cc94:	00bfe034 	movhi	r2,65408
 800cc98:	10bfffc4 	addi	r2,r2,-1
 800cc9c:	288a703a 	and	r5,r5,r2
 800cca0:	880cd07a 	srli	r6,r17,1
 800cca4:	280897fa 	slli	r4,r5,31
 800cca8:	88c0004c 	andi	r3,r17,1
 800ccac:	30e2b03a 	or	r17,r6,r3
 800ccb0:	280ad07a 	srli	r5,r5,1
 800ccb4:	8922b03a 	or	r17,r17,r4
 800ccb8:	003f7706 	br	800ca98 <__subdf3+0x8c>
 800ccbc:	1984b03a 	or	r2,r3,r6
 800ccc0:	103f6e26 	beq	r2,zero,800ca7c <__subdf3+0x70>
 800ccc4:	39c03fcc 	andi	r7,r7,255
 800ccc8:	003f6d06 	br	800ca80 <__subdf3+0x74>
 800cccc:	1146b03a 	or	r3,r2,r5
 800ccd0:	18003f26 	beq	r3,zero,800cdd0 <__subdf3+0x3c4>
 800ccd4:	00c00434 	movhi	r3,16
 800ccd8:	29000234 	orhi	r4,r5,8
 800ccdc:	18ffffc4 	addi	r3,r3,-1
 800cce0:	20c8703a 	and	r4,r4,r3
 800cce4:	003f8406 	br	800caf8 <__subdf3+0xec>
 800cce8:	10bfffc4 	addi	r2,r2,-1
 800ccec:	1000501e 	bne	r2,zero,800ce30 <__subdf3+0x424>
 800ccf0:	898fc83a 	sub	r7,r17,r6
 800ccf4:	89e3803a 	cmpltu	r17,r17,r7
 800ccf8:	28cbc83a 	sub	r5,r5,r3
 800ccfc:	2c4bc83a 	sub	r5,r5,r17
 800cd00:	3823883a 	mov	r17,r7
 800cd04:	003fa106 	br	800cb8c <__subdf3+0x180>
 800cd08:	1988b03a 	or	r4,r3,r6
 800cd0c:	203f6226 	beq	r4,zero,800ca98 <__subdf3+0x8c>
 800cd10:	10bfffc4 	addi	r2,r2,-1
 800cd14:	10009b1e 	bne	r2,zero,800cf84 <__subdf3+0x578>
 800cd18:	344d883a 	add	r6,r6,r17
 800cd1c:	3463803a 	cmpltu	r17,r6,r17
 800cd20:	194b883a 	add	r5,r3,r5
 800cd24:	2c4b883a 	add	r5,r5,r17
 800cd28:	3023883a 	mov	r17,r6
 800cd2c:	003fd406 	br	800cc80 <__subdf3+0x274>
 800cd30:	1106b03a 	or	r3,r2,r4
 800cd34:	1800b426 	beq	r3,zero,800d008 <__subdf3+0x5fc>
 800cd38:	100b883a 	mov	r5,r2
 800cd3c:	2023883a 	mov	r17,r4
 800cd40:	888001cc 	andi	r2,r17,7
 800cd44:	103f561e 	bne	r2,zero,800caa0 <__subdf3+0x94>
 800cd48:	9200004c 	andi	r8,r18,1
 800cd4c:	003fb206 	br	800cc18 <__subdf3+0x20c>
 800cd50:	1000531e 	bne	r2,zero,800cea0 <__subdf3+0x494>
 800cd54:	80800044 	addi	r2,r16,1
 800cd58:	1081ffcc 	andi	r2,r2,2047
 800cd5c:	01000044 	movi	r4,1
 800cd60:	2080a00e 	bge	r4,r2,800cfe4 <__subdf3+0x5d8>
 800cd64:	8985c83a 	sub	r2,r17,r6
 800cd68:	8889803a 	cmpltu	r4,r17,r2
 800cd6c:	28e7c83a 	sub	r19,r5,r3
 800cd70:	9927c83a 	sub	r19,r19,r4
 800cd74:	9900202c 	andhi	r4,r19,128
 800cd78:	20006226 	beq	r4,zero,800cf04 <__subdf3+0x4f8>
 800cd7c:	3463c83a 	sub	r17,r6,r17
 800cd80:	194bc83a 	sub	r5,r3,r5
 800cd84:	344d803a 	cmpltu	r6,r6,r17
 800cd88:	29a7c83a 	sub	r19,r5,r6
 800cd8c:	3825883a 	mov	r18,r7
 800cd90:	983f841e 	bne	r19,zero,800cba4 <__subdf3+0x198>
 800cd94:	8809883a 	mov	r4,r17
 800cd98:	8000c900 	call	8000c90 <__clzsi2>
 800cd9c:	10800804 	addi	r2,r2,32
 800cda0:	10fffe04 	addi	r3,r2,-8
 800cda4:	010007c4 	movi	r4,31
 800cda8:	20ff830e 	bge	r4,r3,800cbb8 <__subdf3+0x1ac>
 800cdac:	14fff604 	addi	r19,r2,-40
 800cdb0:	8ce6983a 	sll	r19,r17,r19
 800cdb4:	0023883a 	mov	r17,zero
 800cdb8:	1c3f860e 	bge	r3,r16,800cbd4 <__subdf3+0x1c8>
 800cdbc:	017fe034 	movhi	r5,65408
 800cdc0:	297fffc4 	addi	r5,r5,-1
 800cdc4:	80e1c83a 	sub	r16,r16,r3
 800cdc8:	994a703a 	and	r5,r19,r5
 800cdcc:	003f3206 	br	800ca98 <__subdf3+0x8c>
 800cdd0:	0009883a 	mov	r4,zero
 800cdd4:	0005883a 	mov	r2,zero
 800cdd8:	003f4706 	br	800caf8 <__subdf3+0xec>
 800cddc:	198cb03a 	or	r6,r3,r6
 800cde0:	300cc03a 	cmpne	r6,r6,zero
 800cde4:	0005883a 	mov	r2,zero
 800cde8:	003f6306 	br	800cb78 <__subdf3+0x16c>
 800cdec:	10009d1e 	bne	r2,zero,800d064 <__subdf3+0x658>
 800cdf0:	81c00044 	addi	r7,r16,1
 800cdf4:	3881ffcc 	andi	r2,r7,2047
 800cdf8:	02400044 	movi	r9,1
 800cdfc:	4880680e 	bge	r9,r2,800cfa0 <__subdf3+0x594>
 800ce00:	0081ffc4 	movi	r2,2047
 800ce04:	3880ae26 	beq	r7,r2,800d0c0 <__subdf3+0x6b4>
 800ce08:	344d883a 	add	r6,r6,r17
 800ce0c:	3463803a 	cmpltu	r17,r6,r17
 800ce10:	194b883a 	add	r5,r3,r5
 800ce14:	2c4b883a 	add	r5,r5,r17
 800ce18:	282297fa 	slli	r17,r5,31
 800ce1c:	300cd07a 	srli	r6,r6,1
 800ce20:	280ad07a 	srli	r5,r5,1
 800ce24:	3821883a 	mov	r16,r7
 800ce28:	89a2b03a 	or	r17,r17,r6
 800ce2c:	003f1a06 	br	800ca98 <__subdf3+0x8c>
 800ce30:	0101ffc4 	movi	r4,2047
 800ce34:	813f431e 	bne	r16,r4,800cb44 <__subdf3+0x138>
 800ce38:	003f1706 	br	800ca98 <__subdf3+0x8c>
 800ce3c:	80bff844 	addi	r2,r16,-31
 800ce40:	00c00804 	movi	r3,32
 800ce44:	9884d83a 	srl	r2,r19,r2
 800ce48:	28c05126 	beq	r5,r3,800cf90 <__subdf3+0x584>
 800ce4c:	00c00fc4 	movi	r3,63
 800ce50:	1c21c83a 	sub	r16,r3,r16
 800ce54:	9c26983a 	sll	r19,r19,r16
 800ce58:	9c62b03a 	or	r17,r19,r17
 800ce5c:	8822c03a 	cmpne	r17,r17,zero
 800ce60:	88a2b03a 	or	r17,r17,r2
 800ce64:	000b883a 	mov	r5,zero
 800ce68:	0021883a 	mov	r16,zero
 800ce6c:	003fb406 	br	800cd40 <__subdf3+0x334>
 800ce70:	113ff804 	addi	r4,r2,-32
 800ce74:	01c00804 	movi	r7,32
 800ce78:	1908d83a 	srl	r4,r3,r4
 800ce7c:	11c04626 	beq	r2,r7,800cf98 <__subdf3+0x58c>
 800ce80:	01c01004 	movi	r7,64
 800ce84:	3885c83a 	sub	r2,r7,r2
 800ce88:	1884983a 	sll	r2,r3,r2
 800ce8c:	118cb03a 	or	r6,r2,r6
 800ce90:	300cc03a 	cmpne	r6,r6,zero
 800ce94:	310cb03a 	or	r6,r6,r4
 800ce98:	0005883a 	mov	r2,zero
 800ce9c:	003f3606 	br	800cb78 <__subdf3+0x16c>
 800cea0:	80002b26 	beq	r16,zero,800cf50 <__subdf3+0x544>
 800cea4:	0101ffc4 	movi	r4,2047
 800cea8:	51006926 	beq	r10,r4,800d050 <__subdf3+0x644>
 800ceac:	0085c83a 	sub	r2,zero,r2
 800ceb0:	29402034 	orhi	r5,r5,128
 800ceb4:	01000e04 	movi	r4,56
 800ceb8:	20807d16 	blt	r4,r2,800d0b0 <__subdf3+0x6a4>
 800cebc:	010007c4 	movi	r4,31
 800cec0:	2080d916 	blt	r4,r2,800d228 <__subdf3+0x81c>
 800cec4:	01000804 	movi	r4,32
 800cec8:	2089c83a 	sub	r4,r4,r2
 800cecc:	2912983a 	sll	r9,r5,r4
 800ced0:	8890d83a 	srl	r8,r17,r2
 800ced4:	8908983a 	sll	r4,r17,r4
 800ced8:	2884d83a 	srl	r2,r5,r2
 800cedc:	4a22b03a 	or	r17,r9,r8
 800cee0:	2008c03a 	cmpne	r4,r4,zero
 800cee4:	8922b03a 	or	r17,r17,r4
 800cee8:	3463c83a 	sub	r17,r6,r17
 800ceec:	1885c83a 	sub	r2,r3,r2
 800cef0:	344d803a 	cmpltu	r6,r6,r17
 800cef4:	118bc83a 	sub	r5,r2,r6
 800cef8:	5021883a 	mov	r16,r10
 800cefc:	3825883a 	mov	r18,r7
 800cf00:	003f2206 	br	800cb8c <__subdf3+0x180>
 800cf04:	9886b03a 	or	r3,r19,r2
 800cf08:	18001c1e 	bne	r3,zero,800cf7c <__subdf3+0x570>
 800cf0c:	0011883a 	mov	r8,zero
 800cf10:	000b883a 	mov	r5,zero
 800cf14:	0023883a 	mov	r17,zero
 800cf18:	0021883a 	mov	r16,zero
 800cf1c:	003f3e06 	br	800cc18 <__subdf3+0x20c>
 800cf20:	010007c4 	movi	r4,31
 800cf24:	20803c16 	blt	r4,r2,800d018 <__subdf3+0x60c>
 800cf28:	01000804 	movi	r4,32
 800cf2c:	2089c83a 	sub	r4,r4,r2
 800cf30:	1912983a 	sll	r9,r3,r4
 800cf34:	308ed83a 	srl	r7,r6,r2
 800cf38:	3108983a 	sll	r4,r6,r4
 800cf3c:	1884d83a 	srl	r2,r3,r2
 800cf40:	49ceb03a 	or	r7,r9,r7
 800cf44:	2008c03a 	cmpne	r4,r4,zero
 800cf48:	390eb03a 	or	r7,r7,r4
 800cf4c:	003f4706 	br	800cc6c <__subdf3+0x260>
 800cf50:	2c48b03a 	or	r4,r5,r17
 800cf54:	20003e26 	beq	r4,zero,800d050 <__subdf3+0x644>
 800cf58:	0084303a 	nor	r2,zero,r2
 800cf5c:	10003a1e 	bne	r2,zero,800d048 <__subdf3+0x63c>
 800cf60:	3463c83a 	sub	r17,r6,r17
 800cf64:	194bc83a 	sub	r5,r3,r5
 800cf68:	344d803a 	cmpltu	r6,r6,r17
 800cf6c:	298bc83a 	sub	r5,r5,r6
 800cf70:	5021883a 	mov	r16,r10
 800cf74:	3825883a 	mov	r18,r7
 800cf78:	003f0406 	br	800cb8c <__subdf3+0x180>
 800cf7c:	1023883a 	mov	r17,r2
 800cf80:	003f0706 	br	800cba0 <__subdf3+0x194>
 800cf84:	0101ffc4 	movi	r4,2047
 800cf88:	813f331e 	bne	r16,r4,800cc58 <__subdf3+0x24c>
 800cf8c:	003ec206 	br	800ca98 <__subdf3+0x8c>
 800cf90:	0027883a 	mov	r19,zero
 800cf94:	003fb006 	br	800ce58 <__subdf3+0x44c>
 800cf98:	0005883a 	mov	r2,zero
 800cf9c:	003fbb06 	br	800ce8c <__subdf3+0x480>
 800cfa0:	2c44b03a 	or	r2,r5,r17
 800cfa4:	80008b1e 	bne	r16,zero,800d1d4 <__subdf3+0x7c8>
 800cfa8:	1000b526 	beq	r2,zero,800d280 <__subdf3+0x874>
 800cfac:	1984b03a 	or	r2,r3,r6
 800cfb0:	103eb926 	beq	r2,zero,800ca98 <__subdf3+0x8c>
 800cfb4:	3449883a 	add	r4,r6,r17
 800cfb8:	2463803a 	cmpltu	r17,r4,r17
 800cfbc:	194b883a 	add	r5,r3,r5
 800cfc0:	2c4b883a 	add	r5,r5,r17
 800cfc4:	2880202c 	andhi	r2,r5,128
 800cfc8:	2023883a 	mov	r17,r4
 800cfcc:	103f5c26 	beq	r2,zero,800cd40 <__subdf3+0x334>
 800cfd0:	00bfe034 	movhi	r2,65408
 800cfd4:	10bfffc4 	addi	r2,r2,-1
 800cfd8:	4821883a 	mov	r16,r9
 800cfdc:	288a703a 	and	r5,r5,r2
 800cfe0:	003ead06 	br	800ca98 <__subdf3+0x8c>
 800cfe4:	2c44b03a 	or	r2,r5,r17
 800cfe8:	8000291e 	bne	r16,zero,800d090 <__subdf3+0x684>
 800cfec:	10004f1e 	bne	r2,zero,800d12c <__subdf3+0x720>
 800cff0:	1984b03a 	or	r2,r3,r6
 800cff4:	10000426 	beq	r2,zero,800d008 <__subdf3+0x5fc>
 800cff8:	180b883a 	mov	r5,r3
 800cffc:	3023883a 	mov	r17,r6
 800d000:	3825883a 	mov	r18,r7
 800d004:	003ea406 	br	800ca98 <__subdf3+0x8c>
 800d008:	0011883a 	mov	r8,zero
 800d00c:	000b883a 	mov	r5,zero
 800d010:	0023883a 	mov	r17,zero
 800d014:	003f0006 	br	800cc18 <__subdf3+0x20c>
 800d018:	11fff804 	addi	r7,r2,-32
 800d01c:	19c8d83a 	srl	r4,r3,r7
 800d020:	01c00804 	movi	r7,32
 800d024:	11c07e26 	beq	r2,r7,800d220 <__subdf3+0x814>
 800d028:	01c01004 	movi	r7,64
 800d02c:	3885c83a 	sub	r2,r7,r2
 800d030:	1884983a 	sll	r2,r3,r2
 800d034:	118cb03a 	or	r6,r2,r6
 800d038:	300ec03a 	cmpne	r7,r6,zero
 800d03c:	390eb03a 	or	r7,r7,r4
 800d040:	0005883a 	mov	r2,zero
 800d044:	003f0906 	br	800cc6c <__subdf3+0x260>
 800d048:	0101ffc4 	movi	r4,2047
 800d04c:	513f991e 	bne	r10,r4,800ceb4 <__subdf3+0x4a8>
 800d050:	180b883a 	mov	r5,r3
 800d054:	3023883a 	mov	r17,r6
 800d058:	5021883a 	mov	r16,r10
 800d05c:	3825883a 	mov	r18,r7
 800d060:	003e8d06 	br	800ca98 <__subdf3+0x8c>
 800d064:	80001a1e 	bne	r16,zero,800d0d0 <__subdf3+0x6c4>
 800d068:	2c48b03a 	or	r4,r5,r17
 800d06c:	20005526 	beq	r4,zero,800d1c4 <__subdf3+0x7b8>
 800d070:	0084303a 	nor	r2,zero,r2
 800d074:	1000511e 	bne	r2,zero,800d1bc <__subdf3+0x7b0>
 800d078:	89a3883a 	add	r17,r17,r6
 800d07c:	194b883a 	add	r5,r3,r5
 800d080:	898d803a 	cmpltu	r6,r17,r6
 800d084:	298b883a 	add	r5,r5,r6
 800d088:	5021883a 	mov	r16,r10
 800d08c:	003efc06 	br	800cc80 <__subdf3+0x274>
 800d090:	1000341e 	bne	r2,zero,800d164 <__subdf3+0x758>
 800d094:	1984b03a 	or	r2,r3,r6
 800d098:	10006f26 	beq	r2,zero,800d258 <__subdf3+0x84c>
 800d09c:	180b883a 	mov	r5,r3
 800d0a0:	3023883a 	mov	r17,r6
 800d0a4:	3825883a 	mov	r18,r7
 800d0a8:	0401ffc4 	movi	r16,2047
 800d0ac:	003e7a06 	br	800ca98 <__subdf3+0x8c>
 800d0b0:	2c62b03a 	or	r17,r5,r17
 800d0b4:	8822c03a 	cmpne	r17,r17,zero
 800d0b8:	0005883a 	mov	r2,zero
 800d0bc:	003f8a06 	br	800cee8 <__subdf3+0x4dc>
 800d0c0:	3821883a 	mov	r16,r7
 800d0c4:	000b883a 	mov	r5,zero
 800d0c8:	0023883a 	mov	r17,zero
 800d0cc:	003ed206 	br	800cc18 <__subdf3+0x20c>
 800d0d0:	0101ffc4 	movi	r4,2047
 800d0d4:	51003b26 	beq	r10,r4,800d1c4 <__subdf3+0x7b8>
 800d0d8:	0085c83a 	sub	r2,zero,r2
 800d0dc:	29402034 	orhi	r5,r5,128
 800d0e0:	01000e04 	movi	r4,56
 800d0e4:	20806216 	blt	r4,r2,800d270 <__subdf3+0x864>
 800d0e8:	010007c4 	movi	r4,31
 800d0ec:	20806b16 	blt	r4,r2,800d29c <__subdf3+0x890>
 800d0f0:	01000804 	movi	r4,32
 800d0f4:	2089c83a 	sub	r4,r4,r2
 800d0f8:	2912983a 	sll	r9,r5,r4
 800d0fc:	888ed83a 	srl	r7,r17,r2
 800d100:	8908983a 	sll	r4,r17,r4
 800d104:	2884d83a 	srl	r2,r5,r2
 800d108:	49e2b03a 	or	r17,r9,r7
 800d10c:	2008c03a 	cmpne	r4,r4,zero
 800d110:	8922b03a 	or	r17,r17,r4
 800d114:	89a3883a 	add	r17,r17,r6
 800d118:	10c5883a 	add	r2,r2,r3
 800d11c:	898d803a 	cmpltu	r6,r17,r6
 800d120:	118b883a 	add	r5,r2,r6
 800d124:	5021883a 	mov	r16,r10
 800d128:	003ed506 	br	800cc80 <__subdf3+0x274>
 800d12c:	1984b03a 	or	r2,r3,r6
 800d130:	103e5926 	beq	r2,zero,800ca98 <__subdf3+0x8c>
 800d134:	8989c83a 	sub	r4,r17,r6
 800d138:	8911803a 	cmpltu	r8,r17,r4
 800d13c:	28c5c83a 	sub	r2,r5,r3
 800d140:	1205c83a 	sub	r2,r2,r8
 800d144:	1200202c 	andhi	r8,r2,128
 800d148:	403ef926 	beq	r8,zero,800cd30 <__subdf3+0x324>
 800d14c:	3463c83a 	sub	r17,r6,r17
 800d150:	194bc83a 	sub	r5,r3,r5
 800d154:	344d803a 	cmpltu	r6,r6,r17
 800d158:	298bc83a 	sub	r5,r5,r6
 800d15c:	3825883a 	mov	r18,r7
 800d160:	003e4d06 	br	800ca98 <__subdf3+0x8c>
 800d164:	1984b03a 	or	r2,r3,r6
 800d168:	10002b26 	beq	r2,zero,800d218 <__subdf3+0x80c>
 800d16c:	2808d0fa 	srli	r4,r5,3
 800d170:	8822d0fa 	srli	r17,r17,3
 800d174:	280a977a 	slli	r5,r5,29
 800d178:	2080022c 	andhi	r2,r4,8
 800d17c:	2c62b03a 	or	r17,r5,r17
 800d180:	10000826 	beq	r2,zero,800d1a4 <__subdf3+0x798>
 800d184:	1810d0fa 	srli	r8,r3,3
 800d188:	4080022c 	andhi	r2,r8,8
 800d18c:	1000051e 	bne	r2,zero,800d1a4 <__subdf3+0x798>
 800d190:	300cd0fa 	srli	r6,r6,3
 800d194:	1804977a 	slli	r2,r3,29
 800d198:	4009883a 	mov	r4,r8
 800d19c:	3825883a 	mov	r18,r7
 800d1a0:	11a2b03a 	or	r17,r2,r6
 800d1a4:	880ad77a 	srli	r5,r17,29
 800d1a8:	200890fa 	slli	r4,r4,3
 800d1ac:	882290fa 	slli	r17,r17,3
 800d1b0:	0401ffc4 	movi	r16,2047
 800d1b4:	290ab03a 	or	r5,r5,r4
 800d1b8:	003e3706 	br	800ca98 <__subdf3+0x8c>
 800d1bc:	0101ffc4 	movi	r4,2047
 800d1c0:	513fc71e 	bne	r10,r4,800d0e0 <__subdf3+0x6d4>
 800d1c4:	180b883a 	mov	r5,r3
 800d1c8:	3023883a 	mov	r17,r6
 800d1cc:	5021883a 	mov	r16,r10
 800d1d0:	003e3106 	br	800ca98 <__subdf3+0x8c>
 800d1d4:	10002d26 	beq	r2,zero,800d28c <__subdf3+0x880>
 800d1d8:	1984b03a 	or	r2,r3,r6
 800d1dc:	10000e26 	beq	r2,zero,800d218 <__subdf3+0x80c>
 800d1e0:	2808d0fa 	srli	r4,r5,3
 800d1e4:	8822d0fa 	srli	r17,r17,3
 800d1e8:	280a977a 	slli	r5,r5,29
 800d1ec:	2080022c 	andhi	r2,r4,8
 800d1f0:	2c62b03a 	or	r17,r5,r17
 800d1f4:	103feb26 	beq	r2,zero,800d1a4 <__subdf3+0x798>
 800d1f8:	180ed0fa 	srli	r7,r3,3
 800d1fc:	3880022c 	andhi	r2,r7,8
 800d200:	103fe81e 	bne	r2,zero,800d1a4 <__subdf3+0x798>
 800d204:	300cd0fa 	srli	r6,r6,3
 800d208:	1804977a 	slli	r2,r3,29
 800d20c:	3809883a 	mov	r4,r7
 800d210:	11a2b03a 	or	r17,r2,r6
 800d214:	003fe306 	br	800d1a4 <__subdf3+0x798>
 800d218:	0401ffc4 	movi	r16,2047
 800d21c:	003e1e06 	br	800ca98 <__subdf3+0x8c>
 800d220:	0005883a 	mov	r2,zero
 800d224:	003f8306 	br	800d034 <__subdf3+0x628>
 800d228:	113ff804 	addi	r4,r2,-32
 800d22c:	02000804 	movi	r8,32
 800d230:	2908d83a 	srl	r4,r5,r4
 800d234:	12002526 	beq	r2,r8,800d2cc <__subdf3+0x8c0>
 800d238:	02001004 	movi	r8,64
 800d23c:	4085c83a 	sub	r2,r8,r2
 800d240:	288a983a 	sll	r5,r5,r2
 800d244:	2c62b03a 	or	r17,r5,r17
 800d248:	8822c03a 	cmpne	r17,r17,zero
 800d24c:	8922b03a 	or	r17,r17,r4
 800d250:	0005883a 	mov	r2,zero
 800d254:	003f2406 	br	800cee8 <__subdf3+0x4dc>
 800d258:	01402034 	movhi	r5,128
 800d25c:	0011883a 	mov	r8,zero
 800d260:	297fffc4 	addi	r5,r5,-1
 800d264:	047ffe04 	movi	r17,-8
 800d268:	0401ffc4 	movi	r16,2047
 800d26c:	003e6a06 	br	800cc18 <__subdf3+0x20c>
 800d270:	2c62b03a 	or	r17,r5,r17
 800d274:	8822c03a 	cmpne	r17,r17,zero
 800d278:	0005883a 	mov	r2,zero
 800d27c:	003fa506 	br	800d114 <__subdf3+0x708>
 800d280:	180b883a 	mov	r5,r3
 800d284:	3023883a 	mov	r17,r6
 800d288:	003e0306 	br	800ca98 <__subdf3+0x8c>
 800d28c:	180b883a 	mov	r5,r3
 800d290:	3023883a 	mov	r17,r6
 800d294:	0401ffc4 	movi	r16,2047
 800d298:	003dff06 	br	800ca98 <__subdf3+0x8c>
 800d29c:	113ff804 	addi	r4,r2,-32
 800d2a0:	01c00804 	movi	r7,32
 800d2a4:	2908d83a 	srl	r4,r5,r4
 800d2a8:	11c00a26 	beq	r2,r7,800d2d4 <__subdf3+0x8c8>
 800d2ac:	01c01004 	movi	r7,64
 800d2b0:	3885c83a 	sub	r2,r7,r2
 800d2b4:	288a983a 	sll	r5,r5,r2
 800d2b8:	2c62b03a 	or	r17,r5,r17
 800d2bc:	8822c03a 	cmpne	r17,r17,zero
 800d2c0:	8922b03a 	or	r17,r17,r4
 800d2c4:	0005883a 	mov	r2,zero
 800d2c8:	003f9206 	br	800d114 <__subdf3+0x708>
 800d2cc:	000b883a 	mov	r5,zero
 800d2d0:	003fdc06 	br	800d244 <__subdf3+0x838>
 800d2d4:	000b883a 	mov	r5,zero
 800d2d8:	003ff706 	br	800d2b8 <__subdf3+0x8ac>

0800d2dc <__fixdfsi>:
 800d2dc:	2806d53a 	srli	r3,r5,20
 800d2e0:	00800434 	movhi	r2,16
 800d2e4:	10bfffc4 	addi	r2,r2,-1
 800d2e8:	18c1ffcc 	andi	r3,r3,2047
 800d2ec:	0180ff84 	movi	r6,1022
 800d2f0:	2884703a 	and	r2,r5,r2
 800d2f4:	280ad7fa 	srli	r5,r5,31
 800d2f8:	30c0130e 	bge	r6,r3,800d348 <__fixdfsi+0x6c>
 800d2fc:	01810744 	movi	r6,1053
 800d300:	30c00d16 	blt	r6,r3,800d338 <__fixdfsi+0x5c>
 800d304:	01810cc4 	movi	r6,1075
 800d308:	30cdc83a 	sub	r6,r6,r3
 800d30c:	01c007c4 	movi	r7,31
 800d310:	10800434 	orhi	r2,r2,16
 800d314:	39800e0e 	bge	r7,r6,800d350 <__fixdfsi+0x74>
 800d318:	010104c4 	movi	r4,1043
 800d31c:	20c7c83a 	sub	r3,r4,r3
 800d320:	10c6d83a 	srl	r3,r2,r3
 800d324:	29403fcc 	andi	r5,r5,255
 800d328:	0145c83a 	sub	r2,zero,r5
 800d32c:	1884f03a 	xor	r2,r3,r2
 800d330:	1145883a 	add	r2,r2,r5
 800d334:	f800283a 	ret
 800d338:	00a00034 	movhi	r2,32768
 800d33c:	10bfffc4 	addi	r2,r2,-1
 800d340:	2885883a 	add	r2,r5,r2
 800d344:	f800283a 	ret
 800d348:	0005883a 	mov	r2,zero
 800d34c:	f800283a 	ret
 800d350:	18fefb44 	addi	r3,r3,-1043
 800d354:	2188d83a 	srl	r4,r4,r6
 800d358:	10c6983a 	sll	r3,r2,r3
 800d35c:	20c6b03a 	or	r3,r4,r3
 800d360:	003ff006 	br	800d324 <__fixdfsi+0x48>

0800d364 <__floatsidf>:
 800d364:	defffd04 	addi	sp,sp,-12
 800d368:	dc400115 	stw	r17,4(sp)
 800d36c:	dfc00215 	stw	ra,8(sp)
 800d370:	dc000015 	stw	r16,0(sp)
 800d374:	2023883a 	mov	r17,r4
 800d378:	20001426 	beq	r4,zero,800d3cc <__floatsidf+0x68>
 800d37c:	2020d7fa 	srli	r16,r4,31
 800d380:	80000126 	beq	r16,zero,800d388 <__floatsidf+0x24>
 800d384:	0123c83a 	sub	r17,zero,r4
 800d388:	8809883a 	mov	r4,r17
 800d38c:	8000c900 	call	8000c90 <__clzsi2>
 800d390:	01410784 	movi	r5,1054
 800d394:	00c00284 	movi	r3,10
 800d398:	288bc83a 	sub	r5,r5,r2
 800d39c:	18801c16 	blt	r3,r2,800d410 <__floatsidf+0xac>
 800d3a0:	00c002c4 	movi	r3,11
 800d3a4:	1887c83a 	sub	r3,r3,r2
 800d3a8:	88c8d83a 	srl	r4,r17,r3
 800d3ac:	00c00434 	movhi	r3,16
 800d3b0:	18ffffc4 	addi	r3,r3,-1
 800d3b4:	10800544 	addi	r2,r2,21
 800d3b8:	20c8703a 	and	r4,r4,r3
 800d3bc:	8884983a 	sll	r2,r17,r2
 800d3c0:	28c1ffcc 	andi	r3,r5,2047
 800d3c4:	800d883a 	mov	r6,r16
 800d3c8:	00000406 	br	800d3dc <__floatsidf+0x78>
 800d3cc:	000d883a 	mov	r6,zero
 800d3d0:	0007883a 	mov	r3,zero
 800d3d4:	0009883a 	mov	r4,zero
 800d3d8:	0005883a 	mov	r2,zero
 800d3dc:	180a953a 	slli	r5,r3,20
 800d3e0:	31803fcc 	andi	r6,r6,255
 800d3e4:	00c00434 	movhi	r3,16
 800d3e8:	300c97fa 	slli	r6,r6,31
 800d3ec:	18ffffc4 	addi	r3,r3,-1
 800d3f0:	20c6703a 	and	r3,r4,r3
 800d3f4:	1946b03a 	or	r3,r3,r5
 800d3f8:	1986b03a 	or	r3,r3,r6
 800d3fc:	dfc00217 	ldw	ra,8(sp)
 800d400:	dc400117 	ldw	r17,4(sp)
 800d404:	dc000017 	ldw	r16,0(sp)
 800d408:	dec00304 	addi	sp,sp,12
 800d40c:	f800283a 	ret
 800d410:	10fffd44 	addi	r3,r2,-11
 800d414:	88c8983a 	sll	r4,r17,r3
 800d418:	00800434 	movhi	r2,16
 800d41c:	10bfffc4 	addi	r2,r2,-1
 800d420:	2088703a 	and	r4,r4,r2
 800d424:	28c1ffcc 	andi	r3,r5,2047
 800d428:	800d883a 	mov	r6,r16
 800d42c:	0005883a 	mov	r2,zero
 800d430:	003fea06 	br	800d3dc <__floatsidf+0x78>

0800d434 <__floatunsidf>:
 800d434:	defffe04 	addi	sp,sp,-8
 800d438:	dc000015 	stw	r16,0(sp)
 800d43c:	dfc00115 	stw	ra,4(sp)
 800d440:	2021883a 	mov	r16,r4
 800d444:	20001026 	beq	r4,zero,800d488 <__floatunsidf+0x54>
 800d448:	8000c900 	call	8000c90 <__clzsi2>
 800d44c:	01410784 	movi	r5,1054
 800d450:	100d883a 	mov	r6,r2
 800d454:	288bc83a 	sub	r5,r5,r2
 800d458:	00800284 	movi	r2,10
 800d45c:	11801616 	blt	r2,r6,800d4b8 <__floatunsidf+0x84>
 800d460:	008002c4 	movi	r2,11
 800d464:	1185c83a 	sub	r2,r2,r6
 800d468:	8084d83a 	srl	r2,r16,r2
 800d46c:	00c00434 	movhi	r3,16
 800d470:	31c00544 	addi	r7,r6,21
 800d474:	18ffffc4 	addi	r3,r3,-1
 800d478:	81e0983a 	sll	r16,r16,r7
 800d47c:	10cc703a 	and	r6,r2,r3
 800d480:	2941ffcc 	andi	r5,r5,2047
 800d484:	00000206 	br	800d490 <__floatunsidf+0x5c>
 800d488:	000b883a 	mov	r5,zero
 800d48c:	000d883a 	mov	r6,zero
 800d490:	280a953a 	slli	r5,r5,20
 800d494:	00c00434 	movhi	r3,16
 800d498:	18ffffc4 	addi	r3,r3,-1
 800d49c:	30c6703a 	and	r3,r6,r3
 800d4a0:	8005883a 	mov	r2,r16
 800d4a4:	1946b03a 	or	r3,r3,r5
 800d4a8:	dfc00117 	ldw	ra,4(sp)
 800d4ac:	dc000017 	ldw	r16,0(sp)
 800d4b0:	dec00204 	addi	sp,sp,8
 800d4b4:	f800283a 	ret
 800d4b8:	31bffd44 	addi	r6,r6,-11
 800d4bc:	818c983a 	sll	r6,r16,r6
 800d4c0:	00800434 	movhi	r2,16
 800d4c4:	10bfffc4 	addi	r2,r2,-1
 800d4c8:	2941ffcc 	andi	r5,r5,2047
 800d4cc:	0021883a 	mov	r16,zero
 800d4d0:	308c703a 	and	r6,r6,r2
 800d4d4:	003fee06 	br	800d490 <__floatunsidf+0x5c>

0800d4d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d4d8:	defffe04 	addi	sp,sp,-8
 800d4dc:	dfc00115 	stw	ra,4(sp)
 800d4e0:	df000015 	stw	fp,0(sp)
 800d4e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d4e8:	00820074 	movhi	r2,2049
 800d4ec:	10873b04 	addi	r2,r2,7404
 800d4f0:	10800017 	ldw	r2,0(r2)
 800d4f4:	10000526 	beq	r2,zero,800d50c <alt_get_errno+0x34>
 800d4f8:	00820074 	movhi	r2,2049
 800d4fc:	10873b04 	addi	r2,r2,7404
 800d500:	10800017 	ldw	r2,0(r2)
 800d504:	103ee83a 	callr	r2
 800d508:	00000206 	br	800d514 <alt_get_errno+0x3c>
 800d50c:	00820074 	movhi	r2,2049
 800d510:	108e0104 	addi	r2,r2,14340
}
 800d514:	e037883a 	mov	sp,fp
 800d518:	dfc00117 	ldw	ra,4(sp)
 800d51c:	df000017 	ldw	fp,0(sp)
 800d520:	dec00204 	addi	sp,sp,8
 800d524:	f800283a 	ret

0800d528 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800d528:	defffb04 	addi	sp,sp,-20
 800d52c:	dfc00415 	stw	ra,16(sp)
 800d530:	df000315 	stw	fp,12(sp)
 800d534:	df000304 	addi	fp,sp,12
 800d538:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800d53c:	e0bfff17 	ldw	r2,-4(fp)
 800d540:	10000816 	blt	r2,zero,800d564 <close+0x3c>
 800d544:	e13fff17 	ldw	r4,-4(fp)
 800d548:	01400304 	movi	r5,12
 800d54c:	80005f80 	call	80005f8 <__mulsi3>
 800d550:	1007883a 	mov	r3,r2
 800d554:	00820074 	movhi	r2,2049
 800d558:	1082b804 	addi	r2,r2,2784
 800d55c:	1885883a 	add	r2,r3,r2
 800d560:	00000106 	br	800d568 <close+0x40>
 800d564:	0005883a 	mov	r2,zero
 800d568:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800d56c:	e0bffd17 	ldw	r2,-12(fp)
 800d570:	10001926 	beq	r2,zero,800d5d8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800d574:	e0bffd17 	ldw	r2,-12(fp)
 800d578:	10800017 	ldw	r2,0(r2)
 800d57c:	10800417 	ldw	r2,16(r2)
 800d580:	10000626 	beq	r2,zero,800d59c <close+0x74>
 800d584:	e0bffd17 	ldw	r2,-12(fp)
 800d588:	10800017 	ldw	r2,0(r2)
 800d58c:	10800417 	ldw	r2,16(r2)
 800d590:	e13ffd17 	ldw	r4,-12(fp)
 800d594:	103ee83a 	callr	r2
 800d598:	00000106 	br	800d5a0 <close+0x78>
 800d59c:	0005883a 	mov	r2,zero
 800d5a0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800d5a4:	e13fff17 	ldw	r4,-4(fp)
 800d5a8:	800dc4c0 	call	800dc4c <alt_release_fd>
    if (rval < 0)
 800d5ac:	e0bffe17 	ldw	r2,-8(fp)
 800d5b0:	1000070e 	bge	r2,zero,800d5d0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 800d5b4:	800d4d80 	call	800d4d8 <alt_get_errno>
 800d5b8:	1007883a 	mov	r3,r2
 800d5bc:	e0bffe17 	ldw	r2,-8(fp)
 800d5c0:	0085c83a 	sub	r2,zero,r2
 800d5c4:	18800015 	stw	r2,0(r3)
      return -1;
 800d5c8:	00bfffc4 	movi	r2,-1
 800d5cc:	00000706 	br	800d5ec <close+0xc4>
    }
    return 0;
 800d5d0:	0005883a 	mov	r2,zero
 800d5d4:	00000506 	br	800d5ec <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d5d8:	800d4d80 	call	800d4d8 <alt_get_errno>
 800d5dc:	1007883a 	mov	r3,r2
 800d5e0:	00801444 	movi	r2,81
 800d5e4:	18800015 	stw	r2,0(r3)
    return -1;
 800d5e8:	00bfffc4 	movi	r2,-1
  }
}
 800d5ec:	e037883a 	mov	sp,fp
 800d5f0:	dfc00117 	ldw	ra,4(sp)
 800d5f4:	df000017 	ldw	fp,0(sp)
 800d5f8:	dec00204 	addi	sp,sp,8
 800d5fc:	f800283a 	ret

0800d600 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800d600:	defffc04 	addi	sp,sp,-16
 800d604:	df000315 	stw	fp,12(sp)
 800d608:	df000304 	addi	fp,sp,12
 800d60c:	e13ffd15 	stw	r4,-12(fp)
 800d610:	e17ffe15 	stw	r5,-8(fp)
 800d614:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800d618:	e0bfff17 	ldw	r2,-4(fp)
}
 800d61c:	e037883a 	mov	sp,fp
 800d620:	df000017 	ldw	fp,0(sp)
 800d624:	dec00104 	addi	sp,sp,4
 800d628:	f800283a 	ret

0800d62c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d62c:	defffe04 	addi	sp,sp,-8
 800d630:	dfc00115 	stw	ra,4(sp)
 800d634:	df000015 	stw	fp,0(sp)
 800d638:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d63c:	00820074 	movhi	r2,2049
 800d640:	10873b04 	addi	r2,r2,7404
 800d644:	10800017 	ldw	r2,0(r2)
 800d648:	10000526 	beq	r2,zero,800d660 <alt_get_errno+0x34>
 800d64c:	00820074 	movhi	r2,2049
 800d650:	10873b04 	addi	r2,r2,7404
 800d654:	10800017 	ldw	r2,0(r2)
 800d658:	103ee83a 	callr	r2
 800d65c:	00000206 	br	800d668 <alt_get_errno+0x3c>
 800d660:	00820074 	movhi	r2,2049
 800d664:	108e0104 	addi	r2,r2,14340
}
 800d668:	e037883a 	mov	sp,fp
 800d66c:	dfc00117 	ldw	ra,4(sp)
 800d670:	df000017 	ldw	fp,0(sp)
 800d674:	dec00204 	addi	sp,sp,8
 800d678:	f800283a 	ret

0800d67c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800d67c:	defffb04 	addi	sp,sp,-20
 800d680:	dfc00415 	stw	ra,16(sp)
 800d684:	df000315 	stw	fp,12(sp)
 800d688:	df000304 	addi	fp,sp,12
 800d68c:	e13ffe15 	stw	r4,-8(fp)
 800d690:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d694:	e0bffe17 	ldw	r2,-8(fp)
 800d698:	10000816 	blt	r2,zero,800d6bc <fstat+0x40>
 800d69c:	e13ffe17 	ldw	r4,-8(fp)
 800d6a0:	01400304 	movi	r5,12
 800d6a4:	80005f80 	call	80005f8 <__mulsi3>
 800d6a8:	1007883a 	mov	r3,r2
 800d6ac:	00820074 	movhi	r2,2049
 800d6b0:	1082b804 	addi	r2,r2,2784
 800d6b4:	1885883a 	add	r2,r3,r2
 800d6b8:	00000106 	br	800d6c0 <fstat+0x44>
 800d6bc:	0005883a 	mov	r2,zero
 800d6c0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800d6c4:	e0bffd17 	ldw	r2,-12(fp)
 800d6c8:	10001026 	beq	r2,zero,800d70c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800d6cc:	e0bffd17 	ldw	r2,-12(fp)
 800d6d0:	10800017 	ldw	r2,0(r2)
 800d6d4:	10800817 	ldw	r2,32(r2)
 800d6d8:	10000726 	beq	r2,zero,800d6f8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 800d6dc:	e0bffd17 	ldw	r2,-12(fp)
 800d6e0:	10800017 	ldw	r2,0(r2)
 800d6e4:	10800817 	ldw	r2,32(r2)
 800d6e8:	e13ffd17 	ldw	r4,-12(fp)
 800d6ec:	e17fff17 	ldw	r5,-4(fp)
 800d6f0:	103ee83a 	callr	r2
 800d6f4:	00000a06 	br	800d720 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800d6f8:	e0bfff17 	ldw	r2,-4(fp)
 800d6fc:	00c80004 	movi	r3,8192
 800d700:	10c00115 	stw	r3,4(r2)
      return 0;
 800d704:	0005883a 	mov	r2,zero
 800d708:	00000506 	br	800d720 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d70c:	800d62c0 	call	800d62c <alt_get_errno>
 800d710:	1007883a 	mov	r3,r2
 800d714:	00801444 	movi	r2,81
 800d718:	18800015 	stw	r2,0(r3)
    return -1;
 800d71c:	00bfffc4 	movi	r2,-1
  }
}
 800d720:	e037883a 	mov	sp,fp
 800d724:	dfc00117 	ldw	ra,4(sp)
 800d728:	df000017 	ldw	fp,0(sp)
 800d72c:	dec00204 	addi	sp,sp,8
 800d730:	f800283a 	ret

0800d734 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d734:	defffe04 	addi	sp,sp,-8
 800d738:	dfc00115 	stw	ra,4(sp)
 800d73c:	df000015 	stw	fp,0(sp)
 800d740:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d744:	00820074 	movhi	r2,2049
 800d748:	10873b04 	addi	r2,r2,7404
 800d74c:	10800017 	ldw	r2,0(r2)
 800d750:	10000526 	beq	r2,zero,800d768 <alt_get_errno+0x34>
 800d754:	00820074 	movhi	r2,2049
 800d758:	10873b04 	addi	r2,r2,7404
 800d75c:	10800017 	ldw	r2,0(r2)
 800d760:	103ee83a 	callr	r2
 800d764:	00000206 	br	800d770 <alt_get_errno+0x3c>
 800d768:	00820074 	movhi	r2,2049
 800d76c:	108e0104 	addi	r2,r2,14340
}
 800d770:	e037883a 	mov	sp,fp
 800d774:	dfc00117 	ldw	ra,4(sp)
 800d778:	df000017 	ldw	fp,0(sp)
 800d77c:	dec00204 	addi	sp,sp,8
 800d780:	f800283a 	ret

0800d784 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800d784:	deffed04 	addi	sp,sp,-76
 800d788:	dfc01215 	stw	ra,72(sp)
 800d78c:	df001115 	stw	fp,68(sp)
 800d790:	df001104 	addi	fp,sp,68
 800d794:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d798:	e0bfff17 	ldw	r2,-4(fp)
 800d79c:	10000816 	blt	r2,zero,800d7c0 <isatty+0x3c>
 800d7a0:	e13fff17 	ldw	r4,-4(fp)
 800d7a4:	01400304 	movi	r5,12
 800d7a8:	80005f80 	call	80005f8 <__mulsi3>
 800d7ac:	1007883a 	mov	r3,r2
 800d7b0:	00820074 	movhi	r2,2049
 800d7b4:	1082b804 	addi	r2,r2,2784
 800d7b8:	1885883a 	add	r2,r3,r2
 800d7bc:	00000106 	br	800d7c4 <isatty+0x40>
 800d7c0:	0005883a 	mov	r2,zero
 800d7c4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800d7c8:	e0bfef17 	ldw	r2,-68(fp)
 800d7cc:	10000e26 	beq	r2,zero,800d808 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800d7d0:	e0bfef17 	ldw	r2,-68(fp)
 800d7d4:	10800017 	ldw	r2,0(r2)
 800d7d8:	10800817 	ldw	r2,32(r2)
 800d7dc:	1000021e 	bne	r2,zero,800d7e8 <isatty+0x64>
    {
      return 1;
 800d7e0:	00800044 	movi	r2,1
 800d7e4:	00000d06 	br	800d81c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800d7e8:	e0bff004 	addi	r2,fp,-64
 800d7ec:	e13fff17 	ldw	r4,-4(fp)
 800d7f0:	100b883a 	mov	r5,r2
 800d7f4:	800d67c0 	call	800d67c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800d7f8:	e0bff117 	ldw	r2,-60(fp)
 800d7fc:	10880020 	cmpeqi	r2,r2,8192
 800d800:	10803fcc 	andi	r2,r2,255
 800d804:	00000506 	br	800d81c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d808:	800d7340 	call	800d734 <alt_get_errno>
 800d80c:	1007883a 	mov	r3,r2
 800d810:	00801444 	movi	r2,81
 800d814:	18800015 	stw	r2,0(r3)
    return 0;
 800d818:	0005883a 	mov	r2,zero
  }
}
 800d81c:	e037883a 	mov	sp,fp
 800d820:	dfc00117 	ldw	ra,4(sp)
 800d824:	df000017 	ldw	fp,0(sp)
 800d828:	dec00204 	addi	sp,sp,8
 800d82c:	f800283a 	ret

0800d830 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800d830:	defffc04 	addi	sp,sp,-16
 800d834:	df000315 	stw	fp,12(sp)
 800d838:	df000304 	addi	fp,sp,12
 800d83c:	e13ffd15 	stw	r4,-12(fp)
 800d840:	e17ffe15 	stw	r5,-8(fp)
 800d844:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800d848:	e0fffe17 	ldw	r3,-8(fp)
 800d84c:	e0bffd17 	ldw	r2,-12(fp)
 800d850:	18800c26 	beq	r3,r2,800d884 <alt_load_section+0x54>
  {
    while( to != end )
 800d854:	00000806 	br	800d878 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800d858:	e0bffe17 	ldw	r2,-8(fp)
 800d85c:	10c00104 	addi	r3,r2,4
 800d860:	e0fffe15 	stw	r3,-8(fp)
 800d864:	e0fffd17 	ldw	r3,-12(fp)
 800d868:	19000104 	addi	r4,r3,4
 800d86c:	e13ffd15 	stw	r4,-12(fp)
 800d870:	18c00017 	ldw	r3,0(r3)
 800d874:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800d878:	e0fffe17 	ldw	r3,-8(fp)
 800d87c:	e0bfff17 	ldw	r2,-4(fp)
 800d880:	18bff51e 	bne	r3,r2,800d858 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 800d884:	e037883a 	mov	sp,fp
 800d888:	df000017 	ldw	fp,0(sp)
 800d88c:	dec00104 	addi	sp,sp,4
 800d890:	f800283a 	ret

0800d894 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800d894:	defffe04 	addi	sp,sp,-8
 800d898:	dfc00115 	stw	ra,4(sp)
 800d89c:	df000015 	stw	fp,0(sp)
 800d8a0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800d8a4:	01020074 	movhi	r4,2049
 800d8a8:	21074004 	addi	r4,r4,7424
 800d8ac:	01420074 	movhi	r5,2049
 800d8b0:	29408504 	addi	r5,r5,532
 800d8b4:	01820074 	movhi	r6,2049
 800d8b8:	31874004 	addi	r6,r6,7424
 800d8bc:	800d8300 	call	800d830 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800d8c0:	01020034 	movhi	r4,2048
 800d8c4:	21000804 	addi	r4,r4,32
 800d8c8:	01420034 	movhi	r5,2048
 800d8cc:	29400804 	addi	r5,r5,32
 800d8d0:	01820034 	movhi	r6,2048
 800d8d4:	31806f04 	addi	r6,r6,444
 800d8d8:	800d8300 	call	800d830 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800d8dc:	01020074 	movhi	r4,2049
 800d8e0:	213fb304 	addi	r4,r4,-308
 800d8e4:	01420074 	movhi	r5,2049
 800d8e8:	297fb304 	addi	r5,r5,-308
 800d8ec:	01820074 	movhi	r6,2049
 800d8f0:	31808504 	addi	r6,r6,532
 800d8f4:	800d8300 	call	800d830 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800d8f8:	800ed7c0 	call	800ed7c <alt_dcache_flush_all>
  alt_icache_flush_all();
 800d8fc:	800ef6c0 	call	800ef6c <alt_icache_flush_all>
}
 800d900:	e037883a 	mov	sp,fp
 800d904:	dfc00117 	ldw	ra,4(sp)
 800d908:	df000017 	ldw	fp,0(sp)
 800d90c:	dec00204 	addi	sp,sp,8
 800d910:	f800283a 	ret

0800d914 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d914:	defffe04 	addi	sp,sp,-8
 800d918:	dfc00115 	stw	ra,4(sp)
 800d91c:	df000015 	stw	fp,0(sp)
 800d920:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d924:	00820074 	movhi	r2,2049
 800d928:	10873b04 	addi	r2,r2,7404
 800d92c:	10800017 	ldw	r2,0(r2)
 800d930:	10000526 	beq	r2,zero,800d948 <alt_get_errno+0x34>
 800d934:	00820074 	movhi	r2,2049
 800d938:	10873b04 	addi	r2,r2,7404
 800d93c:	10800017 	ldw	r2,0(r2)
 800d940:	103ee83a 	callr	r2
 800d944:	00000206 	br	800d950 <alt_get_errno+0x3c>
 800d948:	00820074 	movhi	r2,2049
 800d94c:	108e0104 	addi	r2,r2,14340
}
 800d950:	e037883a 	mov	sp,fp
 800d954:	dfc00117 	ldw	ra,4(sp)
 800d958:	df000017 	ldw	fp,0(sp)
 800d95c:	dec00204 	addi	sp,sp,8
 800d960:	f800283a 	ret

0800d964 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800d964:	defff904 	addi	sp,sp,-28
 800d968:	dfc00615 	stw	ra,24(sp)
 800d96c:	df000515 	stw	fp,20(sp)
 800d970:	df000504 	addi	fp,sp,20
 800d974:	e13ffd15 	stw	r4,-12(fp)
 800d978:	e17ffe15 	stw	r5,-8(fp)
 800d97c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800d980:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d984:	e0bffd17 	ldw	r2,-12(fp)
 800d988:	10000816 	blt	r2,zero,800d9ac <lseek+0x48>
 800d98c:	e13ffd17 	ldw	r4,-12(fp)
 800d990:	01400304 	movi	r5,12
 800d994:	80005f80 	call	80005f8 <__mulsi3>
 800d998:	1007883a 	mov	r3,r2
 800d99c:	00820074 	movhi	r2,2049
 800d9a0:	1082b804 	addi	r2,r2,2784
 800d9a4:	1885883a 	add	r2,r3,r2
 800d9a8:	00000106 	br	800d9b0 <lseek+0x4c>
 800d9ac:	0005883a 	mov	r2,zero
 800d9b0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800d9b4:	e0bffc17 	ldw	r2,-16(fp)
 800d9b8:	10001026 	beq	r2,zero,800d9fc <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800d9bc:	e0bffc17 	ldw	r2,-16(fp)
 800d9c0:	10800017 	ldw	r2,0(r2)
 800d9c4:	10800717 	ldw	r2,28(r2)
 800d9c8:	10000926 	beq	r2,zero,800d9f0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800d9cc:	e0bffc17 	ldw	r2,-16(fp)
 800d9d0:	10800017 	ldw	r2,0(r2)
 800d9d4:	10800717 	ldw	r2,28(r2)
 800d9d8:	e13ffc17 	ldw	r4,-16(fp)
 800d9dc:	e17ffe17 	ldw	r5,-8(fp)
 800d9e0:	e1bfff17 	ldw	r6,-4(fp)
 800d9e4:	103ee83a 	callr	r2
 800d9e8:	e0bffb15 	stw	r2,-20(fp)
 800d9ec:	00000506 	br	800da04 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800d9f0:	00bfde84 	movi	r2,-134
 800d9f4:	e0bffb15 	stw	r2,-20(fp)
 800d9f8:	00000206 	br	800da04 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 800d9fc:	00bfebc4 	movi	r2,-81
 800da00:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800da04:	e0bffb17 	ldw	r2,-20(fp)
 800da08:	1000070e 	bge	r2,zero,800da28 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 800da0c:	800d9140 	call	800d914 <alt_get_errno>
 800da10:	1007883a 	mov	r3,r2
 800da14:	e0bffb17 	ldw	r2,-20(fp)
 800da18:	0085c83a 	sub	r2,zero,r2
 800da1c:	18800015 	stw	r2,0(r3)
    rc = -1;
 800da20:	00bfffc4 	movi	r2,-1
 800da24:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800da28:	e0bffb17 	ldw	r2,-20(fp)
}
 800da2c:	e037883a 	mov	sp,fp
 800da30:	dfc00117 	ldw	ra,4(sp)
 800da34:	df000017 	ldw	fp,0(sp)
 800da38:	dec00204 	addi	sp,sp,8
 800da3c:	f800283a 	ret

0800da40 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800da40:	defffd04 	addi	sp,sp,-12
 800da44:	dfc00215 	stw	ra,8(sp)
 800da48:	df000115 	stw	fp,4(sp)
 800da4c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800da50:	0009883a 	mov	r4,zero
 800da54:	800df040 	call	800df04 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800da58:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800da5c:	800df380 	call	800df38 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800da60:	01020074 	movhi	r4,2049
 800da64:	21007b04 	addi	r4,r4,492
 800da68:	01420074 	movhi	r5,2049
 800da6c:	29407b04 	addi	r5,r5,492
 800da70:	01820074 	movhi	r6,2049
 800da74:	31807b04 	addi	r6,r6,492
 800da78:	800f34c0 	call	800f34c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800da7c:	800eeb40 	call	800eeb4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800da80:	01020074 	movhi	r4,2049
 800da84:	213bc404 	addi	r4,r4,-4336
 800da88:	800fb280 	call	800fb28 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800da8c:	d126d217 	ldw	r4,-25784(gp)
 800da90:	d0e6d317 	ldw	r3,-25780(gp)
 800da94:	d0a6d417 	ldw	r2,-25776(gp)
 800da98:	180b883a 	mov	r5,r3
 800da9c:	100d883a 	mov	r6,r2
 800daa0:	800045c0 	call	800045c <main>
 800daa4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800daa8:	01000044 	movi	r4,1
 800daac:	800d5280 	call	800d528 <close>
  exit (result);
 800dab0:	e13fff17 	ldw	r4,-4(fp)
 800dab4:	800fb3c0 	call	800fb3c <exit>

0800dab8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800dab8:	defffe04 	addi	sp,sp,-8
 800dabc:	df000115 	stw	fp,4(sp)
 800dac0:	df000104 	addi	fp,sp,4
 800dac4:	e13fff15 	stw	r4,-4(fp)
}
 800dac8:	e037883a 	mov	sp,fp
 800dacc:	df000017 	ldw	fp,0(sp)
 800dad0:	dec00104 	addi	sp,sp,4
 800dad4:	f800283a 	ret

0800dad8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800dad8:	defffe04 	addi	sp,sp,-8
 800dadc:	df000115 	stw	fp,4(sp)
 800dae0:	df000104 	addi	fp,sp,4
 800dae4:	e13fff15 	stw	r4,-4(fp)
}
 800dae8:	e037883a 	mov	sp,fp
 800daec:	df000017 	ldw	fp,0(sp)
 800daf0:	dec00104 	addi	sp,sp,4
 800daf4:	f800283a 	ret

0800daf8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800daf8:	defffe04 	addi	sp,sp,-8
 800dafc:	dfc00115 	stw	ra,4(sp)
 800db00:	df000015 	stw	fp,0(sp)
 800db04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800db08:	00820074 	movhi	r2,2049
 800db0c:	10873b04 	addi	r2,r2,7404
 800db10:	10800017 	ldw	r2,0(r2)
 800db14:	10000526 	beq	r2,zero,800db2c <alt_get_errno+0x34>
 800db18:	00820074 	movhi	r2,2049
 800db1c:	10873b04 	addi	r2,r2,7404
 800db20:	10800017 	ldw	r2,0(r2)
 800db24:	103ee83a 	callr	r2
 800db28:	00000206 	br	800db34 <alt_get_errno+0x3c>
 800db2c:	00820074 	movhi	r2,2049
 800db30:	108e0104 	addi	r2,r2,14340
}
 800db34:	e037883a 	mov	sp,fp
 800db38:	dfc00117 	ldw	ra,4(sp)
 800db3c:	df000017 	ldw	fp,0(sp)
 800db40:	dec00204 	addi	sp,sp,8
 800db44:	f800283a 	ret

0800db48 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800db48:	defff904 	addi	sp,sp,-28
 800db4c:	dfc00615 	stw	ra,24(sp)
 800db50:	df000515 	stw	fp,20(sp)
 800db54:	df000504 	addi	fp,sp,20
 800db58:	e13ffd15 	stw	r4,-12(fp)
 800db5c:	e17ffe15 	stw	r5,-8(fp)
 800db60:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800db64:	e0bffd17 	ldw	r2,-12(fp)
 800db68:	10000816 	blt	r2,zero,800db8c <read+0x44>
 800db6c:	e13ffd17 	ldw	r4,-12(fp)
 800db70:	01400304 	movi	r5,12
 800db74:	80005f80 	call	80005f8 <__mulsi3>
 800db78:	1007883a 	mov	r3,r2
 800db7c:	00820074 	movhi	r2,2049
 800db80:	1082b804 	addi	r2,r2,2784
 800db84:	1885883a 	add	r2,r3,r2
 800db88:	00000106 	br	800db90 <read+0x48>
 800db8c:	0005883a 	mov	r2,zero
 800db90:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800db94:	e0bffb17 	ldw	r2,-20(fp)
 800db98:	10002226 	beq	r2,zero,800dc24 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800db9c:	e0bffb17 	ldw	r2,-20(fp)
 800dba0:	10800217 	ldw	r2,8(r2)
 800dba4:	108000cc 	andi	r2,r2,3
 800dba8:	10800060 	cmpeqi	r2,r2,1
 800dbac:	1000181e 	bne	r2,zero,800dc10 <read+0xc8>
        (fd->dev->read))
 800dbb0:	e0bffb17 	ldw	r2,-20(fp)
 800dbb4:	10800017 	ldw	r2,0(r2)
 800dbb8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800dbbc:	10001426 	beq	r2,zero,800dc10 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800dbc0:	e0bffb17 	ldw	r2,-20(fp)
 800dbc4:	10800017 	ldw	r2,0(r2)
 800dbc8:	10800517 	ldw	r2,20(r2)
 800dbcc:	e0ffff17 	ldw	r3,-4(fp)
 800dbd0:	e13ffb17 	ldw	r4,-20(fp)
 800dbd4:	e17ffe17 	ldw	r5,-8(fp)
 800dbd8:	180d883a 	mov	r6,r3
 800dbdc:	103ee83a 	callr	r2
 800dbe0:	e0bffc15 	stw	r2,-16(fp)
 800dbe4:	e0bffc17 	ldw	r2,-16(fp)
 800dbe8:	1000070e 	bge	r2,zero,800dc08 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 800dbec:	800daf80 	call	800daf8 <alt_get_errno>
 800dbf0:	1007883a 	mov	r3,r2
 800dbf4:	e0bffc17 	ldw	r2,-16(fp)
 800dbf8:	0085c83a 	sub	r2,zero,r2
 800dbfc:	18800015 	stw	r2,0(r3)
          return -1;
 800dc00:	00bfffc4 	movi	r2,-1
 800dc04:	00000c06 	br	800dc38 <read+0xf0>
        }
        return rval;
 800dc08:	e0bffc17 	ldw	r2,-16(fp)
 800dc0c:	00000a06 	br	800dc38 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800dc10:	800daf80 	call	800daf8 <alt_get_errno>
 800dc14:	1007883a 	mov	r3,r2
 800dc18:	00800344 	movi	r2,13
 800dc1c:	18800015 	stw	r2,0(r3)
 800dc20:	00000406 	br	800dc34 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800dc24:	800daf80 	call	800daf8 <alt_get_errno>
 800dc28:	1007883a 	mov	r3,r2
 800dc2c:	00801444 	movi	r2,81
 800dc30:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800dc34:	00bfffc4 	movi	r2,-1
}
 800dc38:	e037883a 	mov	sp,fp
 800dc3c:	dfc00117 	ldw	ra,4(sp)
 800dc40:	df000017 	ldw	fp,0(sp)
 800dc44:	dec00204 	addi	sp,sp,8
 800dc48:	f800283a 	ret

0800dc4c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800dc4c:	defffc04 	addi	sp,sp,-16
 800dc50:	dfc00315 	stw	ra,12(sp)
 800dc54:	df000215 	stw	fp,8(sp)
 800dc58:	dc000115 	stw	r16,4(sp)
 800dc5c:	df000204 	addi	fp,sp,8
 800dc60:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 800dc64:	e0bffe17 	ldw	r2,-8(fp)
 800dc68:	108000d0 	cmplti	r2,r2,3
 800dc6c:	1000111e 	bne	r2,zero,800dcb4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 800dc70:	04020074 	movhi	r16,2049
 800dc74:	8402b804 	addi	r16,r16,2784
 800dc78:	e0bffe17 	ldw	r2,-8(fp)
 800dc7c:	1009883a 	mov	r4,r2
 800dc80:	01400304 	movi	r5,12
 800dc84:	80005f80 	call	80005f8 <__mulsi3>
 800dc88:	10800204 	addi	r2,r2,8
 800dc8c:	8085883a 	add	r2,r16,r2
 800dc90:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800dc94:	04020074 	movhi	r16,2049
 800dc98:	8402b804 	addi	r16,r16,2784
 800dc9c:	e0bffe17 	ldw	r2,-8(fp)
 800dca0:	1009883a 	mov	r4,r2
 800dca4:	01400304 	movi	r5,12
 800dca8:	80005f80 	call	80005f8 <__mulsi3>
 800dcac:	8085883a 	add	r2,r16,r2
 800dcb0:	10000015 	stw	zero,0(r2)
  }
}
 800dcb4:	e6ffff04 	addi	sp,fp,-4
 800dcb8:	dfc00217 	ldw	ra,8(sp)
 800dcbc:	df000117 	ldw	fp,4(sp)
 800dcc0:	dc000017 	ldw	r16,0(sp)
 800dcc4:	dec00304 	addi	sp,sp,12
 800dcc8:	f800283a 	ret

0800dccc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800dccc:	defff904 	addi	sp,sp,-28
 800dcd0:	df000615 	stw	fp,24(sp)
 800dcd4:	df000604 	addi	fp,sp,24
 800dcd8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800dcdc:	0005303a 	rdctl	r2,status
 800dce0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800dce4:	e0fffc17 	ldw	r3,-16(fp)
 800dce8:	00bfff84 	movi	r2,-2
 800dcec:	1884703a 	and	r2,r3,r2
 800dcf0:	1001703a 	wrctl	status,r2
  
  return context;
 800dcf4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800dcf8:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800dcfc:	d0a00c17 	ldw	r2,-32720(gp)
 800dd00:	10c000c4 	addi	r3,r2,3
 800dd04:	00bfff04 	movi	r2,-4
 800dd08:	1884703a 	and	r2,r3,r2
 800dd0c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800dd10:	d0e00c17 	ldw	r3,-32720(gp)
 800dd14:	e0bfff17 	ldw	r2,-4(fp)
 800dd18:	1887883a 	add	r3,r3,r2
 800dd1c:	00830034 	movhi	r2,3072
 800dd20:	10800004 	addi	r2,r2,0
 800dd24:	10c0062e 	bgeu	r2,r3,800dd40 <sbrk+0x74>
 800dd28:	e0bffa17 	ldw	r2,-24(fp)
 800dd2c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800dd30:	e0bffd17 	ldw	r2,-12(fp)
 800dd34:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800dd38:	00bfffc4 	movi	r2,-1
 800dd3c:	00000b06 	br	800dd6c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800dd40:	d0a00c17 	ldw	r2,-32720(gp)
 800dd44:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 800dd48:	d0e00c17 	ldw	r3,-32720(gp)
 800dd4c:	e0bfff17 	ldw	r2,-4(fp)
 800dd50:	1885883a 	add	r2,r3,r2
 800dd54:	d0a00c15 	stw	r2,-32720(gp)
 800dd58:	e0bffa17 	ldw	r2,-24(fp)
 800dd5c:	e0bffe15 	stw	r2,-8(fp)
 800dd60:	e0bffe17 	ldw	r2,-8(fp)
 800dd64:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800dd68:	e0bffb17 	ldw	r2,-20(fp)
} 
 800dd6c:	e037883a 	mov	sp,fp
 800dd70:	df000017 	ldw	fp,0(sp)
 800dd74:	dec00104 	addi	sp,sp,4
 800dd78:	f800283a 	ret

0800dd7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800dd7c:	defffe04 	addi	sp,sp,-8
 800dd80:	dfc00115 	stw	ra,4(sp)
 800dd84:	df000015 	stw	fp,0(sp)
 800dd88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800dd8c:	00820074 	movhi	r2,2049
 800dd90:	10873b04 	addi	r2,r2,7404
 800dd94:	10800017 	ldw	r2,0(r2)
 800dd98:	10000526 	beq	r2,zero,800ddb0 <alt_get_errno+0x34>
 800dd9c:	00820074 	movhi	r2,2049
 800dda0:	10873b04 	addi	r2,r2,7404
 800dda4:	10800017 	ldw	r2,0(r2)
 800dda8:	103ee83a 	callr	r2
 800ddac:	00000206 	br	800ddb8 <alt_get_errno+0x3c>
 800ddb0:	00820074 	movhi	r2,2049
 800ddb4:	108e0104 	addi	r2,r2,14340
}
 800ddb8:	e037883a 	mov	sp,fp
 800ddbc:	dfc00117 	ldw	ra,4(sp)
 800ddc0:	df000017 	ldw	fp,0(sp)
 800ddc4:	dec00204 	addi	sp,sp,8
 800ddc8:	f800283a 	ret

0800ddcc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800ddcc:	defff904 	addi	sp,sp,-28
 800ddd0:	dfc00615 	stw	ra,24(sp)
 800ddd4:	df000515 	stw	fp,20(sp)
 800ddd8:	df000504 	addi	fp,sp,20
 800dddc:	e13ffd15 	stw	r4,-12(fp)
 800dde0:	e17ffe15 	stw	r5,-8(fp)
 800dde4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800dde8:	e0bffd17 	ldw	r2,-12(fp)
 800ddec:	10000816 	blt	r2,zero,800de10 <write+0x44>
 800ddf0:	e13ffd17 	ldw	r4,-12(fp)
 800ddf4:	01400304 	movi	r5,12
 800ddf8:	80005f80 	call	80005f8 <__mulsi3>
 800ddfc:	1007883a 	mov	r3,r2
 800de00:	00820074 	movhi	r2,2049
 800de04:	1082b804 	addi	r2,r2,2784
 800de08:	1885883a 	add	r2,r3,r2
 800de0c:	00000106 	br	800de14 <write+0x48>
 800de10:	0005883a 	mov	r2,zero
 800de14:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800de18:	e0bffb17 	ldw	r2,-20(fp)
 800de1c:	10002126 	beq	r2,zero,800dea4 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800de20:	e0bffb17 	ldw	r2,-20(fp)
 800de24:	10800217 	ldw	r2,8(r2)
 800de28:	108000cc 	andi	r2,r2,3
 800de2c:	10001826 	beq	r2,zero,800de90 <write+0xc4>
 800de30:	e0bffb17 	ldw	r2,-20(fp)
 800de34:	10800017 	ldw	r2,0(r2)
 800de38:	10800617 	ldw	r2,24(r2)
 800de3c:	10001426 	beq	r2,zero,800de90 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800de40:	e0bffb17 	ldw	r2,-20(fp)
 800de44:	10800017 	ldw	r2,0(r2)
 800de48:	10800617 	ldw	r2,24(r2)
 800de4c:	e0ffff17 	ldw	r3,-4(fp)
 800de50:	e13ffb17 	ldw	r4,-20(fp)
 800de54:	e17ffe17 	ldw	r5,-8(fp)
 800de58:	180d883a 	mov	r6,r3
 800de5c:	103ee83a 	callr	r2
 800de60:	e0bffc15 	stw	r2,-16(fp)
 800de64:	e0bffc17 	ldw	r2,-16(fp)
 800de68:	1000070e 	bge	r2,zero,800de88 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 800de6c:	800dd7c0 	call	800dd7c <alt_get_errno>
 800de70:	1007883a 	mov	r3,r2
 800de74:	e0bffc17 	ldw	r2,-16(fp)
 800de78:	0085c83a 	sub	r2,zero,r2
 800de7c:	18800015 	stw	r2,0(r3)
        return -1;
 800de80:	00bfffc4 	movi	r2,-1
 800de84:	00000c06 	br	800deb8 <write+0xec>
      }
      return rval;
 800de88:	e0bffc17 	ldw	r2,-16(fp)
 800de8c:	00000a06 	br	800deb8 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800de90:	800dd7c0 	call	800dd7c <alt_get_errno>
 800de94:	1007883a 	mov	r3,r2
 800de98:	00800344 	movi	r2,13
 800de9c:	18800015 	stw	r2,0(r3)
 800dea0:	00000406 	br	800deb4 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800dea4:	800dd7c0 	call	800dd7c <alt_get_errno>
 800dea8:	1007883a 	mov	r3,r2
 800deac:	00801444 	movi	r2,81
 800deb0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800deb4:	00bfffc4 	movi	r2,-1
}
 800deb8:	e037883a 	mov	sp,fp
 800debc:	dfc00117 	ldw	ra,4(sp)
 800dec0:	df000017 	ldw	fp,0(sp)
 800dec4:	dec00204 	addi	sp,sp,8
 800dec8:	f800283a 	ret

0800decc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800decc:	defffd04 	addi	sp,sp,-12
 800ded0:	dfc00215 	stw	ra,8(sp)
 800ded4:	df000115 	stw	fp,4(sp)
 800ded8:	df000104 	addi	fp,sp,4
 800dedc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800dee0:	e13fff17 	ldw	r4,-4(fp)
 800dee4:	01420074 	movhi	r5,2049
 800dee8:	29473804 	addi	r5,r5,7392
 800deec:	800ee100 	call	800ee10 <alt_dev_llist_insert>
}
 800def0:	e037883a 	mov	sp,fp
 800def4:	dfc00117 	ldw	ra,4(sp)
 800def8:	df000017 	ldw	fp,0(sp)
 800defc:	dec00204 	addi	sp,sp,8
 800df00:	f800283a 	ret

0800df04 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800df04:	defffd04 	addi	sp,sp,-12
 800df08:	dfc00215 	stw	ra,8(sp)
 800df0c:	df000115 	stw	fp,4(sp)
 800df10:	df000104 	addi	fp,sp,4
 800df14:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 800df18:	800f8040 	call	800f804 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800df1c:	00800044 	movi	r2,1
 800df20:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800df24:	e037883a 	mov	sp,fp
 800df28:	dfc00117 	ldw	ra,4(sp)
 800df2c:	df000017 	ldw	fp,0(sp)
 800df30:	dec00204 	addi	sp,sp,8
 800df34:	f800283a 	ret

0800df38 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800df38:	defffe04 	addi	sp,sp,-8
 800df3c:	dfc00115 	stw	ra,4(sp)
 800df40:	df000015 	stw	fp,0(sp)
 800df44:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 800df48:	01081004 	movi	r4,8256
 800df4c:	000b883a 	mov	r5,zero
 800df50:	000d883a 	mov	r6,zero
 800df54:	01c0fa04 	movi	r7,1000
 800df58:	800ea740 	call	800ea74 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
 800df5c:	00820074 	movhi	r2,2049
 800df60:	108e0504 	addi	r2,r2,14356
 800df64:	00c81804 	movi	r3,8288
 800df68:	10c00015 	stw	r3,0(r2)
 800df6c:	00820074 	movhi	r2,2049
 800df70:	108e0604 	addi	r2,r2,14360
 800df74:	00c0bef4 	movhi	r3,763
 800df78:	18fc2004 	addi	r3,r3,-3968
 800df7c:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800df80:	01020074 	movhi	r4,2049
 800df84:	21032204 	addi	r4,r4,3208
 800df88:	000b883a 	mov	r5,zero
 800df8c:	01800144 	movi	r6,5
 800df90:	800e1180 	call	800e118 <altera_avalon_jtag_uart_init>
 800df94:	01020074 	movhi	r4,2049
 800df98:	21031804 	addi	r4,r4,3168
 800df9c:	800decc0 	call	800decc <alt_dev_reg>
}
 800dfa0:	e037883a 	mov	sp,fp
 800dfa4:	dfc00117 	ldw	ra,4(sp)
 800dfa8:	df000017 	ldw	fp,0(sp)
 800dfac:	dec00204 	addi	sp,sp,8
 800dfb0:	f800283a 	ret

0800dfb4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800dfb4:	defffa04 	addi	sp,sp,-24
 800dfb8:	dfc00515 	stw	ra,20(sp)
 800dfbc:	df000415 	stw	fp,16(sp)
 800dfc0:	df000404 	addi	fp,sp,16
 800dfc4:	e13ffd15 	stw	r4,-12(fp)
 800dfc8:	e17ffe15 	stw	r5,-8(fp)
 800dfcc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800dfd0:	e0bffd17 	ldw	r2,-12(fp)
 800dfd4:	10800017 	ldw	r2,0(r2)
 800dfd8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800dfdc:	e0bffc17 	ldw	r2,-16(fp)
 800dfe0:	10c00a04 	addi	r3,r2,40
 800dfe4:	e0bffd17 	ldw	r2,-12(fp)
 800dfe8:	10800217 	ldw	r2,8(r2)
 800dfec:	1809883a 	mov	r4,r3
 800dff0:	e17ffe17 	ldw	r5,-8(fp)
 800dff4:	e1bfff17 	ldw	r6,-4(fp)
 800dff8:	100f883a 	mov	r7,r2
 800dffc:	800e5dc0 	call	800e5dc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800e000:	e037883a 	mov	sp,fp
 800e004:	dfc00117 	ldw	ra,4(sp)
 800e008:	df000017 	ldw	fp,0(sp)
 800e00c:	dec00204 	addi	sp,sp,8
 800e010:	f800283a 	ret

0800e014 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800e014:	defffa04 	addi	sp,sp,-24
 800e018:	dfc00515 	stw	ra,20(sp)
 800e01c:	df000415 	stw	fp,16(sp)
 800e020:	df000404 	addi	fp,sp,16
 800e024:	e13ffd15 	stw	r4,-12(fp)
 800e028:	e17ffe15 	stw	r5,-8(fp)
 800e02c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800e030:	e0bffd17 	ldw	r2,-12(fp)
 800e034:	10800017 	ldw	r2,0(r2)
 800e038:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800e03c:	e0bffc17 	ldw	r2,-16(fp)
 800e040:	10c00a04 	addi	r3,r2,40
 800e044:	e0bffd17 	ldw	r2,-12(fp)
 800e048:	10800217 	ldw	r2,8(r2)
 800e04c:	1809883a 	mov	r4,r3
 800e050:	e17ffe17 	ldw	r5,-8(fp)
 800e054:	e1bfff17 	ldw	r6,-4(fp)
 800e058:	100f883a 	mov	r7,r2
 800e05c:	800e7e80 	call	800e7e8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800e060:	e037883a 	mov	sp,fp
 800e064:	dfc00117 	ldw	ra,4(sp)
 800e068:	df000017 	ldw	fp,0(sp)
 800e06c:	dec00204 	addi	sp,sp,8
 800e070:	f800283a 	ret

0800e074 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800e074:	defffc04 	addi	sp,sp,-16
 800e078:	dfc00315 	stw	ra,12(sp)
 800e07c:	df000215 	stw	fp,8(sp)
 800e080:	df000204 	addi	fp,sp,8
 800e084:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800e088:	e0bfff17 	ldw	r2,-4(fp)
 800e08c:	10800017 	ldw	r2,0(r2)
 800e090:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800e094:	e0bffe17 	ldw	r2,-8(fp)
 800e098:	10c00a04 	addi	r3,r2,40
 800e09c:	e0bfff17 	ldw	r2,-4(fp)
 800e0a0:	10800217 	ldw	r2,8(r2)
 800e0a4:	1809883a 	mov	r4,r3
 800e0a8:	100b883a 	mov	r5,r2
 800e0ac:	800e4880 	call	800e488 <altera_avalon_jtag_uart_close>
}
 800e0b0:	e037883a 	mov	sp,fp
 800e0b4:	dfc00117 	ldw	ra,4(sp)
 800e0b8:	df000017 	ldw	fp,0(sp)
 800e0bc:	dec00204 	addi	sp,sp,8
 800e0c0:	f800283a 	ret

0800e0c4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800e0c4:	defffa04 	addi	sp,sp,-24
 800e0c8:	dfc00515 	stw	ra,20(sp)
 800e0cc:	df000415 	stw	fp,16(sp)
 800e0d0:	df000404 	addi	fp,sp,16
 800e0d4:	e13ffd15 	stw	r4,-12(fp)
 800e0d8:	e17ffe15 	stw	r5,-8(fp)
 800e0dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800e0e0:	e0bffd17 	ldw	r2,-12(fp)
 800e0e4:	10800017 	ldw	r2,0(r2)
 800e0e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800e0ec:	e0bffc17 	ldw	r2,-16(fp)
 800e0f0:	10800a04 	addi	r2,r2,40
 800e0f4:	1009883a 	mov	r4,r2
 800e0f8:	e17ffe17 	ldw	r5,-8(fp)
 800e0fc:	e1bfff17 	ldw	r6,-4(fp)
 800e100:	800e4f00 	call	800e4f0 <altera_avalon_jtag_uart_ioctl>
}
 800e104:	e037883a 	mov	sp,fp
 800e108:	dfc00117 	ldw	ra,4(sp)
 800e10c:	df000017 	ldw	fp,0(sp)
 800e110:	dec00204 	addi	sp,sp,8
 800e114:	f800283a 	ret

0800e118 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800e118:	defffa04 	addi	sp,sp,-24
 800e11c:	dfc00515 	stw	ra,20(sp)
 800e120:	df000415 	stw	fp,16(sp)
 800e124:	df000404 	addi	fp,sp,16
 800e128:	e13ffd15 	stw	r4,-12(fp)
 800e12c:	e17ffe15 	stw	r5,-8(fp)
 800e130:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800e134:	e0bffd17 	ldw	r2,-12(fp)
 800e138:	00c00044 	movi	r3,1
 800e13c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800e140:	e0bffd17 	ldw	r2,-12(fp)
 800e144:	10800017 	ldw	r2,0(r2)
 800e148:	10800104 	addi	r2,r2,4
 800e14c:	1007883a 	mov	r3,r2
 800e150:	e0bffd17 	ldw	r2,-12(fp)
 800e154:	10800817 	ldw	r2,32(r2)
 800e158:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800e15c:	e0fffe17 	ldw	r3,-8(fp)
 800e160:	e0bfff17 	ldw	r2,-4(fp)
 800e164:	d8000015 	stw	zero,0(sp)
 800e168:	1809883a 	mov	r4,r3
 800e16c:	100b883a 	mov	r5,r2
 800e170:	01820074 	movhi	r6,2049
 800e174:	31b87704 	addi	r6,r6,-7716
 800e178:	e1fffd17 	ldw	r7,-12(fp)
 800e17c:	800ef9c0 	call	800ef9c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800e180:	e0bffd17 	ldw	r2,-12(fp)
 800e184:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800e188:	e0bffd17 	ldw	r2,-12(fp)
 800e18c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800e190:	00820074 	movhi	r2,2049
 800e194:	108e0804 	addi	r2,r2,14368
 800e198:	10800017 	ldw	r2,0(r2)
 800e19c:	1809883a 	mov	r4,r3
 800e1a0:	100b883a 	mov	r5,r2
 800e1a4:	01820074 	movhi	r6,2049
 800e1a8:	31b8f804 	addi	r6,r6,-7200
 800e1ac:	e1fffd17 	ldw	r7,-12(fp)
 800e1b0:	800ec3c0 	call	800ec3c <alt_alarm_start>
 800e1b4:	1000040e 	bge	r2,zero,800e1c8 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800e1b8:	e0fffd17 	ldw	r3,-12(fp)
 800e1bc:	00a00034 	movhi	r2,32768
 800e1c0:	10bfffc4 	addi	r2,r2,-1
 800e1c4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800e1c8:	e037883a 	mov	sp,fp
 800e1cc:	dfc00117 	ldw	ra,4(sp)
 800e1d0:	df000017 	ldw	fp,0(sp)
 800e1d4:	dec00204 	addi	sp,sp,8
 800e1d8:	f800283a 	ret

0800e1dc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800e1dc:	defff804 	addi	sp,sp,-32
 800e1e0:	df000715 	stw	fp,28(sp)
 800e1e4:	df000704 	addi	fp,sp,28
 800e1e8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800e1ec:	e0bfff17 	ldw	r2,-4(fp)
 800e1f0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800e1f4:	e0bffb17 	ldw	r2,-20(fp)
 800e1f8:	10800017 	ldw	r2,0(r2)
 800e1fc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800e200:	e0bffc17 	ldw	r2,-16(fp)
 800e204:	10800104 	addi	r2,r2,4
 800e208:	10800037 	ldwio	r2,0(r2)
 800e20c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800e210:	e0bffd17 	ldw	r2,-12(fp)
 800e214:	1080c00c 	andi	r2,r2,768
 800e218:	1000011e 	bne	r2,zero,800e220 <altera_avalon_jtag_uart_irq+0x44>
      break;
 800e21c:	00006c06 	br	800e3d0 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800e220:	e0bffd17 	ldw	r2,-12(fp)
 800e224:	1080400c 	andi	r2,r2,256
 800e228:	10003426 	beq	r2,zero,800e2fc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800e22c:	00800074 	movhi	r2,1
 800e230:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e234:	e0bffb17 	ldw	r2,-20(fp)
 800e238:	10800a17 	ldw	r2,40(r2)
 800e23c:	10800044 	addi	r2,r2,1
 800e240:	1081ffcc 	andi	r2,r2,2047
 800e244:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800e248:	e0bffb17 	ldw	r2,-20(fp)
 800e24c:	10c00b17 	ldw	r3,44(r2)
 800e250:	e0bffe17 	ldw	r2,-8(fp)
 800e254:	1880011e 	bne	r3,r2,800e25c <altera_avalon_jtag_uart_irq+0x80>
          break;
 800e258:	00001606 	br	800e2b4 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800e25c:	e0bffc17 	ldw	r2,-16(fp)
 800e260:	10800037 	ldwio	r2,0(r2)
 800e264:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800e268:	e0bff917 	ldw	r2,-28(fp)
 800e26c:	10a0000c 	andi	r2,r2,32768
 800e270:	1000011e 	bne	r2,zero,800e278 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 800e274:	00000f06 	br	800e2b4 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800e278:	e0bffb17 	ldw	r2,-20(fp)
 800e27c:	10800a17 	ldw	r2,40(r2)
 800e280:	e0fff917 	ldw	r3,-28(fp)
 800e284:	1809883a 	mov	r4,r3
 800e288:	e0fffb17 	ldw	r3,-20(fp)
 800e28c:	1885883a 	add	r2,r3,r2
 800e290:	10800e04 	addi	r2,r2,56
 800e294:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e298:	e0bffb17 	ldw	r2,-20(fp)
 800e29c:	10800a17 	ldw	r2,40(r2)
 800e2a0:	10800044 	addi	r2,r2,1
 800e2a4:	10c1ffcc 	andi	r3,r2,2047
 800e2a8:	e0bffb17 	ldw	r2,-20(fp)
 800e2ac:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800e2b0:	003fe006 	br	800e234 <altera_avalon_jtag_uart_irq+0x58>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800e2b4:	e0bff917 	ldw	r2,-28(fp)
 800e2b8:	10bfffec 	andhi	r2,r2,65535
 800e2bc:	10000f26 	beq	r2,zero,800e2fc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800e2c0:	e0bffb17 	ldw	r2,-20(fp)
 800e2c4:	10c00817 	ldw	r3,32(r2)
 800e2c8:	00bfff84 	movi	r2,-2
 800e2cc:	1886703a 	and	r3,r3,r2
 800e2d0:	e0bffb17 	ldw	r2,-20(fp)
 800e2d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800e2d8:	e0bffc17 	ldw	r2,-16(fp)
 800e2dc:	10800104 	addi	r2,r2,4
 800e2e0:	1007883a 	mov	r3,r2
 800e2e4:	e0bffb17 	ldw	r2,-20(fp)
 800e2e8:	10800817 	ldw	r2,32(r2)
 800e2ec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800e2f0:	e0bffc17 	ldw	r2,-16(fp)
 800e2f4:	10800104 	addi	r2,r2,4
 800e2f8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800e2fc:	e0bffd17 	ldw	r2,-12(fp)
 800e300:	1080800c 	andi	r2,r2,512
 800e304:	10003126 	beq	r2,zero,800e3cc <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800e308:	e0bffd17 	ldw	r2,-12(fp)
 800e30c:	1004d43a 	srli	r2,r2,16
 800e310:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800e314:	00001406 	br	800e368 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800e318:	e0bffc17 	ldw	r2,-16(fp)
 800e31c:	e0fffb17 	ldw	r3,-20(fp)
 800e320:	18c00d17 	ldw	r3,52(r3)
 800e324:	e13ffb17 	ldw	r4,-20(fp)
 800e328:	20c7883a 	add	r3,r4,r3
 800e32c:	18c20e04 	addi	r3,r3,2104
 800e330:	18c00003 	ldbu	r3,0(r3)
 800e334:	18c03fcc 	andi	r3,r3,255
 800e338:	18c0201c 	xori	r3,r3,128
 800e33c:	18ffe004 	addi	r3,r3,-128
 800e340:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e344:	e0bffb17 	ldw	r2,-20(fp)
 800e348:	10800d17 	ldw	r2,52(r2)
 800e34c:	10800044 	addi	r2,r2,1
 800e350:	10c1ffcc 	andi	r3,r2,2047
 800e354:	e0bffb17 	ldw	r2,-20(fp)
 800e358:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800e35c:	e0bffa17 	ldw	r2,-24(fp)
 800e360:	10bfffc4 	addi	r2,r2,-1
 800e364:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800e368:	e0bffa17 	ldw	r2,-24(fp)
 800e36c:	10000526 	beq	r2,zero,800e384 <altera_avalon_jtag_uart_irq+0x1a8>
 800e370:	e0bffb17 	ldw	r2,-20(fp)
 800e374:	10c00d17 	ldw	r3,52(r2)
 800e378:	e0bffb17 	ldw	r2,-20(fp)
 800e37c:	10800c17 	ldw	r2,48(r2)
 800e380:	18bfe51e 	bne	r3,r2,800e318 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800e384:	e0bffa17 	ldw	r2,-24(fp)
 800e388:	10001026 	beq	r2,zero,800e3cc <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800e38c:	e0bffb17 	ldw	r2,-20(fp)
 800e390:	10c00817 	ldw	r3,32(r2)
 800e394:	00bfff44 	movi	r2,-3
 800e398:	1886703a 	and	r3,r3,r2
 800e39c:	e0bffb17 	ldw	r2,-20(fp)
 800e3a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800e3a4:	e0bffb17 	ldw	r2,-20(fp)
 800e3a8:	10800017 	ldw	r2,0(r2)
 800e3ac:	10800104 	addi	r2,r2,4
 800e3b0:	1007883a 	mov	r3,r2
 800e3b4:	e0bffb17 	ldw	r2,-20(fp)
 800e3b8:	10800817 	ldw	r2,32(r2)
 800e3bc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800e3c0:	e0bffc17 	ldw	r2,-16(fp)
 800e3c4:	10800104 	addi	r2,r2,4
 800e3c8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800e3cc:	003f8c06 	br	800e200 <altera_avalon_jtag_uart_irq+0x24>
}
 800e3d0:	e037883a 	mov	sp,fp
 800e3d4:	df000017 	ldw	fp,0(sp)
 800e3d8:	dec00104 	addi	sp,sp,4
 800e3dc:	f800283a 	ret

0800e3e0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800e3e0:	defff804 	addi	sp,sp,-32
 800e3e4:	df000715 	stw	fp,28(sp)
 800e3e8:	df000704 	addi	fp,sp,28
 800e3ec:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800e3f0:	e0bffb17 	ldw	r2,-20(fp)
 800e3f4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800e3f8:	e0bff917 	ldw	r2,-28(fp)
 800e3fc:	10800017 	ldw	r2,0(r2)
 800e400:	10800104 	addi	r2,r2,4
 800e404:	10800037 	ldwio	r2,0(r2)
 800e408:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800e40c:	e0bffa17 	ldw	r2,-24(fp)
 800e410:	1081000c 	andi	r2,r2,1024
 800e414:	10000b26 	beq	r2,zero,800e444 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800e418:	e0bff917 	ldw	r2,-28(fp)
 800e41c:	10800017 	ldw	r2,0(r2)
 800e420:	10800104 	addi	r2,r2,4
 800e424:	1007883a 	mov	r3,r2
 800e428:	e0bff917 	ldw	r2,-28(fp)
 800e42c:	10800817 	ldw	r2,32(r2)
 800e430:	10810014 	ori	r2,r2,1024
 800e434:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 800e438:	e0bff917 	ldw	r2,-28(fp)
 800e43c:	10000915 	stw	zero,36(r2)
 800e440:	00000a06 	br	800e46c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800e444:	e0bff917 	ldw	r2,-28(fp)
 800e448:	10c00917 	ldw	r3,36(r2)
 800e44c:	00a00034 	movhi	r2,32768
 800e450:	10bfff04 	addi	r2,r2,-4
 800e454:	10c00536 	bltu	r2,r3,800e46c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800e458:	e0bff917 	ldw	r2,-28(fp)
 800e45c:	10800917 	ldw	r2,36(r2)
 800e460:	10c00044 	addi	r3,r2,1
 800e464:	e0bff917 	ldw	r2,-28(fp)
 800e468:	10c00915 	stw	r3,36(r2)
 800e46c:	00820074 	movhi	r2,2049
 800e470:	108e0804 	addi	r2,r2,14368
 800e474:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800e478:	e037883a 	mov	sp,fp
 800e47c:	df000017 	ldw	fp,0(sp)
 800e480:	dec00104 	addi	sp,sp,4
 800e484:	f800283a 	ret

0800e488 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800e488:	defffd04 	addi	sp,sp,-12
 800e48c:	df000215 	stw	fp,8(sp)
 800e490:	df000204 	addi	fp,sp,8
 800e494:	e13ffe15 	stw	r4,-8(fp)
 800e498:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800e49c:	00000506 	br	800e4b4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800e4a0:	e0bfff17 	ldw	r2,-4(fp)
 800e4a4:	1090000c 	andi	r2,r2,16384
 800e4a8:	10000226 	beq	r2,zero,800e4b4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800e4ac:	00bffd44 	movi	r2,-11
 800e4b0:	00000b06 	br	800e4e0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800e4b4:	e0bffe17 	ldw	r2,-8(fp)
 800e4b8:	10c00d17 	ldw	r3,52(r2)
 800e4bc:	e0bffe17 	ldw	r2,-8(fp)
 800e4c0:	10800c17 	ldw	r2,48(r2)
 800e4c4:	18800526 	beq	r3,r2,800e4dc <altera_avalon_jtag_uart_close+0x54>
 800e4c8:	e0bffe17 	ldw	r2,-8(fp)
 800e4cc:	10c00917 	ldw	r3,36(r2)
 800e4d0:	e0bffe17 	ldw	r2,-8(fp)
 800e4d4:	10800117 	ldw	r2,4(r2)
 800e4d8:	18bff136 	bltu	r3,r2,800e4a0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800e4dc:	0005883a 	mov	r2,zero
}
 800e4e0:	e037883a 	mov	sp,fp
 800e4e4:	df000017 	ldw	fp,0(sp)
 800e4e8:	dec00104 	addi	sp,sp,4
 800e4ec:	f800283a 	ret

0800e4f0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800e4f0:	defffa04 	addi	sp,sp,-24
 800e4f4:	df000515 	stw	fp,20(sp)
 800e4f8:	df000504 	addi	fp,sp,20
 800e4fc:	e13ffd15 	stw	r4,-12(fp)
 800e500:	e17ffe15 	stw	r5,-8(fp)
 800e504:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800e508:	00bff9c4 	movi	r2,-25
 800e50c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800e510:	e0bffe17 	ldw	r2,-8(fp)
 800e514:	10da8060 	cmpeqi	r3,r2,27137
 800e518:	1800031e 	bne	r3,zero,800e528 <altera_avalon_jtag_uart_ioctl+0x38>
 800e51c:	109a80a0 	cmpeqi	r2,r2,27138
 800e520:	1000191e 	bne	r2,zero,800e588 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 800e524:	00002806 	br	800e5c8 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800e528:	e0bffd17 	ldw	r2,-12(fp)
 800e52c:	10c00117 	ldw	r3,4(r2)
 800e530:	00a00034 	movhi	r2,32768
 800e534:	10bfffc4 	addi	r2,r2,-1
 800e538:	18801226 	beq	r3,r2,800e584 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 800e53c:	e0bfff17 	ldw	r2,-4(fp)
 800e540:	10800017 	ldw	r2,0(r2)
 800e544:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800e548:	e0bffc17 	ldw	r2,-16(fp)
 800e54c:	10800090 	cmplti	r2,r2,2
 800e550:	1000061e 	bne	r2,zero,800e56c <altera_avalon_jtag_uart_ioctl+0x7c>
 800e554:	e0fffc17 	ldw	r3,-16(fp)
 800e558:	00a00034 	movhi	r2,32768
 800e55c:	10bfffc4 	addi	r2,r2,-1
 800e560:	18800226 	beq	r3,r2,800e56c <altera_avalon_jtag_uart_ioctl+0x7c>
 800e564:	e0bffc17 	ldw	r2,-16(fp)
 800e568:	00000206 	br	800e574 <altera_avalon_jtag_uart_ioctl+0x84>
 800e56c:	00a00034 	movhi	r2,32768
 800e570:	10bfff84 	addi	r2,r2,-2
 800e574:	e0fffd17 	ldw	r3,-12(fp)
 800e578:	18800115 	stw	r2,4(r3)
      rc = 0;
 800e57c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800e580:	00001106 	br	800e5c8 <altera_avalon_jtag_uart_ioctl+0xd8>
 800e584:	00001006 	br	800e5c8 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800e588:	e0bffd17 	ldw	r2,-12(fp)
 800e58c:	10c00117 	ldw	r3,4(r2)
 800e590:	00a00034 	movhi	r2,32768
 800e594:	10bfffc4 	addi	r2,r2,-1
 800e598:	18800a26 	beq	r3,r2,800e5c4 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800e59c:	e0bffd17 	ldw	r2,-12(fp)
 800e5a0:	10c00917 	ldw	r3,36(r2)
 800e5a4:	e0bffd17 	ldw	r2,-12(fp)
 800e5a8:	10800117 	ldw	r2,4(r2)
 800e5ac:	1885803a 	cmpltu	r2,r3,r2
 800e5b0:	10c03fcc 	andi	r3,r2,255
 800e5b4:	e0bfff17 	ldw	r2,-4(fp)
 800e5b8:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800e5bc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800e5c0:	00000006 	br	800e5c4 <altera_avalon_jtag_uart_ioctl+0xd4>
 800e5c4:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800e5c8:	e0bffb17 	ldw	r2,-20(fp)
}
 800e5cc:	e037883a 	mov	sp,fp
 800e5d0:	df000017 	ldw	fp,0(sp)
 800e5d4:	dec00104 	addi	sp,sp,4
 800e5d8:	f800283a 	ret

0800e5dc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800e5dc:	defff304 	addi	sp,sp,-52
 800e5e0:	dfc00c15 	stw	ra,48(sp)
 800e5e4:	df000b15 	stw	fp,44(sp)
 800e5e8:	df000b04 	addi	fp,sp,44
 800e5ec:	e13ffc15 	stw	r4,-16(fp)
 800e5f0:	e17ffd15 	stw	r5,-12(fp)
 800e5f4:	e1bffe15 	stw	r6,-8(fp)
 800e5f8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800e5fc:	e0bffd17 	ldw	r2,-12(fp)
 800e600:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800e604:	00004906 	br	800e72c <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800e608:	e0bffc17 	ldw	r2,-16(fp)
 800e60c:	10800a17 	ldw	r2,40(r2)
 800e610:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800e614:	e0bffc17 	ldw	r2,-16(fp)
 800e618:	10800b17 	ldw	r2,44(r2)
 800e61c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800e620:	e0fff717 	ldw	r3,-36(fp)
 800e624:	e0bff817 	ldw	r2,-32(fp)
 800e628:	18800536 	bltu	r3,r2,800e640 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800e62c:	e0fff717 	ldw	r3,-36(fp)
 800e630:	e0bff817 	ldw	r2,-32(fp)
 800e634:	1885c83a 	sub	r2,r3,r2
 800e638:	e0bff615 	stw	r2,-40(fp)
 800e63c:	00000406 	br	800e650 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800e640:	00c20004 	movi	r3,2048
 800e644:	e0bff817 	ldw	r2,-32(fp)
 800e648:	1885c83a 	sub	r2,r3,r2
 800e64c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800e650:	e0bff617 	ldw	r2,-40(fp)
 800e654:	1000011e 	bne	r2,zero,800e65c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 800e658:	00001d06 	br	800e6d0 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 800e65c:	e0fffe17 	ldw	r3,-8(fp)
 800e660:	e0bff617 	ldw	r2,-40(fp)
 800e664:	1880022e 	bgeu	r3,r2,800e670 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 800e668:	e0bffe17 	ldw	r2,-8(fp)
 800e66c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800e670:	e0bff817 	ldw	r2,-32(fp)
 800e674:	10800e04 	addi	r2,r2,56
 800e678:	e0fffc17 	ldw	r3,-16(fp)
 800e67c:	1885883a 	add	r2,r3,r2
 800e680:	e13ff517 	ldw	r4,-44(fp)
 800e684:	100b883a 	mov	r5,r2
 800e688:	e1bff617 	ldw	r6,-40(fp)
 800e68c:	80060400 	call	8006040 <memcpy>
      ptr   += n;
 800e690:	e0fff517 	ldw	r3,-44(fp)
 800e694:	e0bff617 	ldw	r2,-40(fp)
 800e698:	1885883a 	add	r2,r3,r2
 800e69c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800e6a0:	e0fffe17 	ldw	r3,-8(fp)
 800e6a4:	e0bff617 	ldw	r2,-40(fp)
 800e6a8:	1885c83a 	sub	r2,r3,r2
 800e6ac:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e6b0:	e0fff817 	ldw	r3,-32(fp)
 800e6b4:	e0bff617 	ldw	r2,-40(fp)
 800e6b8:	1885883a 	add	r2,r3,r2
 800e6bc:	10c1ffcc 	andi	r3,r2,2047
 800e6c0:	e0bffc17 	ldw	r2,-16(fp)
 800e6c4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800e6c8:	e0bffe17 	ldw	r2,-8(fp)
 800e6cc:	00bfce16 	blt	zero,r2,800e608 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 800e6d0:	e0fff517 	ldw	r3,-44(fp)
 800e6d4:	e0bffd17 	ldw	r2,-12(fp)
 800e6d8:	18800126 	beq	r3,r2,800e6e0 <altera_avalon_jtag_uart_read+0x104>
      break;
 800e6dc:	00001506 	br	800e734 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800e6e0:	e0bfff17 	ldw	r2,-4(fp)
 800e6e4:	1090000c 	andi	r2,r2,16384
 800e6e8:	10000126 	beq	r2,zero,800e6f0 <altera_avalon_jtag_uart_read+0x114>
      break;
 800e6ec:	00001106 	br	800e734 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800e6f0:	0001883a 	nop
 800e6f4:	e0bffc17 	ldw	r2,-16(fp)
 800e6f8:	10c00a17 	ldw	r3,40(r2)
 800e6fc:	e0bff717 	ldw	r2,-36(fp)
 800e700:	1880051e 	bne	r3,r2,800e718 <altera_avalon_jtag_uart_read+0x13c>
 800e704:	e0bffc17 	ldw	r2,-16(fp)
 800e708:	10c00917 	ldw	r3,36(r2)
 800e70c:	e0bffc17 	ldw	r2,-16(fp)
 800e710:	10800117 	ldw	r2,4(r2)
 800e714:	18bff736 	bltu	r3,r2,800e6f4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800e718:	e0bffc17 	ldw	r2,-16(fp)
 800e71c:	10c00a17 	ldw	r3,40(r2)
 800e720:	e0bff717 	ldw	r2,-36(fp)
 800e724:	1880011e 	bne	r3,r2,800e72c <altera_avalon_jtag_uart_read+0x150>
      break;
 800e728:	00000206 	br	800e734 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800e72c:	e0bffe17 	ldw	r2,-8(fp)
 800e730:	00bfb516 	blt	zero,r2,800e608 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800e734:	e0fff517 	ldw	r3,-44(fp)
 800e738:	e0bffd17 	ldw	r2,-12(fp)
 800e73c:	18801826 	beq	r3,r2,800e7a0 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e740:	0005303a 	rdctl	r2,status
 800e744:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e748:	e0fffa17 	ldw	r3,-24(fp)
 800e74c:	00bfff84 	movi	r2,-2
 800e750:	1884703a 	and	r2,r3,r2
 800e754:	1001703a 	wrctl	status,r2
  
  return context;
 800e758:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800e75c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800e760:	e0bffc17 	ldw	r2,-16(fp)
 800e764:	10800817 	ldw	r2,32(r2)
 800e768:	10c00054 	ori	r3,r2,1
 800e76c:	e0bffc17 	ldw	r2,-16(fp)
 800e770:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800e774:	e0bffc17 	ldw	r2,-16(fp)
 800e778:	10800017 	ldw	r2,0(r2)
 800e77c:	10800104 	addi	r2,r2,4
 800e780:	1007883a 	mov	r3,r2
 800e784:	e0bffc17 	ldw	r2,-16(fp)
 800e788:	10800817 	ldw	r2,32(r2)
 800e78c:	18800035 	stwio	r2,0(r3)
 800e790:	e0bff917 	ldw	r2,-28(fp)
 800e794:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e798:	e0bffb17 	ldw	r2,-20(fp)
 800e79c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800e7a0:	e0fff517 	ldw	r3,-44(fp)
 800e7a4:	e0bffd17 	ldw	r2,-12(fp)
 800e7a8:	18800426 	beq	r3,r2,800e7bc <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 800e7ac:	e0fff517 	ldw	r3,-44(fp)
 800e7b0:	e0bffd17 	ldw	r2,-12(fp)
 800e7b4:	1885c83a 	sub	r2,r3,r2
 800e7b8:	00000606 	br	800e7d4 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 800e7bc:	e0bfff17 	ldw	r2,-4(fp)
 800e7c0:	1090000c 	andi	r2,r2,16384
 800e7c4:	10000226 	beq	r2,zero,800e7d0 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 800e7c8:	00bffd44 	movi	r2,-11
 800e7cc:	00000106 	br	800e7d4 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 800e7d0:	00bffec4 	movi	r2,-5
}
 800e7d4:	e037883a 	mov	sp,fp
 800e7d8:	dfc00117 	ldw	ra,4(sp)
 800e7dc:	df000017 	ldw	fp,0(sp)
 800e7e0:	dec00204 	addi	sp,sp,8
 800e7e4:	f800283a 	ret

0800e7e8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800e7e8:	defff304 	addi	sp,sp,-52
 800e7ec:	dfc00c15 	stw	ra,48(sp)
 800e7f0:	df000b15 	stw	fp,44(sp)
 800e7f4:	df000b04 	addi	fp,sp,44
 800e7f8:	e13ffc15 	stw	r4,-16(fp)
 800e7fc:	e17ffd15 	stw	r5,-12(fp)
 800e800:	e1bffe15 	stw	r6,-8(fp)
 800e804:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800e808:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800e80c:	e0bffd17 	ldw	r2,-12(fp)
 800e810:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800e814:	00003806 	br	800e8f8 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800e818:	e0bffc17 	ldw	r2,-16(fp)
 800e81c:	10800c17 	ldw	r2,48(r2)
 800e820:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 800e824:	e0bffc17 	ldw	r2,-16(fp)
 800e828:	10800d17 	ldw	r2,52(r2)
 800e82c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800e830:	e0fff817 	ldw	r3,-32(fp)
 800e834:	e0bff517 	ldw	r2,-44(fp)
 800e838:	1880062e 	bgeu	r3,r2,800e854 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800e83c:	e0fff517 	ldw	r3,-44(fp)
 800e840:	e0bff817 	ldw	r2,-32(fp)
 800e844:	1885c83a 	sub	r2,r3,r2
 800e848:	10bfffc4 	addi	r2,r2,-1
 800e84c:	e0bff615 	stw	r2,-40(fp)
 800e850:	00000b06 	br	800e880 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800e854:	e0bff517 	ldw	r2,-44(fp)
 800e858:	10000526 	beq	r2,zero,800e870 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800e85c:	00c20004 	movi	r3,2048
 800e860:	e0bff817 	ldw	r2,-32(fp)
 800e864:	1885c83a 	sub	r2,r3,r2
 800e868:	e0bff615 	stw	r2,-40(fp)
 800e86c:	00000406 	br	800e880 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800e870:	00c1ffc4 	movi	r3,2047
 800e874:	e0bff817 	ldw	r2,-32(fp)
 800e878:	1885c83a 	sub	r2,r3,r2
 800e87c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800e880:	e0bff617 	ldw	r2,-40(fp)
 800e884:	1000011e 	bne	r2,zero,800e88c <altera_avalon_jtag_uart_write+0xa4>
        break;
 800e888:	00001d06 	br	800e900 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 800e88c:	e0fffe17 	ldw	r3,-8(fp)
 800e890:	e0bff617 	ldw	r2,-40(fp)
 800e894:	1880022e 	bgeu	r3,r2,800e8a0 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 800e898:	e0bffe17 	ldw	r2,-8(fp)
 800e89c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800e8a0:	e0bff817 	ldw	r2,-32(fp)
 800e8a4:	10820e04 	addi	r2,r2,2104
 800e8a8:	e0fffc17 	ldw	r3,-16(fp)
 800e8ac:	1885883a 	add	r2,r3,r2
 800e8b0:	1009883a 	mov	r4,r2
 800e8b4:	e17ffd17 	ldw	r5,-12(fp)
 800e8b8:	e1bff617 	ldw	r6,-40(fp)
 800e8bc:	80060400 	call	8006040 <memcpy>
      ptr   += n;
 800e8c0:	e0fffd17 	ldw	r3,-12(fp)
 800e8c4:	e0bff617 	ldw	r2,-40(fp)
 800e8c8:	1885883a 	add	r2,r3,r2
 800e8cc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800e8d0:	e0fffe17 	ldw	r3,-8(fp)
 800e8d4:	e0bff617 	ldw	r2,-40(fp)
 800e8d8:	1885c83a 	sub	r2,r3,r2
 800e8dc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e8e0:	e0fff817 	ldw	r3,-32(fp)
 800e8e4:	e0bff617 	ldw	r2,-40(fp)
 800e8e8:	1885883a 	add	r2,r3,r2
 800e8ec:	10c1ffcc 	andi	r3,r2,2047
 800e8f0:	e0bffc17 	ldw	r2,-16(fp)
 800e8f4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800e8f8:	e0bffe17 	ldw	r2,-8(fp)
 800e8fc:	00bfc616 	blt	zero,r2,800e818 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e900:	0005303a 	rdctl	r2,status
 800e904:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e908:	e0fffa17 	ldw	r3,-24(fp)
 800e90c:	00bfff84 	movi	r2,-2
 800e910:	1884703a 	and	r2,r3,r2
 800e914:	1001703a 	wrctl	status,r2
  
  return context;
 800e918:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800e91c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800e920:	e0bffc17 	ldw	r2,-16(fp)
 800e924:	10800817 	ldw	r2,32(r2)
 800e928:	10c00094 	ori	r3,r2,2
 800e92c:	e0bffc17 	ldw	r2,-16(fp)
 800e930:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800e934:	e0bffc17 	ldw	r2,-16(fp)
 800e938:	10800017 	ldw	r2,0(r2)
 800e93c:	10800104 	addi	r2,r2,4
 800e940:	1007883a 	mov	r3,r2
 800e944:	e0bffc17 	ldw	r2,-16(fp)
 800e948:	10800817 	ldw	r2,32(r2)
 800e94c:	18800035 	stwio	r2,0(r3)
 800e950:	e0bff917 	ldw	r2,-28(fp)
 800e954:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e958:	e0bffb17 	ldw	r2,-20(fp)
 800e95c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800e960:	e0bffe17 	ldw	r2,-8(fp)
 800e964:	0080120e 	bge	zero,r2,800e9b0 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 800e968:	e0bfff17 	ldw	r2,-4(fp)
 800e96c:	1090000c 	andi	r2,r2,16384
 800e970:	10000126 	beq	r2,zero,800e978 <altera_avalon_jtag_uart_write+0x190>
        break;
 800e974:	00001006 	br	800e9b8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800e978:	0001883a 	nop
 800e97c:	e0bffc17 	ldw	r2,-16(fp)
 800e980:	10c00d17 	ldw	r3,52(r2)
 800e984:	e0bff517 	ldw	r2,-44(fp)
 800e988:	1880051e 	bne	r3,r2,800e9a0 <altera_avalon_jtag_uart_write+0x1b8>
 800e98c:	e0bffc17 	ldw	r2,-16(fp)
 800e990:	10c00917 	ldw	r3,36(r2)
 800e994:	e0bffc17 	ldw	r2,-16(fp)
 800e998:	10800117 	ldw	r2,4(r2)
 800e99c:	18bff736 	bltu	r3,r2,800e97c <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800e9a0:	e0bffc17 	ldw	r2,-16(fp)
 800e9a4:	10800917 	ldw	r2,36(r2)
 800e9a8:	10000126 	beq	r2,zero,800e9b0 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 800e9ac:	00000206 	br	800e9b8 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 800e9b0:	e0bffe17 	ldw	r2,-8(fp)
 800e9b4:	00bf9716 	blt	zero,r2,800e814 <altera_avalon_jtag_uart_write+0x2c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800e9b8:	e0fffd17 	ldw	r3,-12(fp)
 800e9bc:	e0bff717 	ldw	r2,-36(fp)
 800e9c0:	18800426 	beq	r3,r2,800e9d4 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 800e9c4:	e0fffd17 	ldw	r3,-12(fp)
 800e9c8:	e0bff717 	ldw	r2,-36(fp)
 800e9cc:	1885c83a 	sub	r2,r3,r2
 800e9d0:	00000606 	br	800e9ec <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 800e9d4:	e0bfff17 	ldw	r2,-4(fp)
 800e9d8:	1090000c 	andi	r2,r2,16384
 800e9dc:	10000226 	beq	r2,zero,800e9e8 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 800e9e0:	00bffd44 	movi	r2,-11
 800e9e4:	00000106 	br	800e9ec <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800e9e8:	00bffec4 	movi	r2,-5
}
 800e9ec:	e037883a 	mov	sp,fp
 800e9f0:	dfc00117 	ldw	ra,4(sp)
 800e9f4:	df000017 	ldw	fp,0(sp)
 800e9f8:	dec00204 	addi	sp,sp,8
 800e9fc:	f800283a 	ret

0800ea00 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 800ea00:	defffa04 	addi	sp,sp,-24
 800ea04:	dfc00515 	stw	ra,20(sp)
 800ea08:	df000415 	stw	fp,16(sp)
 800ea0c:	df000404 	addi	fp,sp,16
 800ea10:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 800ea14:	0007883a 	mov	r3,zero
 800ea18:	e0bfff17 	ldw	r2,-4(fp)
 800ea1c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 800ea20:	e0bfff17 	ldw	r2,-4(fp)
 800ea24:	10800104 	addi	r2,r2,4
 800ea28:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ea2c:	0005303a 	rdctl	r2,status
 800ea30:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ea34:	e0fffd17 	ldw	r3,-12(fp)
 800ea38:	00bfff84 	movi	r2,-2
 800ea3c:	1884703a 	and	r2,r3,r2
 800ea40:	1001703a 	wrctl	status,r2
  
  return context;
 800ea44:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 800ea48:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 800ea4c:	800f7000 	call	800f700 <alt_tick>
 800ea50:	e0bffc17 	ldw	r2,-16(fp)
 800ea54:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ea58:	e0bffe17 	ldw	r2,-8(fp)
 800ea5c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 800ea60:	e037883a 	mov	sp,fp
 800ea64:	dfc00117 	ldw	ra,4(sp)
 800ea68:	df000017 	ldw	fp,0(sp)
 800ea6c:	dec00204 	addi	sp,sp,8
 800ea70:	f800283a 	ret

0800ea74 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 800ea74:	defff804 	addi	sp,sp,-32
 800ea78:	dfc00715 	stw	ra,28(sp)
 800ea7c:	df000615 	stw	fp,24(sp)
 800ea80:	df000604 	addi	fp,sp,24
 800ea84:	e13ffc15 	stw	r4,-16(fp)
 800ea88:	e17ffd15 	stw	r5,-12(fp)
 800ea8c:	e1bffe15 	stw	r6,-8(fp)
 800ea90:	e1ffff15 	stw	r7,-4(fp)
 800ea94:	e0bfff17 	ldw	r2,-4(fp)
 800ea98:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 800ea9c:	00820074 	movhi	r2,2049
 800eaa0:	108e0804 	addi	r2,r2,14368
 800eaa4:	10800017 	ldw	r2,0(r2)
 800eaa8:	1000041e 	bne	r2,zero,800eabc <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 800eaac:	00820074 	movhi	r2,2049
 800eab0:	108e0804 	addi	r2,r2,14368
 800eab4:	e0fffb17 	ldw	r3,-20(fp)
 800eab8:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 800eabc:	e0bffc17 	ldw	r2,-16(fp)
 800eac0:	10800104 	addi	r2,r2,4
 800eac4:	00c001c4 	movi	r3,7
 800eac8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 800eacc:	d8000015 	stw	zero,0(sp)
 800ead0:	e13ffd17 	ldw	r4,-12(fp)
 800ead4:	e17ffe17 	ldw	r5,-8(fp)
 800ead8:	01820074 	movhi	r6,2049
 800eadc:	31ba8004 	addi	r6,r6,-5632
 800eae0:	e1fffc17 	ldw	r7,-16(fp)
 800eae4:	800ef9c0 	call	800ef9c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 800eae8:	e037883a 	mov	sp,fp
 800eaec:	dfc00117 	ldw	ra,4(sp)
 800eaf0:	df000017 	ldw	fp,0(sp)
 800eaf4:	dec00204 	addi	sp,sp,8
 800eaf8:	f800283a 	ret

0800eafc <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
 800eafc:	defffe04 	addi	sp,sp,-8
 800eb00:	df000115 	stw	fp,4(sp)
 800eb04:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
 800eb08:	00820074 	movhi	r2,2049
 800eb0c:	108e0504 	addi	r2,r2,14356
 800eb10:	10800017 	ldw	r2,0(r2)
 800eb14:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
 800eb18:	00820074 	movhi	r2,2049
 800eb1c:	108e0604 	addi	r2,r2,14360
 800eb20:	10800017 	ldw	r2,0(r2)
 800eb24:	1000021e 	bne	r2,zero,800eb30 <alt_timestamp_start+0x34>
  {
    return -1;
 800eb28:	00bfffc4 	movi	r2,-1
 800eb2c:	00001106 	br	800eb74 <alt_timestamp_start+0x78>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
 800eb30:	e0bfff17 	ldw	r2,-4(fp)
 800eb34:	10800104 	addi	r2,r2,4
 800eb38:	00c00204 	movi	r3,8
 800eb3c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
 800eb40:	e0bfff17 	ldw	r2,-4(fp)
 800eb44:	10800204 	addi	r2,r2,8
 800eb48:	00ffffd4 	movui	r3,65535
 800eb4c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
 800eb50:	e0bfff17 	ldw	r2,-4(fp)
 800eb54:	10800304 	addi	r2,r2,12
 800eb58:	00ffffd4 	movui	r3,65535
 800eb5c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
 800eb60:	e0bfff17 	ldw	r2,-4(fp)
 800eb64:	10800104 	addi	r2,r2,4
 800eb68:	00c00104 	movi	r3,4
 800eb6c:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
 800eb70:	0005883a 	mov	r2,zero
}
 800eb74:	e037883a 	mov	sp,fp
 800eb78:	df000017 	ldw	fp,0(sp)
 800eb7c:	dec00104 	addi	sp,sp,4
 800eb80:	f800283a 	ret

0800eb84 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
 800eb84:	defffc04 	addi	sp,sp,-16
 800eb88:	df000315 	stw	fp,12(sp)
 800eb8c:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
 800eb90:	00820074 	movhi	r2,2049
 800eb94:	108e0504 	addi	r2,r2,14356
 800eb98:	10800017 	ldw	r2,0(r2)
 800eb9c:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
 800eba0:	00820074 	movhi	r2,2049
 800eba4:	108e0604 	addi	r2,r2,14360
 800eba8:	10800017 	ldw	r2,0(r2)
 800ebac:	1000021e 	bne	r2,zero,800ebb8 <alt_timestamp+0x34>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
 800ebb0:	00bfffc4 	movi	r2,-1
 800ebb4:	00001306 	br	800ec04 <alt_timestamp+0x80>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
 800ebb8:	e0bffd17 	ldw	r2,-12(fp)
 800ebbc:	10800404 	addi	r2,r2,16
 800ebc0:	0007883a 	mov	r3,zero
 800ebc4:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
 800ebc8:	e0bffd17 	ldw	r2,-12(fp)
 800ebcc:	10800404 	addi	r2,r2,16
 800ebd0:	10800037 	ldwio	r2,0(r2)
 800ebd4:	10bfffcc 	andi	r2,r2,65535
 800ebd8:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
 800ebdc:	e0bffd17 	ldw	r2,-12(fp)
 800ebe0:	10800504 	addi	r2,r2,20
 800ebe4:	10800037 	ldwio	r2,0(r2)
 800ebe8:	10bfffcc 	andi	r2,r2,65535
 800ebec:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
 800ebf0:	e0bfff17 	ldw	r2,-4(fp)
 800ebf4:	1006943a 	slli	r3,r2,16
 800ebf8:	e0bffe17 	ldw	r2,-8(fp)
 800ebfc:	1884b03a 	or	r2,r3,r2
 800ec00:	0084303a 	nor	r2,zero,r2
#endif
  }
}
 800ec04:	e037883a 	mov	sp,fp
 800ec08:	df000017 	ldw	fp,0(sp)
 800ec0c:	dec00104 	addi	sp,sp,4
 800ec10:	f800283a 	ret

0800ec14 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
 800ec14:	deffff04 	addi	sp,sp,-4
 800ec18:	df000015 	stw	fp,0(sp)
 800ec1c:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
 800ec20:	00820074 	movhi	r2,2049
 800ec24:	108e0604 	addi	r2,r2,14360
 800ec28:	10800017 	ldw	r2,0(r2)
}
 800ec2c:	e037883a 	mov	sp,fp
 800ec30:	df000017 	ldw	fp,0(sp)
 800ec34:	dec00104 	addi	sp,sp,4
 800ec38:	f800283a 	ret

0800ec3c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800ec3c:	defff504 	addi	sp,sp,-44
 800ec40:	df000a15 	stw	fp,40(sp)
 800ec44:	df000a04 	addi	fp,sp,40
 800ec48:	e13ffc15 	stw	r4,-16(fp)
 800ec4c:	e17ffd15 	stw	r5,-12(fp)
 800ec50:	e1bffe15 	stw	r6,-8(fp)
 800ec54:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800ec58:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800ec5c:	00820074 	movhi	r2,2049
 800ec60:	108e0804 	addi	r2,r2,14368
 800ec64:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 800ec68:	10003f26 	beq	r2,zero,800ed68 <alt_alarm_start+0x12c>
  {
    if (alarm)
 800ec6c:	e0bffc17 	ldw	r2,-16(fp)
 800ec70:	10003b26 	beq	r2,zero,800ed60 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 800ec74:	e0bffc17 	ldw	r2,-16(fp)
 800ec78:	e0fffe17 	ldw	r3,-8(fp)
 800ec7c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 800ec80:	e0bffc17 	ldw	r2,-16(fp)
 800ec84:	e0ffff17 	ldw	r3,-4(fp)
 800ec88:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ec8c:	0005303a 	rdctl	r2,status
 800ec90:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ec94:	e0fff817 	ldw	r3,-32(fp)
 800ec98:	00bfff84 	movi	r2,-2
 800ec9c:	1884703a 	and	r2,r3,r2
 800eca0:	1001703a 	wrctl	status,r2
  
  return context;
 800eca4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 800eca8:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800ecac:	00820074 	movhi	r2,2049
 800ecb0:	108e0904 	addi	r2,r2,14372
 800ecb4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 800ecb8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800ecbc:	e0fffd17 	ldw	r3,-12(fp)
 800ecc0:	e0bff617 	ldw	r2,-40(fp)
 800ecc4:	1885883a 	add	r2,r3,r2
 800ecc8:	10c00044 	addi	r3,r2,1
 800eccc:	e0bffc17 	ldw	r2,-16(fp)
 800ecd0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800ecd4:	e0bffc17 	ldw	r2,-16(fp)
 800ecd8:	10c00217 	ldw	r3,8(r2)
 800ecdc:	e0bff617 	ldw	r2,-40(fp)
 800ece0:	1880042e 	bgeu	r3,r2,800ecf4 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 800ece4:	e0bffc17 	ldw	r2,-16(fp)
 800ece8:	00c00044 	movi	r3,1
 800ecec:	10c00405 	stb	r3,16(r2)
 800ecf0:	00000206 	br	800ecfc <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 800ecf4:	e0bffc17 	ldw	r2,-16(fp)
 800ecf8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 800ecfc:	e0fffc17 	ldw	r3,-16(fp)
 800ed00:	00820074 	movhi	r2,2049
 800ed04:	10873e04 	addi	r2,r2,7416
 800ed08:	e0bff915 	stw	r2,-28(fp)
 800ed0c:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800ed10:	e0bffa17 	ldw	r2,-24(fp)
 800ed14:	e0fff917 	ldw	r3,-28(fp)
 800ed18:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800ed1c:	e0bff917 	ldw	r2,-28(fp)
 800ed20:	10c00017 	ldw	r3,0(r2)
 800ed24:	e0bffa17 	ldw	r2,-24(fp)
 800ed28:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800ed2c:	e0bff917 	ldw	r2,-28(fp)
 800ed30:	10800017 	ldw	r2,0(r2)
 800ed34:	e0fffa17 	ldw	r3,-24(fp)
 800ed38:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800ed3c:	e0bff917 	ldw	r2,-28(fp)
 800ed40:	e0fffa17 	ldw	r3,-24(fp)
 800ed44:	10c00015 	stw	r3,0(r2)
 800ed48:	e0bff717 	ldw	r2,-36(fp)
 800ed4c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ed50:	e0bffb17 	ldw	r2,-20(fp)
 800ed54:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800ed58:	0005883a 	mov	r2,zero
 800ed5c:	00000306 	br	800ed6c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 800ed60:	00bffa84 	movi	r2,-22
 800ed64:	00000106 	br	800ed6c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 800ed68:	00bfde84 	movi	r2,-134
  }
}
 800ed6c:	e037883a 	mov	sp,fp
 800ed70:	df000017 	ldw	fp,0(sp)
 800ed74:	dec00104 	addi	sp,sp,4
 800ed78:	f800283a 	ret

0800ed7c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800ed7c:	defffe04 	addi	sp,sp,-8
 800ed80:	df000115 	stw	fp,4(sp)
 800ed84:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 800ed88:	e03fff15 	stw	zero,-4(fp)
 800ed8c:	00000506 	br	800eda4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 800ed90:	e0bfff17 	ldw	r2,-4(fp)
 800ed94:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 800ed98:	e0bfff17 	ldw	r2,-4(fp)
 800ed9c:	10800804 	addi	r2,r2,32
 800eda0:	e0bfff15 	stw	r2,-4(fp)
 800eda4:	e0bfff17 	ldw	r2,-4(fp)
 800eda8:	10820030 	cmpltui	r2,r2,2048
 800edac:	103ff81e 	bne	r2,zero,800ed90 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 800edb0:	e037883a 	mov	sp,fp
 800edb4:	df000017 	ldw	fp,0(sp)
 800edb8:	dec00104 	addi	sp,sp,4
 800edbc:	f800283a 	ret

0800edc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800edc0:	defffe04 	addi	sp,sp,-8
 800edc4:	dfc00115 	stw	ra,4(sp)
 800edc8:	df000015 	stw	fp,0(sp)
 800edcc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800edd0:	00820074 	movhi	r2,2049
 800edd4:	10873b04 	addi	r2,r2,7404
 800edd8:	10800017 	ldw	r2,0(r2)
 800eddc:	10000526 	beq	r2,zero,800edf4 <alt_get_errno+0x34>
 800ede0:	00820074 	movhi	r2,2049
 800ede4:	10873b04 	addi	r2,r2,7404
 800ede8:	10800017 	ldw	r2,0(r2)
 800edec:	103ee83a 	callr	r2
 800edf0:	00000206 	br	800edfc <alt_get_errno+0x3c>
 800edf4:	00820074 	movhi	r2,2049
 800edf8:	108e0104 	addi	r2,r2,14340
}
 800edfc:	e037883a 	mov	sp,fp
 800ee00:	dfc00117 	ldw	ra,4(sp)
 800ee04:	df000017 	ldw	fp,0(sp)
 800ee08:	dec00204 	addi	sp,sp,8
 800ee0c:	f800283a 	ret

0800ee10 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800ee10:	defffa04 	addi	sp,sp,-24
 800ee14:	dfc00515 	stw	ra,20(sp)
 800ee18:	df000415 	stw	fp,16(sp)
 800ee1c:	df000404 	addi	fp,sp,16
 800ee20:	e13ffe15 	stw	r4,-8(fp)
 800ee24:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 800ee28:	e0bffe17 	ldw	r2,-8(fp)
 800ee2c:	10000326 	beq	r2,zero,800ee3c <alt_dev_llist_insert+0x2c>
 800ee30:	e0bffe17 	ldw	r2,-8(fp)
 800ee34:	10800217 	ldw	r2,8(r2)
 800ee38:	1000061e 	bne	r2,zero,800ee54 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 800ee3c:	800edc00 	call	800edc0 <alt_get_errno>
 800ee40:	1007883a 	mov	r3,r2
 800ee44:	00800584 	movi	r2,22
 800ee48:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 800ee4c:	00bffa84 	movi	r2,-22
 800ee50:	00001306 	br	800eea0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 800ee54:	e0bffe17 	ldw	r2,-8(fp)
 800ee58:	e0ffff17 	ldw	r3,-4(fp)
 800ee5c:	e0fffc15 	stw	r3,-16(fp)
 800ee60:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800ee64:	e0bffd17 	ldw	r2,-12(fp)
 800ee68:	e0fffc17 	ldw	r3,-16(fp)
 800ee6c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800ee70:	e0bffc17 	ldw	r2,-16(fp)
 800ee74:	10c00017 	ldw	r3,0(r2)
 800ee78:	e0bffd17 	ldw	r2,-12(fp)
 800ee7c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800ee80:	e0bffc17 	ldw	r2,-16(fp)
 800ee84:	10800017 	ldw	r2,0(r2)
 800ee88:	e0fffd17 	ldw	r3,-12(fp)
 800ee8c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800ee90:	e0bffc17 	ldw	r2,-16(fp)
 800ee94:	e0fffd17 	ldw	r3,-12(fp)
 800ee98:	10c00015 	stw	r3,0(r2)

  return 0;  
 800ee9c:	0005883a 	mov	r2,zero
}
 800eea0:	e037883a 	mov	sp,fp
 800eea4:	dfc00117 	ldw	ra,4(sp)
 800eea8:	df000017 	ldw	fp,0(sp)
 800eeac:	dec00204 	addi	sp,sp,8
 800eeb0:	f800283a 	ret

0800eeb4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 800eeb4:	defffd04 	addi	sp,sp,-12
 800eeb8:	dfc00215 	stw	ra,8(sp)
 800eebc:	df000115 	stw	fp,4(sp)
 800eec0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800eec4:	00820074 	movhi	r2,2049
 800eec8:	10bfb204 	addi	r2,r2,-312
 800eecc:	e0bfff15 	stw	r2,-4(fp)
 800eed0:	00000606 	br	800eeec <_do_ctors+0x38>
        (*ctor) (); 
 800eed4:	e0bfff17 	ldw	r2,-4(fp)
 800eed8:	10800017 	ldw	r2,0(r2)
 800eedc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800eee0:	e0bfff17 	ldw	r2,-4(fp)
 800eee4:	10bfff04 	addi	r2,r2,-4
 800eee8:	e0bfff15 	stw	r2,-4(fp)
 800eeec:	e0ffff17 	ldw	r3,-4(fp)
 800eef0:	00820074 	movhi	r2,2049
 800eef4:	10bfb304 	addi	r2,r2,-308
 800eef8:	18bff62e 	bgeu	r3,r2,800eed4 <_do_ctors+0x20>
        (*ctor) (); 
}
 800eefc:	e037883a 	mov	sp,fp
 800ef00:	dfc00117 	ldw	ra,4(sp)
 800ef04:	df000017 	ldw	fp,0(sp)
 800ef08:	dec00204 	addi	sp,sp,8
 800ef0c:	f800283a 	ret

0800ef10 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 800ef10:	defffd04 	addi	sp,sp,-12
 800ef14:	dfc00215 	stw	ra,8(sp)
 800ef18:	df000115 	stw	fp,4(sp)
 800ef1c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800ef20:	00820074 	movhi	r2,2049
 800ef24:	10bfb204 	addi	r2,r2,-312
 800ef28:	e0bfff15 	stw	r2,-4(fp)
 800ef2c:	00000606 	br	800ef48 <_do_dtors+0x38>
        (*dtor) (); 
 800ef30:	e0bfff17 	ldw	r2,-4(fp)
 800ef34:	10800017 	ldw	r2,0(r2)
 800ef38:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800ef3c:	e0bfff17 	ldw	r2,-4(fp)
 800ef40:	10bfff04 	addi	r2,r2,-4
 800ef44:	e0bfff15 	stw	r2,-4(fp)
 800ef48:	e0ffff17 	ldw	r3,-4(fp)
 800ef4c:	00820074 	movhi	r2,2049
 800ef50:	10bfb304 	addi	r2,r2,-308
 800ef54:	18bff62e 	bgeu	r3,r2,800ef30 <_do_dtors+0x20>
        (*dtor) (); 
}
 800ef58:	e037883a 	mov	sp,fp
 800ef5c:	dfc00117 	ldw	ra,4(sp)
 800ef60:	df000017 	ldw	fp,0(sp)
 800ef64:	dec00204 	addi	sp,sp,8
 800ef68:	f800283a 	ret

0800ef6c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800ef6c:	defffe04 	addi	sp,sp,-8
 800ef70:	dfc00115 	stw	ra,4(sp)
 800ef74:	df000015 	stw	fp,0(sp)
 800ef78:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 800ef7c:	0009883a 	mov	r4,zero
 800ef80:	01440004 	movi	r5,4096
 800ef84:	800fa9c0 	call	800fa9c <alt_icache_flush>
#endif
}
 800ef88:	e037883a 	mov	sp,fp
 800ef8c:	dfc00117 	ldw	ra,4(sp)
 800ef90:	df000017 	ldw	fp,0(sp)
 800ef94:	dec00204 	addi	sp,sp,8
 800ef98:	f800283a 	ret

0800ef9c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800ef9c:	defff904 	addi	sp,sp,-28
 800efa0:	dfc00615 	stw	ra,24(sp)
 800efa4:	df000515 	stw	fp,20(sp)
 800efa8:	df000504 	addi	fp,sp,20
 800efac:	e13ffc15 	stw	r4,-16(fp)
 800efb0:	e17ffd15 	stw	r5,-12(fp)
 800efb4:	e1bffe15 	stw	r6,-8(fp)
 800efb8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 800efbc:	e0800217 	ldw	r2,8(fp)
 800efc0:	d8800015 	stw	r2,0(sp)
 800efc4:	e13ffc17 	ldw	r4,-16(fp)
 800efc8:	e17ffd17 	ldw	r5,-12(fp)
 800efcc:	e1bffe17 	ldw	r6,-8(fp)
 800efd0:	e1ffff17 	ldw	r7,-4(fp)
 800efd4:	800f17c0 	call	800f17c <alt_iic_isr_register>
}  
 800efd8:	e037883a 	mov	sp,fp
 800efdc:	dfc00117 	ldw	ra,4(sp)
 800efe0:	df000017 	ldw	fp,0(sp)
 800efe4:	dec00204 	addi	sp,sp,8
 800efe8:	f800283a 	ret

0800efec <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 800efec:	defff904 	addi	sp,sp,-28
 800eff0:	df000615 	stw	fp,24(sp)
 800eff4:	df000604 	addi	fp,sp,24
 800eff8:	e13ffe15 	stw	r4,-8(fp)
 800effc:	e17fff15 	stw	r5,-4(fp)
 800f000:	e0bfff17 	ldw	r2,-4(fp)
 800f004:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f008:	0005303a 	rdctl	r2,status
 800f00c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f010:	e0fffb17 	ldw	r3,-20(fp)
 800f014:	00bfff84 	movi	r2,-2
 800f018:	1884703a 	and	r2,r3,r2
 800f01c:	1001703a 	wrctl	status,r2
  
  return context;
 800f020:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800f024:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 800f028:	e0bffa17 	ldw	r2,-24(fp)
 800f02c:	00c00044 	movi	r3,1
 800f030:	1884983a 	sll	r2,r3,r2
 800f034:	1007883a 	mov	r3,r2
 800f038:	00820074 	movhi	r2,2049
 800f03c:	108e0704 	addi	r2,r2,14364
 800f040:	10800017 	ldw	r2,0(r2)
 800f044:	1886b03a 	or	r3,r3,r2
 800f048:	00820074 	movhi	r2,2049
 800f04c:	108e0704 	addi	r2,r2,14364
 800f050:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800f054:	00820074 	movhi	r2,2049
 800f058:	108e0704 	addi	r2,r2,14364
 800f05c:	10800017 	ldw	r2,0(r2)
 800f060:	100170fa 	wrctl	ienable,r2
 800f064:	e0bffc17 	ldw	r2,-16(fp)
 800f068:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f06c:	e0bffd17 	ldw	r2,-12(fp)
 800f070:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800f074:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 800f078:	0001883a 	nop
}
 800f07c:	e037883a 	mov	sp,fp
 800f080:	df000017 	ldw	fp,0(sp)
 800f084:	dec00104 	addi	sp,sp,4
 800f088:	f800283a 	ret

0800f08c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 800f08c:	defff904 	addi	sp,sp,-28
 800f090:	df000615 	stw	fp,24(sp)
 800f094:	df000604 	addi	fp,sp,24
 800f098:	e13ffe15 	stw	r4,-8(fp)
 800f09c:	e17fff15 	stw	r5,-4(fp)
 800f0a0:	e0bfff17 	ldw	r2,-4(fp)
 800f0a4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f0a8:	0005303a 	rdctl	r2,status
 800f0ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f0b0:	e0fffb17 	ldw	r3,-20(fp)
 800f0b4:	00bfff84 	movi	r2,-2
 800f0b8:	1884703a 	and	r2,r3,r2
 800f0bc:	1001703a 	wrctl	status,r2
  
  return context;
 800f0c0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800f0c4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 800f0c8:	e0bffa17 	ldw	r2,-24(fp)
 800f0cc:	00c00044 	movi	r3,1
 800f0d0:	1884983a 	sll	r2,r3,r2
 800f0d4:	0084303a 	nor	r2,zero,r2
 800f0d8:	1007883a 	mov	r3,r2
 800f0dc:	00820074 	movhi	r2,2049
 800f0e0:	108e0704 	addi	r2,r2,14364
 800f0e4:	10800017 	ldw	r2,0(r2)
 800f0e8:	1886703a 	and	r3,r3,r2
 800f0ec:	00820074 	movhi	r2,2049
 800f0f0:	108e0704 	addi	r2,r2,14364
 800f0f4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800f0f8:	00820074 	movhi	r2,2049
 800f0fc:	108e0704 	addi	r2,r2,14364
 800f100:	10800017 	ldw	r2,0(r2)
 800f104:	100170fa 	wrctl	ienable,r2
 800f108:	e0bffc17 	ldw	r2,-16(fp)
 800f10c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f110:	e0bffd17 	ldw	r2,-12(fp)
 800f114:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800f118:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 800f11c:	0001883a 	nop
}
 800f120:	e037883a 	mov	sp,fp
 800f124:	df000017 	ldw	fp,0(sp)
 800f128:	dec00104 	addi	sp,sp,4
 800f12c:	f800283a 	ret

0800f130 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 800f130:	defffc04 	addi	sp,sp,-16
 800f134:	df000315 	stw	fp,12(sp)
 800f138:	df000304 	addi	fp,sp,12
 800f13c:	e13ffe15 	stw	r4,-8(fp)
 800f140:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 800f144:	000530fa 	rdctl	r2,ienable
 800f148:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 800f14c:	e0bfff17 	ldw	r2,-4(fp)
 800f150:	00c00044 	movi	r3,1
 800f154:	1884983a 	sll	r2,r3,r2
 800f158:	1007883a 	mov	r3,r2
 800f15c:	e0bffd17 	ldw	r2,-12(fp)
 800f160:	1884703a 	and	r2,r3,r2
 800f164:	1004c03a 	cmpne	r2,r2,zero
 800f168:	10803fcc 	andi	r2,r2,255
}
 800f16c:	e037883a 	mov	sp,fp
 800f170:	df000017 	ldw	fp,0(sp)
 800f174:	dec00104 	addi	sp,sp,4
 800f178:	f800283a 	ret

0800f17c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800f17c:	defff504 	addi	sp,sp,-44
 800f180:	dfc00a15 	stw	ra,40(sp)
 800f184:	df000915 	stw	fp,36(sp)
 800f188:	df000904 	addi	fp,sp,36
 800f18c:	e13ffc15 	stw	r4,-16(fp)
 800f190:	e17ffd15 	stw	r5,-12(fp)
 800f194:	e1bffe15 	stw	r6,-8(fp)
 800f198:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 800f19c:	00bffa84 	movi	r2,-22
 800f1a0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 800f1a4:	e0bffd17 	ldw	r2,-12(fp)
 800f1a8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 800f1ac:	e0bff817 	ldw	r2,-32(fp)
 800f1b0:	10800808 	cmpgei	r2,r2,32
 800f1b4:	1000271e 	bne	r2,zero,800f254 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f1b8:	0005303a 	rdctl	r2,status
 800f1bc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f1c0:	e0fffa17 	ldw	r3,-24(fp)
 800f1c4:	00bfff84 	movi	r2,-2
 800f1c8:	1884703a 	and	r2,r3,r2
 800f1cc:	1001703a 	wrctl	status,r2
  
  return context;
 800f1d0:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 800f1d4:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 800f1d8:	00820074 	movhi	r2,2049
 800f1dc:	108e1404 	addi	r2,r2,14416
 800f1e0:	e0fff817 	ldw	r3,-32(fp)
 800f1e4:	180690fa 	slli	r3,r3,3
 800f1e8:	10c5883a 	add	r2,r2,r3
 800f1ec:	e0fffe17 	ldw	r3,-8(fp)
 800f1f0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 800f1f4:	00820074 	movhi	r2,2049
 800f1f8:	108e1404 	addi	r2,r2,14416
 800f1fc:	e0fff817 	ldw	r3,-32(fp)
 800f200:	180690fa 	slli	r3,r3,3
 800f204:	18c00104 	addi	r3,r3,4
 800f208:	10c5883a 	add	r2,r2,r3
 800f20c:	e0ffff17 	ldw	r3,-4(fp)
 800f210:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 800f214:	e0bffe17 	ldw	r2,-8(fp)
 800f218:	10000526 	beq	r2,zero,800f230 <alt_iic_isr_register+0xb4>
 800f21c:	e0bff817 	ldw	r2,-32(fp)
 800f220:	e13ffc17 	ldw	r4,-16(fp)
 800f224:	100b883a 	mov	r5,r2
 800f228:	800efec0 	call	800efec <alt_ic_irq_enable>
 800f22c:	00000406 	br	800f240 <alt_iic_isr_register+0xc4>
 800f230:	e0bff817 	ldw	r2,-32(fp)
 800f234:	e13ffc17 	ldw	r4,-16(fp)
 800f238:	100b883a 	mov	r5,r2
 800f23c:	800f08c0 	call	800f08c <alt_ic_irq_disable>
 800f240:	e0bff715 	stw	r2,-36(fp)
 800f244:	e0bff917 	ldw	r2,-28(fp)
 800f248:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f24c:	e0bffb17 	ldw	r2,-20(fp)
 800f250:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 800f254:	e0bff717 	ldw	r2,-36(fp)
}
 800f258:	e037883a 	mov	sp,fp
 800f25c:	dfc00117 	ldw	ra,4(sp)
 800f260:	df000017 	ldw	fp,0(sp)
 800f264:	dec00204 	addi	sp,sp,8
 800f268:	f800283a 	ret

0800f26c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 800f26c:	defff804 	addi	sp,sp,-32
 800f270:	dfc00715 	stw	ra,28(sp)
 800f274:	df000615 	stw	fp,24(sp)
 800f278:	dc000515 	stw	r16,20(sp)
 800f27c:	df000604 	addi	fp,sp,24
 800f280:	e13ffb15 	stw	r4,-20(fp)
 800f284:	e17ffc15 	stw	r5,-16(fp)
 800f288:	e1bffd15 	stw	r6,-12(fp)
 800f28c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 800f290:	e13ffc17 	ldw	r4,-16(fp)
 800f294:	e17ffd17 	ldw	r5,-12(fp)
 800f298:	e1bffe17 	ldw	r6,-8(fp)
 800f29c:	800f5080 	call	800f508 <open>
 800f2a0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 800f2a4:	e0bffa17 	ldw	r2,-24(fp)
 800f2a8:	10002216 	blt	r2,zero,800f334 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 800f2ac:	04020074 	movhi	r16,2049
 800f2b0:	8402b804 	addi	r16,r16,2784
 800f2b4:	e0bffa17 	ldw	r2,-24(fp)
 800f2b8:	1009883a 	mov	r4,r2
 800f2bc:	01400304 	movi	r5,12
 800f2c0:	80005f80 	call	80005f8 <__mulsi3>
 800f2c4:	8085883a 	add	r2,r16,r2
 800f2c8:	10c00017 	ldw	r3,0(r2)
 800f2cc:	e0bffb17 	ldw	r2,-20(fp)
 800f2d0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 800f2d4:	04020074 	movhi	r16,2049
 800f2d8:	8402b804 	addi	r16,r16,2784
 800f2dc:	e0bffa17 	ldw	r2,-24(fp)
 800f2e0:	1009883a 	mov	r4,r2
 800f2e4:	01400304 	movi	r5,12
 800f2e8:	80005f80 	call	80005f8 <__mulsi3>
 800f2ec:	10800104 	addi	r2,r2,4
 800f2f0:	8085883a 	add	r2,r16,r2
 800f2f4:	10c00017 	ldw	r3,0(r2)
 800f2f8:	e0bffb17 	ldw	r2,-20(fp)
 800f2fc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 800f300:	04020074 	movhi	r16,2049
 800f304:	8402b804 	addi	r16,r16,2784
 800f308:	e0bffa17 	ldw	r2,-24(fp)
 800f30c:	1009883a 	mov	r4,r2
 800f310:	01400304 	movi	r5,12
 800f314:	80005f80 	call	80005f8 <__mulsi3>
 800f318:	10800204 	addi	r2,r2,8
 800f31c:	8085883a 	add	r2,r16,r2
 800f320:	10c00017 	ldw	r3,0(r2)
 800f324:	e0bffb17 	ldw	r2,-20(fp)
 800f328:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 800f32c:	e13ffa17 	ldw	r4,-24(fp)
 800f330:	800dc4c0 	call	800dc4c <alt_release_fd>
  }
} 
 800f334:	e6ffff04 	addi	sp,fp,-4
 800f338:	dfc00217 	ldw	ra,8(sp)
 800f33c:	df000117 	ldw	fp,4(sp)
 800f340:	dc000017 	ldw	r16,0(sp)
 800f344:	dec00304 	addi	sp,sp,12
 800f348:	f800283a 	ret

0800f34c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 800f34c:	defffb04 	addi	sp,sp,-20
 800f350:	dfc00415 	stw	ra,16(sp)
 800f354:	df000315 	stw	fp,12(sp)
 800f358:	df000304 	addi	fp,sp,12
 800f35c:	e13ffd15 	stw	r4,-12(fp)
 800f360:	e17ffe15 	stw	r5,-8(fp)
 800f364:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 800f368:	01020074 	movhi	r4,2049
 800f36c:	2102bb04 	addi	r4,r4,2796
 800f370:	e17ffd17 	ldw	r5,-12(fp)
 800f374:	01800044 	movi	r6,1
 800f378:	01c07fc4 	movi	r7,511
 800f37c:	800f26c0 	call	800f26c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 800f380:	01020074 	movhi	r4,2049
 800f384:	2102b804 	addi	r4,r4,2784
 800f388:	e17ffe17 	ldw	r5,-8(fp)
 800f38c:	000d883a 	mov	r6,zero
 800f390:	01c07fc4 	movi	r7,511
 800f394:	800f26c0 	call	800f26c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 800f398:	01020074 	movhi	r4,2049
 800f39c:	2102be04 	addi	r4,r4,2808
 800f3a0:	e17fff17 	ldw	r5,-4(fp)
 800f3a4:	01800044 	movi	r6,1
 800f3a8:	01c07fc4 	movi	r7,511
 800f3ac:	800f26c0 	call	800f26c <alt_open_fd>
}  
 800f3b0:	e037883a 	mov	sp,fp
 800f3b4:	dfc00117 	ldw	ra,4(sp)
 800f3b8:	df000017 	ldw	fp,0(sp)
 800f3bc:	dec00204 	addi	sp,sp,8
 800f3c0:	f800283a 	ret

0800f3c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f3c4:	defffe04 	addi	sp,sp,-8
 800f3c8:	dfc00115 	stw	ra,4(sp)
 800f3cc:	df000015 	stw	fp,0(sp)
 800f3d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f3d4:	00820074 	movhi	r2,2049
 800f3d8:	10873b04 	addi	r2,r2,7404
 800f3dc:	10800017 	ldw	r2,0(r2)
 800f3e0:	10000526 	beq	r2,zero,800f3f8 <alt_get_errno+0x34>
 800f3e4:	00820074 	movhi	r2,2049
 800f3e8:	10873b04 	addi	r2,r2,7404
 800f3ec:	10800017 	ldw	r2,0(r2)
 800f3f0:	103ee83a 	callr	r2
 800f3f4:	00000206 	br	800f400 <alt_get_errno+0x3c>
 800f3f8:	00820074 	movhi	r2,2049
 800f3fc:	108e0104 	addi	r2,r2,14340
}
 800f400:	e037883a 	mov	sp,fp
 800f404:	dfc00117 	ldw	ra,4(sp)
 800f408:	df000017 	ldw	fp,0(sp)
 800f40c:	dec00204 	addi	sp,sp,8
 800f410:	f800283a 	ret

0800f414 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800f414:	defffb04 	addi	sp,sp,-20
 800f418:	dfc00415 	stw	ra,16(sp)
 800f41c:	df000315 	stw	fp,12(sp)
 800f420:	dc000215 	stw	r16,8(sp)
 800f424:	df000304 	addi	fp,sp,12
 800f428:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800f42c:	e0bffe17 	ldw	r2,-8(fp)
 800f430:	10800217 	ldw	r2,8(r2)
 800f434:	10d00034 	orhi	r3,r2,16384
 800f438:	e0bffe17 	ldw	r2,-8(fp)
 800f43c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800f440:	e03ffd15 	stw	zero,-12(fp)
 800f444:	00002306 	br	800f4d4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800f448:	04020074 	movhi	r16,2049
 800f44c:	8402b804 	addi	r16,r16,2784
 800f450:	e0bffd17 	ldw	r2,-12(fp)
 800f454:	1009883a 	mov	r4,r2
 800f458:	01400304 	movi	r5,12
 800f45c:	80005f80 	call	80005f8 <__mulsi3>
 800f460:	8085883a 	add	r2,r16,r2
 800f464:	10c00017 	ldw	r3,0(r2)
 800f468:	e0bffe17 	ldw	r2,-8(fp)
 800f46c:	10800017 	ldw	r2,0(r2)
 800f470:	1880151e 	bne	r3,r2,800f4c8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800f474:	04020074 	movhi	r16,2049
 800f478:	8402b804 	addi	r16,r16,2784
 800f47c:	e0bffd17 	ldw	r2,-12(fp)
 800f480:	1009883a 	mov	r4,r2
 800f484:	01400304 	movi	r5,12
 800f488:	80005f80 	call	80005f8 <__mulsi3>
 800f48c:	10800204 	addi	r2,r2,8
 800f490:	8085883a 	add	r2,r16,r2
 800f494:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800f498:	10000b0e 	bge	r2,zero,800f4c8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 800f49c:	e13ffd17 	ldw	r4,-12(fp)
 800f4a0:	01400304 	movi	r5,12
 800f4a4:	80005f80 	call	80005f8 <__mulsi3>
 800f4a8:	1007883a 	mov	r3,r2
 800f4ac:	00820074 	movhi	r2,2049
 800f4b0:	1082b804 	addi	r2,r2,2784
 800f4b4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800f4b8:	e0bffe17 	ldw	r2,-8(fp)
 800f4bc:	18800226 	beq	r3,r2,800f4c8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 800f4c0:	00bffcc4 	movi	r2,-13
 800f4c4:	00000a06 	br	800f4f0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800f4c8:	e0bffd17 	ldw	r2,-12(fp)
 800f4cc:	10800044 	addi	r2,r2,1
 800f4d0:	e0bffd15 	stw	r2,-12(fp)
 800f4d4:	00820074 	movhi	r2,2049
 800f4d8:	10873a04 	addi	r2,r2,7400
 800f4dc:	10800017 	ldw	r2,0(r2)
 800f4e0:	1007883a 	mov	r3,r2
 800f4e4:	e0bffd17 	ldw	r2,-12(fp)
 800f4e8:	18bfd72e 	bgeu	r3,r2,800f448 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800f4ec:	0005883a 	mov	r2,zero
}
 800f4f0:	e6ffff04 	addi	sp,fp,-4
 800f4f4:	dfc00217 	ldw	ra,8(sp)
 800f4f8:	df000117 	ldw	fp,4(sp)
 800f4fc:	dc000017 	ldw	r16,0(sp)
 800f500:	dec00304 	addi	sp,sp,12
 800f504:	f800283a 	ret

0800f508 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800f508:	defff604 	addi	sp,sp,-40
 800f50c:	dfc00915 	stw	ra,36(sp)
 800f510:	df000815 	stw	fp,32(sp)
 800f514:	df000804 	addi	fp,sp,32
 800f518:	e13ffd15 	stw	r4,-12(fp)
 800f51c:	e17ffe15 	stw	r5,-8(fp)
 800f520:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800f524:	00bfffc4 	movi	r2,-1
 800f528:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 800f52c:	00bffb44 	movi	r2,-19
 800f530:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 800f534:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800f538:	e13ffd17 	ldw	r4,-12(fp)
 800f53c:	01420074 	movhi	r5,2049
 800f540:	29473804 	addi	r5,r5,7392
 800f544:	800f8240 	call	800f824 <alt_find_dev>
 800f548:	e0bff815 	stw	r2,-32(fp)
 800f54c:	e0bff817 	ldw	r2,-32(fp)
 800f550:	1000051e 	bne	r2,zero,800f568 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 800f554:	e13ffd17 	ldw	r4,-12(fp)
 800f558:	800f8b40 	call	800f8b4 <alt_find_file>
 800f55c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 800f560:	00800044 	movi	r2,1
 800f564:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800f568:	e0bff817 	ldw	r2,-32(fp)
 800f56c:	10002b26 	beq	r2,zero,800f61c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800f570:	e13ff817 	ldw	r4,-32(fp)
 800f574:	800f9c80 	call	800f9c8 <alt_get_fd>
 800f578:	e0bff915 	stw	r2,-28(fp)
 800f57c:	e0bff917 	ldw	r2,-28(fp)
 800f580:	1000030e 	bge	r2,zero,800f590 <open+0x88>
    {
      status = index;
 800f584:	e0bff917 	ldw	r2,-28(fp)
 800f588:	e0bffa15 	stw	r2,-24(fp)
 800f58c:	00002506 	br	800f624 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 800f590:	e13ff917 	ldw	r4,-28(fp)
 800f594:	01400304 	movi	r5,12
 800f598:	80005f80 	call	80005f8 <__mulsi3>
 800f59c:	1007883a 	mov	r3,r2
 800f5a0:	00820074 	movhi	r2,2049
 800f5a4:	1082b804 	addi	r2,r2,2784
 800f5a8:	1885883a 	add	r2,r3,r2
 800f5ac:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800f5b0:	e0fffe17 	ldw	r3,-8(fp)
 800f5b4:	00900034 	movhi	r2,16384
 800f5b8:	10bfffc4 	addi	r2,r2,-1
 800f5bc:	1886703a 	and	r3,r3,r2
 800f5c0:	e0bffc17 	ldw	r2,-16(fp)
 800f5c4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 800f5c8:	e0bffb17 	ldw	r2,-20(fp)
 800f5cc:	1000051e 	bne	r2,zero,800f5e4 <open+0xdc>
 800f5d0:	e13ffc17 	ldw	r4,-16(fp)
 800f5d4:	800f4140 	call	800f414 <alt_file_locked>
 800f5d8:	e0bffa15 	stw	r2,-24(fp)
 800f5dc:	e0bffa17 	ldw	r2,-24(fp)
 800f5e0:	10001016 	blt	r2,zero,800f624 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 800f5e4:	e0bff817 	ldw	r2,-32(fp)
 800f5e8:	10800317 	ldw	r2,12(r2)
 800f5ec:	10000826 	beq	r2,zero,800f610 <open+0x108>
 800f5f0:	e0bff817 	ldw	r2,-32(fp)
 800f5f4:	10800317 	ldw	r2,12(r2)
 800f5f8:	e13ffc17 	ldw	r4,-16(fp)
 800f5fc:	e17ffd17 	ldw	r5,-12(fp)
 800f600:	e1bffe17 	ldw	r6,-8(fp)
 800f604:	e1ffff17 	ldw	r7,-4(fp)
 800f608:	103ee83a 	callr	r2
 800f60c:	00000106 	br	800f614 <open+0x10c>
 800f610:	0005883a 	mov	r2,zero
 800f614:	e0bffa15 	stw	r2,-24(fp)
 800f618:	00000206 	br	800f624 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800f61c:	00bffb44 	movi	r2,-19
 800f620:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800f624:	e0bffa17 	ldw	r2,-24(fp)
 800f628:	1000090e 	bge	r2,zero,800f650 <open+0x148>
  {
    alt_release_fd (index);  
 800f62c:	e13ff917 	ldw	r4,-28(fp)
 800f630:	800dc4c0 	call	800dc4c <alt_release_fd>
    ALT_ERRNO = -status;
 800f634:	800f3c40 	call	800f3c4 <alt_get_errno>
 800f638:	1007883a 	mov	r3,r2
 800f63c:	e0bffa17 	ldw	r2,-24(fp)
 800f640:	0085c83a 	sub	r2,zero,r2
 800f644:	18800015 	stw	r2,0(r3)
    return -1;
 800f648:	00bfffc4 	movi	r2,-1
 800f64c:	00000106 	br	800f654 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 800f650:	e0bff917 	ldw	r2,-28(fp)
}
 800f654:	e037883a 	mov	sp,fp
 800f658:	dfc00117 	ldw	ra,4(sp)
 800f65c:	df000017 	ldw	fp,0(sp)
 800f660:	dec00204 	addi	sp,sp,8
 800f664:	f800283a 	ret

0800f668 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 800f668:	defffa04 	addi	sp,sp,-24
 800f66c:	df000515 	stw	fp,20(sp)
 800f670:	df000504 	addi	fp,sp,20
 800f674:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f678:	0005303a 	rdctl	r2,status
 800f67c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f680:	e0fffc17 	ldw	r3,-16(fp)
 800f684:	00bfff84 	movi	r2,-2
 800f688:	1884703a 	and	r2,r3,r2
 800f68c:	1001703a 	wrctl	status,r2
  
  return context;
 800f690:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 800f694:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 800f698:	e0bfff17 	ldw	r2,-4(fp)
 800f69c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 800f6a0:	e0bffd17 	ldw	r2,-12(fp)
 800f6a4:	10800017 	ldw	r2,0(r2)
 800f6a8:	e0fffd17 	ldw	r3,-12(fp)
 800f6ac:	18c00117 	ldw	r3,4(r3)
 800f6b0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 800f6b4:	e0bffd17 	ldw	r2,-12(fp)
 800f6b8:	10800117 	ldw	r2,4(r2)
 800f6bc:	e0fffd17 	ldw	r3,-12(fp)
 800f6c0:	18c00017 	ldw	r3,0(r3)
 800f6c4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 800f6c8:	e0bffd17 	ldw	r2,-12(fp)
 800f6cc:	e0fffd17 	ldw	r3,-12(fp)
 800f6d0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 800f6d4:	e0bffd17 	ldw	r2,-12(fp)
 800f6d8:	e0fffd17 	ldw	r3,-12(fp)
 800f6dc:	10c00015 	stw	r3,0(r2)
 800f6e0:	e0bffb17 	ldw	r2,-20(fp)
 800f6e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f6e8:	e0bffe17 	ldw	r2,-8(fp)
 800f6ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 800f6f0:	e037883a 	mov	sp,fp
 800f6f4:	df000017 	ldw	fp,0(sp)
 800f6f8:	dec00104 	addi	sp,sp,4
 800f6fc:	f800283a 	ret

0800f700 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 800f700:	defffb04 	addi	sp,sp,-20
 800f704:	dfc00415 	stw	ra,16(sp)
 800f708:	df000315 	stw	fp,12(sp)
 800f70c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 800f710:	d0a00e17 	ldw	r2,-32712(gp)
 800f714:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 800f718:	d0a6d917 	ldw	r2,-25756(gp)
 800f71c:	10800044 	addi	r2,r2,1
 800f720:	d0a6d915 	stw	r2,-25756(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800f724:	00002e06 	br	800f7e0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 800f728:	e0bffd17 	ldw	r2,-12(fp)
 800f72c:	10800017 	ldw	r2,0(r2)
 800f730:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800f734:	e0bffd17 	ldw	r2,-12(fp)
 800f738:	10800403 	ldbu	r2,16(r2)
 800f73c:	10803fcc 	andi	r2,r2,255
 800f740:	10000426 	beq	r2,zero,800f754 <alt_tick+0x54>
 800f744:	d0a6d917 	ldw	r2,-25756(gp)
 800f748:	1000021e 	bne	r2,zero,800f754 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 800f74c:	e0bffd17 	ldw	r2,-12(fp)
 800f750:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 800f754:	e0bffd17 	ldw	r2,-12(fp)
 800f758:	10800217 	ldw	r2,8(r2)
 800f75c:	d0e6d917 	ldw	r3,-25756(gp)
 800f760:	18801d36 	bltu	r3,r2,800f7d8 <alt_tick+0xd8>
 800f764:	e0bffd17 	ldw	r2,-12(fp)
 800f768:	10800403 	ldbu	r2,16(r2)
 800f76c:	10803fcc 	andi	r2,r2,255
 800f770:	1000191e 	bne	r2,zero,800f7d8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 800f774:	e0bffd17 	ldw	r2,-12(fp)
 800f778:	10800317 	ldw	r2,12(r2)
 800f77c:	e0fffd17 	ldw	r3,-12(fp)
 800f780:	18c00517 	ldw	r3,20(r3)
 800f784:	1809883a 	mov	r4,r3
 800f788:	103ee83a 	callr	r2
 800f78c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 800f790:	e0bfff17 	ldw	r2,-4(fp)
 800f794:	1000031e 	bne	r2,zero,800f7a4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 800f798:	e13ffd17 	ldw	r4,-12(fp)
 800f79c:	800f6680 	call	800f668 <alt_alarm_stop>
 800f7a0:	00000d06 	br	800f7d8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 800f7a4:	e0bffd17 	ldw	r2,-12(fp)
 800f7a8:	10c00217 	ldw	r3,8(r2)
 800f7ac:	e0bfff17 	ldw	r2,-4(fp)
 800f7b0:	1887883a 	add	r3,r3,r2
 800f7b4:	e0bffd17 	ldw	r2,-12(fp)
 800f7b8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 800f7bc:	e0bffd17 	ldw	r2,-12(fp)
 800f7c0:	10c00217 	ldw	r3,8(r2)
 800f7c4:	d0a6d917 	ldw	r2,-25756(gp)
 800f7c8:	1880032e 	bgeu	r3,r2,800f7d8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 800f7cc:	e0bffd17 	ldw	r2,-12(fp)
 800f7d0:	00c00044 	movi	r3,1
 800f7d4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 800f7d8:	e0bffe17 	ldw	r2,-8(fp)
 800f7dc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800f7e0:	e0fffd17 	ldw	r3,-12(fp)
 800f7e4:	d0a00e04 	addi	r2,gp,-32712
 800f7e8:	18bfcf1e 	bne	r3,r2,800f728 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 800f7ec:	0001883a 	nop
}
 800f7f0:	e037883a 	mov	sp,fp
 800f7f4:	dfc00117 	ldw	ra,4(sp)
 800f7f8:	df000017 	ldw	fp,0(sp)
 800f7fc:	dec00204 	addi	sp,sp,8
 800f800:	f800283a 	ret

0800f804 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 800f804:	deffff04 	addi	sp,sp,-4
 800f808:	df000015 	stw	fp,0(sp)
 800f80c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 800f810:	000170fa 	wrctl	ienable,zero
}
 800f814:	e037883a 	mov	sp,fp
 800f818:	df000017 	ldw	fp,0(sp)
 800f81c:	dec00104 	addi	sp,sp,4
 800f820:	f800283a 	ret

0800f824 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 800f824:	defffa04 	addi	sp,sp,-24
 800f828:	dfc00515 	stw	ra,20(sp)
 800f82c:	df000415 	stw	fp,16(sp)
 800f830:	df000404 	addi	fp,sp,16
 800f834:	e13ffe15 	stw	r4,-8(fp)
 800f838:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 800f83c:	e0bfff17 	ldw	r2,-4(fp)
 800f840:	10800017 	ldw	r2,0(r2)
 800f844:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 800f848:	e13ffe17 	ldw	r4,-8(fp)
 800f84c:	80075a00 	call	80075a0 <strlen>
 800f850:	10800044 	addi	r2,r2,1
 800f854:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800f858:	00000d06 	br	800f890 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 800f85c:	e0bffc17 	ldw	r2,-16(fp)
 800f860:	10c00217 	ldw	r3,8(r2)
 800f864:	e0bffd17 	ldw	r2,-12(fp)
 800f868:	1809883a 	mov	r4,r3
 800f86c:	e17ffe17 	ldw	r5,-8(fp)
 800f870:	100d883a 	mov	r6,r2
 800f874:	800fb740 	call	800fb74 <memcmp>
 800f878:	1000021e 	bne	r2,zero,800f884 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 800f87c:	e0bffc17 	ldw	r2,-16(fp)
 800f880:	00000706 	br	800f8a0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 800f884:	e0bffc17 	ldw	r2,-16(fp)
 800f888:	10800017 	ldw	r2,0(r2)
 800f88c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800f890:	e0fffc17 	ldw	r3,-16(fp)
 800f894:	e0bfff17 	ldw	r2,-4(fp)
 800f898:	18bff01e 	bne	r3,r2,800f85c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 800f89c:	0005883a 	mov	r2,zero
}
 800f8a0:	e037883a 	mov	sp,fp
 800f8a4:	dfc00117 	ldw	ra,4(sp)
 800f8a8:	df000017 	ldw	fp,0(sp)
 800f8ac:	dec00204 	addi	sp,sp,8
 800f8b0:	f800283a 	ret

0800f8b4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 800f8b4:	defffb04 	addi	sp,sp,-20
 800f8b8:	dfc00415 	stw	ra,16(sp)
 800f8bc:	df000315 	stw	fp,12(sp)
 800f8c0:	df000304 	addi	fp,sp,12
 800f8c4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 800f8c8:	00820074 	movhi	r2,2049
 800f8cc:	10873604 	addi	r2,r2,7384
 800f8d0:	10800017 	ldw	r2,0(r2)
 800f8d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800f8d8:	00003106 	br	800f9a0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 800f8dc:	e0bffd17 	ldw	r2,-12(fp)
 800f8e0:	10800217 	ldw	r2,8(r2)
 800f8e4:	1009883a 	mov	r4,r2
 800f8e8:	80075a00 	call	80075a0 <strlen>
 800f8ec:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 800f8f0:	e0bffd17 	ldw	r2,-12(fp)
 800f8f4:	10c00217 	ldw	r3,8(r2)
 800f8f8:	e0bffe17 	ldw	r2,-8(fp)
 800f8fc:	10bfffc4 	addi	r2,r2,-1
 800f900:	1885883a 	add	r2,r3,r2
 800f904:	10800003 	ldbu	r2,0(r2)
 800f908:	10803fcc 	andi	r2,r2,255
 800f90c:	1080201c 	xori	r2,r2,128
 800f910:	10bfe004 	addi	r2,r2,-128
 800f914:	10800bd8 	cmpnei	r2,r2,47
 800f918:	1000031e 	bne	r2,zero,800f928 <alt_find_file+0x74>
    {
      len -= 1;
 800f91c:	e0bffe17 	ldw	r2,-8(fp)
 800f920:	10bfffc4 	addi	r2,r2,-1
 800f924:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800f928:	e0bffe17 	ldw	r2,-8(fp)
 800f92c:	e0ffff17 	ldw	r3,-4(fp)
 800f930:	1885883a 	add	r2,r3,r2
 800f934:	10800003 	ldbu	r2,0(r2)
 800f938:	10803fcc 	andi	r2,r2,255
 800f93c:	1080201c 	xori	r2,r2,128
 800f940:	10bfe004 	addi	r2,r2,-128
 800f944:	10800be0 	cmpeqi	r2,r2,47
 800f948:	1000081e 	bne	r2,zero,800f96c <alt_find_file+0xb8>
 800f94c:	e0bffe17 	ldw	r2,-8(fp)
 800f950:	e0ffff17 	ldw	r3,-4(fp)
 800f954:	1885883a 	add	r2,r3,r2
 800f958:	10800003 	ldbu	r2,0(r2)
 800f95c:	10803fcc 	andi	r2,r2,255
 800f960:	1080201c 	xori	r2,r2,128
 800f964:	10bfe004 	addi	r2,r2,-128
 800f968:	10000a1e 	bne	r2,zero,800f994 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 800f96c:	e0bffd17 	ldw	r2,-12(fp)
 800f970:	10c00217 	ldw	r3,8(r2)
 800f974:	e0bffe17 	ldw	r2,-8(fp)
 800f978:	1809883a 	mov	r4,r3
 800f97c:	e17fff17 	ldw	r5,-4(fp)
 800f980:	100d883a 	mov	r6,r2
 800f984:	800fb740 	call	800fb74 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800f988:	1000021e 	bne	r2,zero,800f994 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 800f98c:	e0bffd17 	ldw	r2,-12(fp)
 800f990:	00000806 	br	800f9b4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 800f994:	e0bffd17 	ldw	r2,-12(fp)
 800f998:	10800017 	ldw	r2,0(r2)
 800f99c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800f9a0:	e0fffd17 	ldw	r3,-12(fp)
 800f9a4:	00820074 	movhi	r2,2049
 800f9a8:	10873604 	addi	r2,r2,7384
 800f9ac:	18bfcb1e 	bne	r3,r2,800f8dc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 800f9b0:	0005883a 	mov	r2,zero
}
 800f9b4:	e037883a 	mov	sp,fp
 800f9b8:	dfc00117 	ldw	ra,4(sp)
 800f9bc:	df000017 	ldw	fp,0(sp)
 800f9c0:	dec00204 	addi	sp,sp,8
 800f9c4:	f800283a 	ret

0800f9c8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 800f9c8:	defffa04 	addi	sp,sp,-24
 800f9cc:	dfc00515 	stw	ra,20(sp)
 800f9d0:	df000415 	stw	fp,16(sp)
 800f9d4:	dc000315 	stw	r16,12(sp)
 800f9d8:	df000404 	addi	fp,sp,16
 800f9dc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 800f9e0:	00bffa04 	movi	r2,-24
 800f9e4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800f9e8:	e03ffc15 	stw	zero,-16(fp)
 800f9ec:	00002106 	br	800fa74 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 800f9f0:	04020074 	movhi	r16,2049
 800f9f4:	8402b804 	addi	r16,r16,2784
 800f9f8:	e0bffc17 	ldw	r2,-16(fp)
 800f9fc:	1009883a 	mov	r4,r2
 800fa00:	01400304 	movi	r5,12
 800fa04:	80005f80 	call	80005f8 <__mulsi3>
 800fa08:	8085883a 	add	r2,r16,r2
 800fa0c:	10800017 	ldw	r2,0(r2)
 800fa10:	1000151e 	bne	r2,zero,800fa68 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 800fa14:	04020074 	movhi	r16,2049
 800fa18:	8402b804 	addi	r16,r16,2784
 800fa1c:	e0bffc17 	ldw	r2,-16(fp)
 800fa20:	1009883a 	mov	r4,r2
 800fa24:	01400304 	movi	r5,12
 800fa28:	80005f80 	call	80005f8 <__mulsi3>
 800fa2c:	8085883a 	add	r2,r16,r2
 800fa30:	e0fffe17 	ldw	r3,-8(fp)
 800fa34:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 800fa38:	00820074 	movhi	r2,2049
 800fa3c:	10873a04 	addi	r2,r2,7400
 800fa40:	10c00017 	ldw	r3,0(r2)
 800fa44:	e0bffc17 	ldw	r2,-16(fp)
 800fa48:	1880040e 	bge	r3,r2,800fa5c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 800fa4c:	00820074 	movhi	r2,2049
 800fa50:	10873a04 	addi	r2,r2,7400
 800fa54:	e0fffc17 	ldw	r3,-16(fp)
 800fa58:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 800fa5c:	e0bffc17 	ldw	r2,-16(fp)
 800fa60:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 800fa64:	00000606 	br	800fa80 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800fa68:	e0bffc17 	ldw	r2,-16(fp)
 800fa6c:	10800044 	addi	r2,r2,1
 800fa70:	e0bffc15 	stw	r2,-16(fp)
 800fa74:	e0bffc17 	ldw	r2,-16(fp)
 800fa78:	10800810 	cmplti	r2,r2,32
 800fa7c:	103fdc1e 	bne	r2,zero,800f9f0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 800fa80:	e0bffd17 	ldw	r2,-12(fp)
}
 800fa84:	e6ffff04 	addi	sp,fp,-4
 800fa88:	dfc00217 	ldw	ra,8(sp)
 800fa8c:	df000117 	ldw	fp,4(sp)
 800fa90:	dc000017 	ldw	r16,0(sp)
 800fa94:	dec00304 	addi	sp,sp,12
 800fa98:	f800283a 	ret

0800fa9c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 800fa9c:	defffb04 	addi	sp,sp,-20
 800faa0:	df000415 	stw	fp,16(sp)
 800faa4:	df000404 	addi	fp,sp,16
 800faa8:	e13ffe15 	stw	r4,-8(fp)
 800faac:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 800fab0:	e0bfff17 	ldw	r2,-4(fp)
 800fab4:	10840070 	cmpltui	r2,r2,4097
 800fab8:	1000021e 	bne	r2,zero,800fac4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 800fabc:	00840004 	movi	r2,4096
 800fac0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 800fac4:	e0fffe17 	ldw	r3,-8(fp)
 800fac8:	e0bfff17 	ldw	r2,-4(fp)
 800facc:	1885883a 	add	r2,r3,r2
 800fad0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 800fad4:	e0bffe17 	ldw	r2,-8(fp)
 800fad8:	e0bffc15 	stw	r2,-16(fp)
 800fadc:	00000506 	br	800faf4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 800fae0:	e0bffc17 	ldw	r2,-16(fp)
 800fae4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 800fae8:	e0bffc17 	ldw	r2,-16(fp)
 800faec:	10800804 	addi	r2,r2,32
 800faf0:	e0bffc15 	stw	r2,-16(fp)
 800faf4:	e0fffc17 	ldw	r3,-16(fp)
 800faf8:	e0bffd17 	ldw	r2,-12(fp)
 800fafc:	18bff836 	bltu	r3,r2,800fae0 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 800fb00:	e0bffe17 	ldw	r2,-8(fp)
 800fb04:	108007cc 	andi	r2,r2,31
 800fb08:	10000226 	beq	r2,zero,800fb14 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 800fb0c:	e0bffc17 	ldw	r2,-16(fp)
 800fb10:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 800fb14:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 800fb18:	e037883a 	mov	sp,fp
 800fb1c:	df000017 	ldw	fp,0(sp)
 800fb20:	dec00104 	addi	sp,sp,4
 800fb24:	f800283a 	ret

0800fb28 <atexit>:
 800fb28:	200b883a 	mov	r5,r4
 800fb2c:	000d883a 	mov	r6,zero
 800fb30:	0009883a 	mov	r4,zero
 800fb34:	000f883a 	mov	r7,zero
 800fb38:	800fbf01 	jmpi	800fbf0 <__register_exitproc>

0800fb3c <exit>:
 800fb3c:	defffe04 	addi	sp,sp,-8
 800fb40:	000b883a 	mov	r5,zero
 800fb44:	dc000015 	stw	r16,0(sp)
 800fb48:	dfc00115 	stw	ra,4(sp)
 800fb4c:	2021883a 	mov	r16,r4
 800fb50:	800fd040 	call	800fd04 <__call_exitprocs>
 800fb54:	00820074 	movhi	r2,2049
 800fb58:	10873004 	addi	r2,r2,7360
 800fb5c:	11000017 	ldw	r4,0(r2)
 800fb60:	20800f17 	ldw	r2,60(r4)
 800fb64:	10000126 	beq	r2,zero,800fb6c <exit+0x30>
 800fb68:	103ee83a 	callr	r2
 800fb6c:	8009883a 	mov	r4,r16
 800fb70:	800fe980 	call	800fe98 <_exit>

0800fb74 <memcmp>:
 800fb74:	01c000c4 	movi	r7,3
 800fb78:	3980192e 	bgeu	r7,r6,800fbe0 <memcmp+0x6c>
 800fb7c:	2144b03a 	or	r2,r4,r5
 800fb80:	11c4703a 	and	r2,r2,r7
 800fb84:	10000f26 	beq	r2,zero,800fbc4 <memcmp+0x50>
 800fb88:	20800003 	ldbu	r2,0(r4)
 800fb8c:	28c00003 	ldbu	r3,0(r5)
 800fb90:	10c0151e 	bne	r2,r3,800fbe8 <memcmp+0x74>
 800fb94:	31bfff84 	addi	r6,r6,-2
 800fb98:	01ffffc4 	movi	r7,-1
 800fb9c:	00000406 	br	800fbb0 <memcmp+0x3c>
 800fba0:	20800003 	ldbu	r2,0(r4)
 800fba4:	28c00003 	ldbu	r3,0(r5)
 800fba8:	31bfffc4 	addi	r6,r6,-1
 800fbac:	10c00e1e 	bne	r2,r3,800fbe8 <memcmp+0x74>
 800fbb0:	21000044 	addi	r4,r4,1
 800fbb4:	29400044 	addi	r5,r5,1
 800fbb8:	31fff91e 	bne	r6,r7,800fba0 <memcmp+0x2c>
 800fbbc:	0005883a 	mov	r2,zero
 800fbc0:	f800283a 	ret
 800fbc4:	20c00017 	ldw	r3,0(r4)
 800fbc8:	28800017 	ldw	r2,0(r5)
 800fbcc:	1880041e 	bne	r3,r2,800fbe0 <memcmp+0x6c>
 800fbd0:	31bfff04 	addi	r6,r6,-4
 800fbd4:	21000104 	addi	r4,r4,4
 800fbd8:	29400104 	addi	r5,r5,4
 800fbdc:	39bff936 	bltu	r7,r6,800fbc4 <memcmp+0x50>
 800fbe0:	303fe91e 	bne	r6,zero,800fb88 <memcmp+0x14>
 800fbe4:	003ff506 	br	800fbbc <memcmp+0x48>
 800fbe8:	10c5c83a 	sub	r2,r2,r3
 800fbec:	f800283a 	ret

0800fbf0 <__register_exitproc>:
 800fbf0:	00820074 	movhi	r2,2049
 800fbf4:	defffa04 	addi	sp,sp,-24
 800fbf8:	10873004 	addi	r2,r2,7360
 800fbfc:	dc000315 	stw	r16,12(sp)
 800fc00:	14000017 	ldw	r16,0(r2)
 800fc04:	dc400415 	stw	r17,16(sp)
 800fc08:	dfc00515 	stw	ra,20(sp)
 800fc0c:	80805217 	ldw	r2,328(r16)
 800fc10:	2023883a 	mov	r17,r4
 800fc14:	10003626 	beq	r2,zero,800fcf0 <__register_exitproc+0x100>
 800fc18:	10c00117 	ldw	r3,4(r2)
 800fc1c:	010007c4 	movi	r4,31
 800fc20:	20c00e16 	blt	r4,r3,800fc5c <__register_exitproc+0x6c>
 800fc24:	1a400044 	addi	r9,r3,1
 800fc28:	8800211e 	bne	r17,zero,800fcb0 <__register_exitproc+0xc0>
 800fc2c:	18c00084 	addi	r3,r3,2
 800fc30:	18c7883a 	add	r3,r3,r3
 800fc34:	18c7883a 	add	r3,r3,r3
 800fc38:	12400115 	stw	r9,4(r2)
 800fc3c:	10c7883a 	add	r3,r2,r3
 800fc40:	19400015 	stw	r5,0(r3)
 800fc44:	0005883a 	mov	r2,zero
 800fc48:	dfc00517 	ldw	ra,20(sp)
 800fc4c:	dc400417 	ldw	r17,16(sp)
 800fc50:	dc000317 	ldw	r16,12(sp)
 800fc54:	dec00604 	addi	sp,sp,24
 800fc58:	f800283a 	ret
 800fc5c:	00800034 	movhi	r2,0
 800fc60:	10800004 	addi	r2,r2,0
 800fc64:	10002526 	beq	r2,zero,800fcfc <__register_exitproc+0x10c>
 800fc68:	01006404 	movi	r4,400
 800fc6c:	d9400015 	stw	r5,0(sp)
 800fc70:	d9800115 	stw	r6,4(sp)
 800fc74:	d9c00215 	stw	r7,8(sp)
 800fc78:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 800fc7c:	d9400017 	ldw	r5,0(sp)
 800fc80:	d9800117 	ldw	r6,4(sp)
 800fc84:	d9c00217 	ldw	r7,8(sp)
 800fc88:	10001c26 	beq	r2,zero,800fcfc <__register_exitproc+0x10c>
 800fc8c:	80c05217 	ldw	r3,328(r16)
 800fc90:	10000115 	stw	zero,4(r2)
 800fc94:	02400044 	movi	r9,1
 800fc98:	10c00015 	stw	r3,0(r2)
 800fc9c:	80805215 	stw	r2,328(r16)
 800fca0:	10006215 	stw	zero,392(r2)
 800fca4:	10006315 	stw	zero,396(r2)
 800fca8:	0007883a 	mov	r3,zero
 800fcac:	883fdf26 	beq	r17,zero,800fc2c <__register_exitproc+0x3c>
 800fcb0:	18d1883a 	add	r8,r3,r3
 800fcb4:	4211883a 	add	r8,r8,r8
 800fcb8:	1211883a 	add	r8,r2,r8
 800fcbc:	41802215 	stw	r6,136(r8)
 800fcc0:	01000044 	movi	r4,1
 800fcc4:	11806217 	ldw	r6,392(r2)
 800fcc8:	20c8983a 	sll	r4,r4,r3
 800fccc:	310cb03a 	or	r6,r6,r4
 800fcd0:	11806215 	stw	r6,392(r2)
 800fcd4:	41c04215 	stw	r7,264(r8)
 800fcd8:	01800084 	movi	r6,2
 800fcdc:	89bfd31e 	bne	r17,r6,800fc2c <__register_exitproc+0x3c>
 800fce0:	11806317 	ldw	r6,396(r2)
 800fce4:	3108b03a 	or	r4,r6,r4
 800fce8:	11006315 	stw	r4,396(r2)
 800fcec:	003fcf06 	br	800fc2c <__register_exitproc+0x3c>
 800fcf0:	80805304 	addi	r2,r16,332
 800fcf4:	80805215 	stw	r2,328(r16)
 800fcf8:	003fc706 	br	800fc18 <__register_exitproc+0x28>
 800fcfc:	00bfffc4 	movi	r2,-1
 800fd00:	003fd106 	br	800fc48 <__register_exitproc+0x58>

0800fd04 <__call_exitprocs>:
 800fd04:	00820074 	movhi	r2,2049
 800fd08:	10873004 	addi	r2,r2,7360
 800fd0c:	10800017 	ldw	r2,0(r2)
 800fd10:	defff404 	addi	sp,sp,-48
 800fd14:	dd800815 	stw	r22,32(sp)
 800fd18:	d8800015 	stw	r2,0(sp)
 800fd1c:	10805204 	addi	r2,r2,328
 800fd20:	dd000615 	stw	r20,24(sp)
 800fd24:	dc800415 	stw	r18,16(sp)
 800fd28:	dfc00b15 	stw	ra,44(sp)
 800fd2c:	df000a15 	stw	fp,40(sp)
 800fd30:	ddc00915 	stw	r23,36(sp)
 800fd34:	dd400715 	stw	r21,28(sp)
 800fd38:	dcc00515 	stw	r19,20(sp)
 800fd3c:	dc400315 	stw	r17,12(sp)
 800fd40:	dc000215 	stw	r16,8(sp)
 800fd44:	2025883a 	mov	r18,r4
 800fd48:	2829883a 	mov	r20,r5
 800fd4c:	d8800115 	stw	r2,4(sp)
 800fd50:	05bfffc4 	movi	r22,-1
 800fd54:	d8800017 	ldw	r2,0(sp)
 800fd58:	14c05217 	ldw	r19,328(r2)
 800fd5c:	98001d26 	beq	r19,zero,800fdd4 <__call_exitprocs+0xd0>
 800fd60:	dd400117 	ldw	r21,4(sp)
 800fd64:	98800117 	ldw	r2,4(r19)
 800fd68:	173fffc4 	addi	fp,r2,-1
 800fd6c:	e0000d16 	blt	fp,zero,800fda4 <__call_exitprocs+0xa0>
 800fd70:	14000044 	addi	r16,r2,1
 800fd74:	8421883a 	add	r16,r16,r16
 800fd78:	8421883a 	add	r16,r16,r16
 800fd7c:	84402004 	addi	r17,r16,128
 800fd80:	9c63883a 	add	r17,r19,r17
 800fd84:	9c21883a 	add	r16,r19,r16
 800fd88:	a0001e26 	beq	r20,zero,800fe04 <__call_exitprocs+0x100>
 800fd8c:	80804017 	ldw	r2,256(r16)
 800fd90:	15001c26 	beq	r2,r20,800fe04 <__call_exitprocs+0x100>
 800fd94:	e73fffc4 	addi	fp,fp,-1
 800fd98:	843fff04 	addi	r16,r16,-4
 800fd9c:	8c7fff04 	addi	r17,r17,-4
 800fda0:	e5bff91e 	bne	fp,r22,800fd88 <__call_exitprocs+0x84>
 800fda4:	00800034 	movhi	r2,0
 800fda8:	10800004 	addi	r2,r2,0
 800fdac:	10000926 	beq	r2,zero,800fdd4 <__call_exitprocs+0xd0>
 800fdb0:	98800117 	ldw	r2,4(r19)
 800fdb4:	1000311e 	bne	r2,zero,800fe7c <__call_exitprocs+0x178>
 800fdb8:	98800017 	ldw	r2,0(r19)
 800fdbc:	10003426 	beq	r2,zero,800fe90 <__call_exitprocs+0x18c>
 800fdc0:	9809883a 	mov	r4,r19
 800fdc4:	a8800015 	stw	r2,0(r21)
 800fdc8:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 800fdcc:	acc00017 	ldw	r19,0(r21)
 800fdd0:	983fe41e 	bne	r19,zero,800fd64 <__call_exitprocs+0x60>
 800fdd4:	dfc00b17 	ldw	ra,44(sp)
 800fdd8:	df000a17 	ldw	fp,40(sp)
 800fddc:	ddc00917 	ldw	r23,36(sp)
 800fde0:	dd800817 	ldw	r22,32(sp)
 800fde4:	dd400717 	ldw	r21,28(sp)
 800fde8:	dd000617 	ldw	r20,24(sp)
 800fdec:	dcc00517 	ldw	r19,20(sp)
 800fdf0:	dc800417 	ldw	r18,16(sp)
 800fdf4:	dc400317 	ldw	r17,12(sp)
 800fdf8:	dc000217 	ldw	r16,8(sp)
 800fdfc:	dec00c04 	addi	sp,sp,48
 800fe00:	f800283a 	ret
 800fe04:	98800117 	ldw	r2,4(r19)
 800fe08:	80c00017 	ldw	r3,0(r16)
 800fe0c:	10bfffc4 	addi	r2,r2,-1
 800fe10:	17001526 	beq	r2,fp,800fe68 <__call_exitprocs+0x164>
 800fe14:	80000015 	stw	zero,0(r16)
 800fe18:	183fde26 	beq	r3,zero,800fd94 <__call_exitprocs+0x90>
 800fe1c:	00800044 	movi	r2,1
 800fe20:	1708983a 	sll	r4,r2,fp
 800fe24:	98806217 	ldw	r2,392(r19)
 800fe28:	9dc00117 	ldw	r23,4(r19)
 800fe2c:	2084703a 	and	r2,r4,r2
 800fe30:	1000061e 	bne	r2,zero,800fe4c <__call_exitprocs+0x148>
 800fe34:	183ee83a 	callr	r3
 800fe38:	98800117 	ldw	r2,4(r19)
 800fe3c:	15ffc51e 	bne	r2,r23,800fd54 <__call_exitprocs+0x50>
 800fe40:	a8800017 	ldw	r2,0(r21)
 800fe44:	14ffd326 	beq	r2,r19,800fd94 <__call_exitprocs+0x90>
 800fe48:	003fc206 	br	800fd54 <__call_exitprocs+0x50>
 800fe4c:	98806317 	ldw	r2,396(r19)
 800fe50:	2084703a 	and	r2,r4,r2
 800fe54:	1000061e 	bne	r2,zero,800fe70 <__call_exitprocs+0x16c>
 800fe58:	89400017 	ldw	r5,0(r17)
 800fe5c:	9009883a 	mov	r4,r18
 800fe60:	183ee83a 	callr	r3
 800fe64:	003ff406 	br	800fe38 <__call_exitprocs+0x134>
 800fe68:	9f000115 	stw	fp,4(r19)
 800fe6c:	003fea06 	br	800fe18 <__call_exitprocs+0x114>
 800fe70:	89000017 	ldw	r4,0(r17)
 800fe74:	183ee83a 	callr	r3
 800fe78:	003fef06 	br	800fe38 <__call_exitprocs+0x134>
 800fe7c:	98800017 	ldw	r2,0(r19)
 800fe80:	982b883a 	mov	r21,r19
 800fe84:	1027883a 	mov	r19,r2
 800fe88:	983fb61e 	bne	r19,zero,800fd64 <__call_exitprocs+0x60>
 800fe8c:	003fd106 	br	800fdd4 <__call_exitprocs+0xd0>
 800fe90:	0005883a 	mov	r2,zero
 800fe94:	003ffa06 	br	800fe80 <__call_exitprocs+0x17c>

0800fe98 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 800fe98:	defffd04 	addi	sp,sp,-12
 800fe9c:	df000215 	stw	fp,8(sp)
 800fea0:	df000204 	addi	fp,sp,8
 800fea4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 800fea8:	0001883a 	nop
 800feac:	e0bfff17 	ldw	r2,-4(fp)
 800feb0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 800feb4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 800feb8:	10000226 	beq	r2,zero,800fec4 <_exit+0x2c>
    ALT_SIM_FAIL();
 800febc:	002af070 	cmpltui	zero,zero,43969
 800fec0:	00000106 	br	800fec8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 800fec4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 800fec8:	003fff06 	br	800fec8 <_exit+0x30>
